
Serial_Communication_ZigBee_wireless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800200  000072d2  00007366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000072d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  008004d0  008004d0  00007636  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00007636  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000605  00000000  00000000  00007656  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001452  00000000  00000000  00007c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bc  00000000  00000000  000090ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019d7  00000000  00000000  00009369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  0000ad40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062d  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__vector_5>
      18:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_35>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ed       	ldi	r30, 0xD2	; 210
      fc:	f2 e7       	ldi	r31, 0x72	; 114
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3d       	cpi	r26, 0xD0	; 208
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	15 e0       	ldi	r17, 0x05	; 5
     110:	a0 ed       	ldi	r26, 0xD0	; 208
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 39       	cpi	r26, 0x9D	; 157
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <main>
     122:	0c 94 67 39 	jmp	0x72ce	; 0x72ce <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	2d ec       	ldi	r18, 0xCD	; 205
     170:	3c ec       	ldi	r19, 0xCC	; 204
     172:	4c e2       	ldi	r20, 0x2C	; 44
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	84 e1       	ldi	r24, 0x14	; 20
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	2d ec       	ldi	r18, 0xCD	; 205
     308:	3c ec       	ldi	r19, 0xCC	; 204
     30a:	4c e2       	ldi	r20, 0x2C	; 44
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	84 e1       	ldi	r24, 0x14	; 20
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c e2       	ldi	r20, 0x2C	; 44
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	84 e1       	ldi	r24, 0x14	; 20
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	2d ec       	ldi	r18, 0xCD	; 205
     614:	3c ec       	ldi	r19, 0xCC	; 204
     616:	4c e2       	ldi	r20, 0x2C	; 44
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	84 e1       	ldi	r24, 0x14	; 20
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	2d ec       	ldi	r18, 0xCD	; 205
     71a:	3c ec       	ldi	r19, 0xCC	; 204
     71c:	4c e2       	ldi	r20, 0x2C	; 44
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	2d ec       	ldi	r18, 0xCD	; 205
     830:	3c ec       	ldi	r19, 0xCC	; 204
     832:	4c e2       	ldi	r20, 0x2C	; 44
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	84 e1       	ldi	r24, 0x14	; 20
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	2d ec       	ldi	r18, 0xCD	; 205
     922:	3c ec       	ldi	r19, 0xCC	; 204
     924:	4c e2       	ldi	r20, 0x2C	; 44
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	2d ec       	ldi	r18, 0xCD	; 205
     a38:	3c ec       	ldi	r19, 0xCC	; 204
     a3a:	4c e2       	ldi	r20, 0x2C	; 44
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	84 e1       	ldi	r24, 0x14	; 20
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	2d ec       	ldi	r18, 0xCD	; 205
     b56:	3c ec       	ldi	r19, 0xCC	; 204
     b58:	4c e2       	ldi	r20, 0x2C	; 44
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_clear>:
void lcd_clear()
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	69 97       	sbiw	r28, 0x19	; 25
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
char dummy[25];
strcpy(dummy,"                   ");
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	32 e0       	ldi	r19, 0x02	; 2
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	b9 01       	movw	r22, r18
     c6e:	44 e1       	ldi	r20, 0x14	; 20
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	0e 94 6d 38 	call	0x70da	; 0x70da <memcpy>
lcd_string(dummy);
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
lcd_cursor(1,1);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
}
     c86:	69 96       	adiw	r28, 0x19	; 25
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	6e 97       	sbiw	r28, 0x1e	; 30
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     cae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb0:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb4:	80 7f       	andi	r24, 0xF0	; 240
     cb6:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cb8:	a8 e2       	ldi	r26, 0x28	; 40
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e2       	ldi	r30, 0x28	; 40
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 70       	andi	r24, 0x0F	; 15
     cc4:	8c 93       	st	X, r24
	lcd_port |= temp;
     cc6:	a8 e2       	ldi	r26, 0x28	; 40
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 e2       	ldi	r30, 0x28	; 40
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	90 81       	ld	r25, Z
     cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cd2:	89 2b       	or	r24, r25
     cd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     cd6:	a8 e2       	ldi	r26, 0x28	; 40
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 e2       	ldi	r30, 0x28	; 40
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8e 7f       	andi	r24, 0xFE	; 254
     ce2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     ce4:	a8 e2       	ldi	r26, 0x28	; 40
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 e2       	ldi	r30, 0x28	; 40
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8d 7f       	andi	r24, 0xFD	; 253
     cf0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	8c 93       	st	X, r24
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	a0 ea       	ldi	r26, 0xA0	; 160
     d06:	b0 e4       	ldi	r27, 0x40	; 64
     d08:	89 8f       	std	Y+25, r24	; 0x19
     d0a:	9a 8f       	std	Y+26, r25	; 0x1a
     d0c:	ab 8f       	std	Y+27, r26	; 0x1b
     d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d10:	69 8d       	ldd	r22, Y+25	; 0x19
     d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d18:	2d ec       	ldi	r18, 0xCD	; 205
     d1a:	3c ec       	ldi	r19, 0xCC	; 204
     d1c:	4c e2       	ldi	r20, 0x2C	; 44
     d1e:	55 e4       	ldi	r21, 0x45	; 69
     d20:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8d 8b       	std	Y+21, r24	; 0x15
     d2a:	9e 8b       	std	Y+22, r25	; 0x16
     d2c:	af 8b       	std	Y+23, r26	; 0x17
     d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	5f e3       	ldi	r21, 0x3F	; 63
     d40:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     d44:	88 23       	and	r24, r24
     d46:	2c f4       	brge	.+10     	; 0xd52 <lcd_wr_command+0xba>
		__ticks = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9c 8b       	std	Y+20, r25	; 0x14
     d4e:	8b 8b       	std	Y+19, r24	; 0x13
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d52:	6d 89       	ldd	r22, Y+21	; 0x15
     d54:	7e 89       	ldd	r23, Y+22	; 0x16
     d56:	8f 89       	ldd	r24, Y+23	; 0x17
     d58:	98 8d       	ldd	r25, Y+24	; 0x18
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	4f e7       	ldi	r20, 0x7F	; 127
     d60:	57 e4       	ldi	r21, 0x47	; 71
     d62:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     d66:	18 16       	cp	r1, r24
     d68:	4c f5       	brge	.+82     	; 0xdbc <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	69 8d       	ldd	r22, Y+25	; 0x19
     d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9c 8b       	std	Y+20, r25	; 0x14
     d90:	8b 8b       	std	Y+19, r24	; 0x13
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <lcd_wr_command+0x11a>
     d94:	84 e1       	ldi	r24, 0x14	; 20
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9a 8b       	std	Y+18, r25	; 0x12
     d9a:	89 8b       	std	Y+17, r24	; 0x11
     d9c:	89 89       	ldd	r24, Y+17	; 0x11
     d9e:	9a 89       	ldd	r25, Y+18	; 0x12
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <lcd_wr_command+0x108>
     da4:	9a 8b       	std	Y+18, r25	; 0x12
     da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da8:	8b 89       	ldd	r24, Y+19	; 0x13
     daa:	9c 89       	ldd	r25, Y+20	; 0x14
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9c 8b       	std	Y+20, r25	; 0x14
     db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	69 f7       	brne	.-38     	; 0xd94 <lcd_wr_command+0xfc>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dbc:	6d 89       	ldd	r22, Y+21	; 0x15
     dbe:	7e 89       	ldd	r23, Y+22	; 0x16
     dc0:	8f 89       	ldd	r24, Y+23	; 0x17
     dc2:	98 8d       	ldd	r25, Y+24	; 0x18
     dc4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9c 8b       	std	Y+20, r25	; 0x14
     dce:	8b 8b       	std	Y+19, r24	; 0x13
     dd0:	8b 89       	ldd	r24, Y+19	; 0x13
     dd2:	9c 89       	ldd	r25, Y+20	; 0x14
     dd4:	98 8b       	std	Y+16, r25	; 0x10
     dd6:	8f 87       	std	Y+15, r24	; 0x0f
     dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dda:	98 89       	ldd	r25, Y+16	; 0x10
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <lcd_wr_command+0x144>
     de0:	98 8b       	std	Y+16, r25	; 0x10
     de2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     df2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df4:	8f 70       	andi	r24, 0x0F	; 15
     df6:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfa:	82 95       	swap	r24
     dfc:	80 7f       	andi	r24, 0xF0	; 240
     dfe:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e00:	a8 e2       	ldi	r26, 0x28	; 40
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e2       	ldi	r30, 0x28	; 40
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 70       	andi	r24, 0x0F	; 15
     e0c:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e0e:	a8 e2       	ldi	r26, 0x28	; 40
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e2       	ldi	r30, 0x28	; 40
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	90 81       	ld	r25, Z
     e18:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e1a:	89 2b       	or	r24, r25
     e1c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e2c:	a8 e2       	ldi	r26, 0x28	; 40
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e8 e2       	ldi	r30, 0x28	; 40
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	8c 93       	st	X, r24
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 ea       	ldi	r26, 0xA0	; 160
     e4e:	b0 e4       	ldi	r27, 0x40	; 64
     e50:	8b 87       	std	Y+11, r24	; 0x0b
     e52:	9c 87       	std	Y+12, r25	; 0x0c
     e54:	ad 87       	std	Y+13, r26	; 0x0d
     e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e58:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e60:	2d ec       	ldi	r18, 0xCD	; 205
     e62:	3c ec       	ldi	r19, 0xCC	; 204
     e64:	4c e2       	ldi	r20, 0x2C	; 44
     e66:	55 e4       	ldi	r21, 0x45	; 69
     e68:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	8f 83       	std	Y+7, r24	; 0x07
     e72:	98 87       	std	Y+8, r25	; 0x08
     e74:	a9 87       	std	Y+9, r26	; 0x09
     e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	5f e3       	ldi	r21, 0x3F	; 63
     e88:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     e8c:	88 23       	and	r24, r24
     e8e:	2c f4       	brge	.+10     	; 0xe9a <lcd_wr_command+0x202>
		__ticks = 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	3f c0       	rjmp	.+126    	; 0xf18 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	4f e7       	ldi	r20, 0x7F	; 127
     ea8:	57 e4       	ldi	r21, 0x47	; 71
     eaa:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
     eae:	18 16       	cp	r1, r24
     eb0:	4c f5       	brge	.+82     	; 0xf04 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e2       	ldi	r20, 0x20	; 32
     ec0:	51 e4       	ldi	r21, 0x41	; 65
     ec2:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	0f c0       	rjmp	.+30     	; 0xefa <lcd_wr_command+0x262>
     edc:	84 e1       	ldi	r24, 0x14	; 20
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <lcd_wr_command+0x250>
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	69 f7       	brne	.-38     	; 0xedc <lcd_wr_command+0x244>
     f02:	14 c0       	rjmp	.+40     	; 0xf2c <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f04:	6f 81       	ldd	r22, Y+7	; 0x07
     f06:	78 85       	ldd	r23, Y+8	; 0x08
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <lcd_wr_command+0x28c>
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f2c:	a8 e2       	ldi	r26, 0x28	; 40
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e8 e2       	ldi	r30, 0x28	; 40
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8b 7f       	andi	r24, 0xFB	; 251
     f38:	8c 93       	st	X, r24
}
     f3a:	6e 96       	adiw	r28, 0x1e	; 30
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	6e 97       	sbiw	r28, 0x1e	; 30
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f64:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	80 7f       	andi	r24, 0xF0	; 240
     f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f6c:	a8 e2       	ldi	r26, 0x28	; 40
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e2       	ldi	r30, 0x28	; 40
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 70       	andi	r24, 0x0F	; 15
     f78:	8c 93       	st	X, r24
	lcd_port |= temp;
     f7a:	a8 e2       	ldi	r26, 0x28	; 40
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 e2       	ldi	r30, 0x28	; 40
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	90 81       	ld	r25, Z
     f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f86:	89 2b       	or	r24, r25
     f88:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f8a:	a8 e2       	ldi	r26, 0x28	; 40
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e2       	ldi	r30, 0x28	; 40
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f98:	a8 e2       	ldi	r26, 0x28	; 40
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e2       	ldi	r30, 0x28	; 40
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8d 7f       	andi	r24, 0xFD	; 253
     fa4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	8c 93       	st	X, r24
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 ea       	ldi	r26, 0xA0	; 160
     fba:	b0 e4       	ldi	r27, 0x40	; 64
     fbc:	89 8f       	std	Y+25, r24	; 0x19
     fbe:	9a 8f       	std	Y+26, r25	; 0x1a
     fc0:	ab 8f       	std	Y+27, r26	; 0x1b
     fc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	69 8d       	ldd	r22, Y+25	; 0x19
     fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fcc:	2d ec       	ldi	r18, 0xCD	; 205
     fce:	3c ec       	ldi	r19, 0xCC	; 204
     fd0:	4c e2       	ldi	r20, 0x2C	; 44
     fd2:	55 e4       	ldi	r21, 0x45	; 69
     fd4:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8d 8b       	std	Y+21, r24	; 0x15
     fde:	9e 8b       	std	Y+22, r25	; 0x16
     fe0:	af 8b       	std	Y+23, r26	; 0x17
     fe2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fe4:	6d 89       	ldd	r22, Y+21	; 0x15
     fe6:	7e 89       	ldd	r23, Y+22	; 0x16
     fe8:	8f 89       	ldd	r24, Y+23	; 0x17
     fea:	98 8d       	ldd	r25, Y+24	; 0x18
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <lcd_wr_char+0xba>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9c 8b       	std	Y+20, r25	; 0x14
    1002:	8b 8b       	std	Y+19, r24	; 0x13
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1006:	6d 89       	ldd	r22, Y+21	; 0x15
    1008:	7e 89       	ldd	r23, Y+22	; 0x16
    100a:	8f 89       	ldd	r24, Y+23	; 0x17
    100c:	98 8d       	ldd	r25, Y+24	; 0x18
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	69 8d       	ldd	r22, Y+25	; 0x19
    1020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9c 8b       	std	Y+20, r25	; 0x14
    1044:	8b 8b       	std	Y+19, r24	; 0x13
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <lcd_wr_char+0x11a>
    1048:	84 e1       	ldi	r24, 0x14	; 20
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	9a 8b       	std	Y+18, r25	; 0x12
    104e:	89 8b       	std	Y+17, r24	; 0x11
    1050:	89 89       	ldd	r24, Y+17	; 0x11
    1052:	9a 89       	ldd	r25, Y+18	; 0x12
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <lcd_wr_char+0x108>
    1058:	9a 8b       	std	Y+18, r25	; 0x12
    105a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8b 89       	ldd	r24, Y+19	; 0x13
    105e:	9c 89       	ldd	r25, Y+20	; 0x14
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <lcd_wr_char+0xfc>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6d 89       	ldd	r22, Y+21	; 0x15
    1072:	7e 89       	ldd	r23, Y+22	; 0x16
    1074:	8f 89       	ldd	r24, Y+23	; 0x17
    1076:	98 8d       	ldd	r25, Y+24	; 0x18
    1078:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9c 8b       	std	Y+20, r25	; 0x14
    1082:	8b 8b       	std	Y+19, r24	; 0x13
    1084:	8b 89       	ldd	r24, Y+19	; 0x13
    1086:	9c 89       	ldd	r25, Y+20	; 0x14
    1088:	98 8b       	std	Y+16, r25	; 0x10
    108a:	8f 87       	std	Y+15, r24	; 0x0f
    108c:	8f 85       	ldd	r24, Y+15	; 0x0f
    108e:	98 89       	ldd	r25, Y+16	; 0x10
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <lcd_wr_char+0x144>
    1094:	98 8b       	std	Y+16, r25	; 0x10
    1096:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 7f       	andi	r24, 0xFB	; 251
    10a4:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a8:	8f 70       	andi	r24, 0x0F	; 15
    10aa:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ae:	82 95       	swap	r24
    10b0:	80 7f       	andi	r24, 0xF0	; 240
    10b2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10b4:	a8 e2       	ldi	r26, 0x28	; 40
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e2       	ldi	r30, 0x28	; 40
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 70       	andi	r24, 0x0F	; 15
    10c0:	8c 93       	st	X, r24
	lcd_port |= letter;
    10c2:	a8 e2       	ldi	r26, 0x28	; 40
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e2       	ldi	r30, 0x28	; 40
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	90 81       	ld	r25, Z
    10cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ce:	89 2b       	or	r24, r25
    10d0:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    10e0:	a8 e2       	ldi	r26, 0x28	; 40
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e8 e2       	ldi	r30, 0x28	; 40
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	8c 93       	st	X, r24
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a0 ea       	ldi	r26, 0xA0	; 160
    1102:	b0 e4       	ldi	r27, 0x40	; 64
    1104:	8b 87       	std	Y+11, r24	; 0x0b
    1106:	9c 87       	std	Y+12, r25	; 0x0c
    1108:	ad 87       	std	Y+13, r26	; 0x0d
    110a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	6b 85       	ldd	r22, Y+11	; 0x0b
    110e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1110:	8d 85       	ldd	r24, Y+13	; 0x0d
    1112:	9e 85       	ldd	r25, Y+14	; 0x0e
    1114:	2d ec       	ldi	r18, 0xCD	; 205
    1116:	3c ec       	ldi	r19, 0xCC	; 204
    1118:	4c e2       	ldi	r20, 0x2C	; 44
    111a:	55 e4       	ldi	r21, 0x45	; 69
    111c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8f 83       	std	Y+7, r24	; 0x07
    1126:	98 87       	std	Y+8, r25	; 0x08
    1128:	a9 87       	std	Y+9, r26	; 0x09
    112a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <lcd_wr_char+0x202>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    114e:	6f 81       	ldd	r22, Y+7	; 0x07
    1150:	78 85       	ldd	r23, Y+8	; 0x08
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <lcd_wr_char+0x262>
    1190:	84 e1       	ldi	r24, 0x14	; 20
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <lcd_wr_char+0x250>
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <lcd_wr_char+0x244>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ba:	78 85       	ldd	r23, Y+8	; 0x08
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <lcd_wr_char+0x28c>
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    11e0:	a8 e2       	ldi	r26, 0x28	; 40
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e2       	ldi	r30, 0x28	; 40
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8b 7f       	andi	r24, 0xFB	; 251
    11ec:	8c 93       	st	X, r24
}
    11ee:	6e 96       	adiw	r28, 0x1e	; 30
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <lcd_home>:


void lcd_home()
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	0a c0       	rjmp	.+20     	; 0x123a <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	80 81       	ld	r24, Z
    122c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		str++;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    123a:	e9 81       	ldd	r30, Y+1	; 0x01
    123c:	fa 81       	ldd	r31, Y+2	; 0x02
    123e:	80 81       	ld	r24, Z
    1240:	88 23       	and	r24, r24
    1242:	89 f7       	brne	.-30     	; 0x1226 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <lcd_cursor+0x6>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	2b 83       	std	Y+3, r18	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	91 05       	cpc	r25, r1
    1270:	d9 f0       	breq	.+54     	; 0x12a8 <lcd_cursor+0x5a>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3c 81       	ldd	r19, Y+4	; 0x04
    1276:	23 30       	cpi	r18, 0x03	; 3
    1278:	31 05       	cpc	r19, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <lcd_cursor+0x3a>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	61 f0       	breq	.+24     	; 0x129e <lcd_cursor+0x50>
    1286:	1e c0       	rjmp	.+60     	; 0x12c4 <lcd_cursor+0x76>
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	3c 81       	ldd	r19, Y+4	; 0x04
    128c:	23 30       	cpi	r18, 0x03	; 3
    128e:	31 05       	cpc	r19, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <lcd_cursor+0x64>
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	91 05       	cpc	r25, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <lcd_cursor+0x6e>
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	81 58       	subi	r24, 0x81	; 129
    12a2:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	81 54       	subi	r24, 0x41	; 65
    12ac:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	8d 56       	subi	r24, 0x6D	; 109
    12b6:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	8d 52       	subi	r24, 0x2D	; 45
    12c0:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
		default: break;
	}
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	27 97       	sbiw	r28, 0x07	; 7
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	6b 83       	std	Y+3, r22	; 0x03
    12ea:	5d 83       	std	Y+5, r21	; 0x05
    12ec:	4c 83       	std	Y+4, r20	; 0x04
    12ee:	3f 83       	std	Y+7, r19	; 0x07
    12f0:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12f2:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 23       	and	r24, r24
    12f8:	19 f0       	breq	.+6      	; 0x1300 <lcd_print+0x2e>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 23       	and	r24, r24
    12fe:	19 f4       	brne	.+6      	; 0x1306 <lcd_print+0x34>
	{
		lcd_home();
    1300:	0e 94 00 09 	call	0x1200	; 0x1200 <lcd_home>
    1304:	04 c0       	rjmp	.+8      	; 0x130e <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	6b 81       	ldd	r22, Y+3	; 0x03
    130a:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
	}
	if(digits==5 || flag==1)
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	85 30       	cpi	r24, 0x05	; 5
    1314:	91 05       	cpc	r25, r1
    1316:	19 f0       	breq	.+6      	; 0x131e <lcd_print+0x4c>
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	a9 f4       	brne	.+42     	; 0x1348 <lcd_print+0x76>
	{
		million=value/10000+48;
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	20 e1       	ldi	r18, 0x10	; 16
    1324:	37 e2       	ldi	r19, 0x27	; 39
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    132c:	cb 01       	movw	r24, r22
    132e:	c0 96       	adiw	r24, 0x30	; 48
    1330:	90 93 0b 05 	sts	0x050B, r25
    1334:	80 93 0a 05 	sts	0x050A, r24
		lcd_wr_char(million);
    1338:	80 91 0a 05 	lds	r24, 0x050A
    133c:	90 91 0b 05 	lds	r25, 0x050B
    1340:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x86>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	11 f5       	brne	.+68     	; 0x139c <lcd_print+0xca>
	{
		temp = value/1000;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	28 ee       	ldi	r18, 0xE8	; 232
    135e:	33 e0       	ldi	r19, 0x03	; 3
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	90 93 12 05 	sts	0x0512, r25
    136c:	80 93 11 05 	sts	0x0511, r24
		thousand = temp%10 + 48;
    1370:	80 91 11 05 	lds	r24, 0x0511
    1374:	90 91 12 05 	lds	r25, 0x0512
    1378:	2a e0       	ldi	r18, 0x0A	; 10
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    1382:	c0 96       	adiw	r24, 0x30	; 48
    1384:	90 93 96 05 	sts	0x0596, r25
    1388:	80 93 95 05 	sts	0x0595, r24
		lcd_wr_char(thousand);
    138c:	80 91 95 05 	lds	r24, 0x0595
    1390:	90 91 96 05 	lds	r25, 0x0596
    1394:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	19 f0       	breq	.+6      	; 0x13ac <lcd_print+0xda>
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	11 f5       	brne	.+68     	; 0x13f0 <lcd_print+0x11e>
	{
		temp = value/100;
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	24 e6       	ldi	r18, 0x64	; 100
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    13ba:	cb 01       	movw	r24, r22
    13bc:	90 93 12 05 	sts	0x0512, r25
    13c0:	80 93 11 05 	sts	0x0511, r24
		hundred = temp%10 + 48;
    13c4:	80 91 11 05 	lds	r24, 0x0511
    13c8:	90 91 12 05 	lds	r25, 0x0512
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	b9 01       	movw	r22, r18
    13d2:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    13d6:	c0 96       	adiw	r24, 0x30	; 48
    13d8:	90 93 90 05 	sts	0x0590, r25
    13dc:	80 93 8f 05 	sts	0x058F, r24
		lcd_wr_char(hundred);
    13e0:	80 91 8f 05 	lds	r24, 0x058F
    13e4:	90 91 90 05 	lds	r25, 0x0590
    13e8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	91 05       	cpc	r25, r1
    13f8:	19 f0       	breq	.+6      	; 0x1400 <lcd_print+0x12e>
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	11 f5       	brne	.+68     	; 0x1444 <lcd_print+0x172>
	{
		temp = value/10;
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	b9 01       	movw	r22, r18
    140a:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    140e:	cb 01       	movw	r24, r22
    1410:	90 93 12 05 	sts	0x0512, r25
    1414:	80 93 11 05 	sts	0x0511, r24
		tens = temp%10 + 48;
    1418:	80 91 11 05 	lds	r24, 0x0511
    141c:	90 91 12 05 	lds	r25, 0x0512
    1420:	2a e0       	ldi	r18, 0x0A	; 10
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	b9 01       	movw	r22, r18
    1426:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    142a:	c0 96       	adiw	r24, 0x30	; 48
    142c:	90 93 85 05 	sts	0x0585, r25
    1430:	80 93 84 05 	sts	0x0584, r24
		lcd_wr_char(tens);
    1434:	80 91 84 05 	lds	r24, 0x0584
    1438:	90 91 85 05 	lds	r25, 0x0585
    143c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	19 f0       	breq	.+6      	; 0x1454 <lcd_print+0x182>
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 f4       	brne	.+36     	; 0x1478 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	b9 01       	movw	r22, r18
    145e:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    1462:	c0 96       	adiw	r24, 0x30	; 48
    1464:	90 93 94 05 	sts	0x0594, r25
    1468:	80 93 93 05 	sts	0x0593, r24
		lcd_wr_char(unit);
    146c:	80 91 93 05 	lds	r24, 0x0593
    1470:	90 91 94 05 	lds	r25, 0x0594
    1474:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
	}
	if(digits>5)
    1478:	8e 81       	ldd	r24, Y+6	; 0x06
    147a:	9f 81       	ldd	r25, Y+7	; 0x07
    147c:	86 30       	cpi	r24, 0x06	; 6
    147e:	91 05       	cpc	r25, r1
    1480:	1c f0       	brlt	.+6      	; 0x1488 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1482:	85 e4       	ldi	r24, 0x45	; 69
    1484:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
	}
	
}
    1488:	27 96       	adiw	r28, 0x07	; 7
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <lcd_port_config>:
char _rollLCD[100];
unsigned int leftInt=0,rightInt;

//Function to configure LCD port
void lcd_port_config (void)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    14a2:	a7 e2       	ldi	r26, 0x27	; 39
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e7 e2       	ldi	r30, 0x27	; 39
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	87 6f       	ori	r24, 0xF7	; 247
    14ae:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    14b0:	a8 e2       	ldi	r26, 0x28	; 40
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e8 e2       	ldi	r30, 0x28	; 40
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 78       	andi	r24, 0x80	; 128
    14bc:	8c 93       	st	X, r24
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    14cc:	e0 e3       	ldi	r30, 0x30	; 48
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	10 82       	st	Z, r1
 PORTF = 0x00;
    14d2:	e1 e3       	ldi	r30, 0x31	; 49
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	10 82       	st	Z, r1
 DDRK = 0x00;
    14d8:	e7 e0       	ldi	r30, 0x07	; 7
    14da:	f1 e0       	ldi	r31, 0x01	; 1
    14dc:	10 82       	st	Z, r1
 PORTK = 0x00;
    14de:	e8 e0       	ldi	r30, 0x08	; 8
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	10 82       	st	Z, r1
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    14f2:	a1 e2       	ldi	r26, 0x21	; 33
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e1 e2       	ldi	r30, 0x21	; 33
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 60       	ori	r24, 0x0F	; 15
    14fe:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1500:	a2 e2       	ldi	r26, 0x22	; 34
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e2 e2       	ldi	r30, 0x22	; 34
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	80 7f       	andi	r24, 0xF0	; 240
    150c:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    150e:	aa e0       	ldi	r26, 0x0A	; 10
    1510:	b1 e0       	ldi	r27, 0x01	; 1
    1512:	ea e0       	ldi	r30, 0x0A	; 10
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	80 81       	ld	r24, Z
    1518:	88 61       	ori	r24, 0x18	; 24
    151a:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    151c:	ab e0       	ldi	r26, 0x0B	; 11
    151e:	b1 e0       	ldi	r27, 0x01	; 1
    1520:	eb e0       	ldi	r30, 0x0B	; 11
    1522:	f1 e0       	ldi	r31, 0x01	; 1
    1524:	80 81       	ld	r24, Z
    1526:	88 61       	ori	r24, 0x18	; 24
    1528:	8c 93       	st	X, r24
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <buzzer_pin_config>:

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    1538:	a7 e2       	ldi	r26, 0x27	; 39
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e7 e2       	ldi	r30, 0x27	; 39
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1546:	a8 e2       	ldi	r26, 0x28	; 40
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e2       	ldi	r30, 0x28	; 40
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	87 7f       	andi	r24, 0xF7	; 247
    1552:	8c 93       	st	X, r24
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <port_init>:

//Function to Initialize PORTS
void port_init()
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    1562:	0e 94 4d 0a 	call	0x149a	; 0x149a <lcd_port_config>
	adc_pin_config();
    1566:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <adc_pin_config>
	motion_pin_config();
    156a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <motion_pin_config>
	left_encoder_pin_config();
    156e:	0e 94 1e 0c 	call	0x183c	; 0x183c <left_encoder_pin_config>
	right_encoder_pin_config();
    1572:	0e 94 33 0c 	call	0x1866	; 0x1866 <right_encoder_pin_config>
	buzzer_pin_config();	
    1576:	0e 94 98 0a 	call	0x1530	; 0x1530 <buzzer_pin_config>
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1588:	e1 e2       	ldi	r30, 0x21	; 33
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    158e:	e5 e2       	ldi	r30, 0x25	; 37
    1590:	f1 e0       	ldi	r31, 0x01	; 1
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1596:	e4 e2       	ldi	r30, 0x24	; 36
    1598:	f1 e0       	ldi	r31, 0x01	; 1
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    159e:	e9 e2       	ldi	r30, 0x29	; 41
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    15a4:	e8 e2       	ldi	r30, 0x28	; 40
    15a6:	f1 e0       	ldi	r31, 0x01	; 1
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    15ac:	eb e2       	ldi	r30, 0x2B	; 43
    15ae:	f1 e0       	ldi	r31, 0x01	; 1
    15b0:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    15b2:	ea e2       	ldi	r30, 0x2A	; 42
    15b4:	f1 e0       	ldi	r31, 0x01	; 1
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    15ba:	ed e2       	ldi	r30, 0x2D	; 45
    15bc:	f1 e0       	ldi	r31, 0x01	; 1
    15be:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    15c0:	ec e2       	ldi	r30, 0x2C	; 44
    15c2:	f1 e0       	ldi	r31, 0x01	; 1
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    15c8:	e0 e2       	ldi	r30, 0x20	; 32
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	89 ea       	ldi	r24, 0xA9	; 169
    15ce:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    15d0:	e1 e2       	ldi	r30, 0x21	; 33
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	8b e0       	ldi	r24, 0x0B	; 11
    15d6:	80 83       	st	Z, r24
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <buzzer_on>:

void buzzer_on (void)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    15e8:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    15ea:	e6 e2       	ldi	r30, 0x26	; 38
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	88 60       	ori	r24, 0x08	; 8
    15f6:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    15f8:	e8 e2       	ldi	r30, 0x28	; 40
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	80 83       	st	Z, r24
}
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <buzzer_off>:

void buzzer_off (void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1612:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1614:	e6 e2       	ldi	r30, 0x26	; 38
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	87 7f       	andi	r24, 0xF7	; 247
    1620:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1622:	e8 e2       	ldi	r30, 0x28	; 40
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 83       	st	Z, r24
}
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <adc_init>:

void adc_init()
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    163a:	ea e7       	ldi	r30, 0x7A	; 122
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1640:	eb e7       	ldi	r30, 0x7B	; 123
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1646:	ec e7       	ldi	r30, 0x7C	; 124
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	80 83       	st	Z, r24
	ACSR = 0x80;
    164e:	e0 e5       	ldi	r30, 0x50	; 80
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 e8       	ldi	r24, 0x80	; 128
    1654:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1656:	ea e7       	ldi	r30, 0x7A	; 122
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	86 e8       	ldi	r24, 0x86	; 134
    165c:	80 83       	st	Z, r24
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	0f 92       	push	r0
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 30       	cpi	r24, 0x08	; 8
    1676:	20 f0       	brcs	.+8      	; 0x1680 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1678:	eb e7       	ldi	r30, 0x7B	; 123
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	88 e0       	ldi	r24, 0x08	; 8
    167e:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	87 70       	andi	r24, 0x07	; 7
    1684:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1686:	ec e7       	ldi	r30, 0x7C	; 124
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 62       	ori	r24, 0x20	; 32
    168e:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1690:	aa e7       	ldi	r26, 0x7A	; 122
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ea e7       	ldi	r30, 0x7A	; 122
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 64       	ori	r24, 0x40	; 64
    169c:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    169e:	ea e7       	ldi	r30, 0x7A	; 122
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	80 71       	andi	r24, 0x10	; 16
    16aa:	90 70       	andi	r25, 0x00	; 0
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	b9 f3       	breq	.-18     	; 0x169e <ADC_Conversion+0x3a>
	a=ADCH;
    16b0:	e9 e7       	ldi	r30, 0x79	; 121
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    16b8:	aa e7       	ldi	r26, 0x7A	; 122
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ea e7       	ldi	r30, 0x7A	; 122
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 61       	ori	r24, 0x10	; 16
    16c4:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    16c6:	eb e7       	ldi	r30, 0x7B	; 123
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	10 82       	st	Z, r1
	return a;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <print_sensor+0x6>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	6a 83       	std	Y+2, r22	; 0x02
    16e6:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_Conversion>
    16ee:	80 93 13 05 	sts	0x0513, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    16f2:	80 91 13 05 	lds	r24, 0x0513
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	6a 81       	ldd	r22, Y+2	; 0x02
    16fe:	a9 01       	movw	r20, r18
    1700:	23 e0       	ldi	r18, 0x03	; 3
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	0e 94 69 09 	call	0x12d2	; 0x12d2 <lcd_print>
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	0f 92       	push	r0
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1724:	e8 e2       	ldi	r30, 0x28	; 40
    1726:	f1 e0       	ldi	r31, 0x01	; 1
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    172c:	ea e2       	ldi	r30, 0x2A	; 42
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 83       	st	Z, r24
leftVel=left_motor;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	80 93 09 05 	sts	0x0509, r24
	rightVel=right_motor;
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	80 93 0c 05 	sts	0x050C, r24
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	0f 92       	push	r0
    1750:	0f 92       	push	r0
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1758:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	8f 70       	andi	r24, 0x0F	; 15
    175e:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1760:	e2 e2       	ldi	r30, 0x22	; 34
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	80 7f       	andi	r24, 0xF0	; 240
    176c:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    176e:	99 81       	ldd	r25, Y+1	; 0x01
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	89 2b       	or	r24, r25
    1774:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1776:	e2 e2       	ldi	r30, 0x22	; 34
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	80 83       	st	Z, r24
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <forward>:

void forward (void) 
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    1790:	86 e0       	ldi	r24, 0x06	; 6
    1792:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <back>:
void back (void) //both wheels backward
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    17a4:	89 e0       	ldi	r24, 0x09	; 9
    17a6:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    17b8:	85 e0       	ldi	r24, 0x05	; 5
    17ba:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    17cc:	8a e0       	ldi	r24, 0x0A	; 10
    17ce:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    181c:	88 e0       	ldi	r24, 0x08	; 8
    181e:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <stop>:

void stop (void)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 a5 0b 	call	0x174a	; 0x174a <motion_set>
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <left_encoder_pin_config>:
////interrupt vectore...............
void left_encoder_pin_config (void)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1844:	ad e2       	ldi	r26, 0x2D	; 45
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	ed e2       	ldi	r30, 0x2D	; 45
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8f 7e       	andi	r24, 0xEF	; 239
    1850:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
    1852:	ae e2       	ldi	r26, 0x2E	; 46
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ee e2       	ldi	r30, 0x2E	; 46
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 61       	ori	r24, 0x10	; 16
    185e:	8c 93       	st	X, r24
}
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    186e:	ad e2       	ldi	r26, 0x2D	; 45
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	ed e2       	ldi	r30, 0x2D	; 45
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7d       	andi	r24, 0xDF	; 223
    187a:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
    187c:	ae e2       	ldi	r26, 0x2E	; 46
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	ee e2       	ldi	r30, 0x2E	; 46
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	80 62       	ori	r24, 0x20	; 32
    1888:	8c 93       	st	X, r24
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <left_position_encoder_interrupt_init>:
//Function to initialize ports


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1898:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    189a:	aa e6       	ldi	r26, 0x6A	; 106
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ea e6       	ldi	r30, 0x6A	; 106
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	82 60       	ori	r24, 0x02	; 2
    18a6:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    18a8:	ad e3       	ldi	r26, 0x3D	; 61
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ed e3       	ldi	r30, 0x3D	; 61
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 61       	ori	r24, 0x10	; 16
    18b4:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    18b6:	78 94       	sei
}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    18c6:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    18c8:	aa e6       	ldi	r26, 0x6A	; 106
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e6       	ldi	r30, 0x6A	; 106
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 60       	ori	r24, 0x08	; 8
    18d4:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    18d6:	ad e3       	ldi	r26, 0x3D	; 61
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	ed e3       	ldi	r30, 0x3D	; 61
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 62       	ori	r24, 0x20	; 32
    18e2:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    18e4:	78 94       	sei
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <button_interrupt_init>:
void button_interrupt_init (void) //Interrupt 5 enable
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    18f4:	f8 94       	cli
 EICRA = EICRA | 0x08; // INT4 is set to trigger with falling edge
    18f6:	a9 e6       	ldi	r26, 0x69	; 105
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e9 e6       	ldi	r30, 0x69	; 105
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	88 60       	ori	r24, 0x08	; 8
    1902:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x02; // Enable Interrupt INT4 for the button
    1904:	ad e3       	ldi	r26, 0x3D	; 61
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ed e3       	ldi	r30, 0x3D	; 61
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	82 60       	ori	r24, 0x02	; 2
    1910:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    1912:	78 94       	sei
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	2f 93       	push	r18
    1926:	3f 93       	push	r19
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	ab 97       	sbiw	r28, 0x2b	; 43
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	cd bf       	out	0x3d, r28	; 61
	rightInt++;
    1942:	80 91 86 05 	lds	r24, 0x0586
    1946:	90 91 87 05 	lds	r25, 0x0587
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	90 93 87 05 	sts	0x0587, r25
    1950:	80 93 86 05 	sts	0x0586, r24
	curRightCounter++;  //increment right shaft position count
    1954:	80 91 eb 04 	lds	r24, 0x04EB
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	90 91 ec 04 	lds	r25, 0x04EC
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	80 91 ed 04 	lds	r24, 0x04ED
    1964:	8b 83       	std	Y+3, r24	; 0x03
    1966:	90 91 ee 04 	lds	r25, 0x04EE
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	80 91 ef 04 	lds	r24, 0x04EF
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	90 91 f0 04 	lds	r25, 0x04F0
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	80 91 f1 04 	lds	r24, 0x04F1
    197c:	8f 83       	std	Y+7, r24	; 0x07
    197e:	90 91 f2 04 	lds	r25, 0x04F2
    1982:	98 87       	std	Y+8, r25	; 0x08
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	89 87       	std	Y+9, r24	; 0x09
    1988:	1a 86       	std	Y+10, r1	; 0x0a
    198a:	1b 86       	std	Y+11, r1	; 0x0b
    198c:	1c 86       	std	Y+12, r1	; 0x0c
    198e:	1d 86       	std	Y+13, r1	; 0x0d
    1990:	1e 86       	std	Y+14, r1	; 0x0e
    1992:	1f 86       	std	Y+15, r1	; 0x0f
    1994:	18 8a       	std	Y+16, r1	; 0x10
    1996:	99 81       	ldd	r25, Y+1	; 0x01
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	98 0f       	add	r25, r24
    199c:	99 8b       	std	Y+17, r25	; 0x11
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	99 8f       	std	Y+25, r25	; 0x19
    19a2:	89 89       	ldd	r24, Y+17	; 0x11
    19a4:	99 81       	ldd	r25, Y+1	; 0x01
    19a6:	89 17       	cp	r24, r25
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <__vector_6+0x92>
    19aa:	19 8e       	std	Y+25, r1	; 0x19
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	89 0f       	add	r24, r25
    19b2:	8a 8b       	std	Y+18, r24	; 0x12
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	8a 8f       	std	Y+26, r24	; 0x1a
    19b8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	98 17       	cp	r25, r24
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <__vector_6+0xa8>
    19c0:	1a 8e       	std	Y+26, r1	; 0x1a
    19c2:	99 8d       	ldd	r25, Y+25	; 0x19
    19c4:	8a 89       	ldd	r24, Y+18	; 0x12
    19c6:	98 0f       	add	r25, r24
    19c8:	9b 8f       	std	Y+27, r25	; 0x1b
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	9c 8f       	std	Y+28, r25	; 0x1c
    19ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d0:	9a 89       	ldd	r25, Y+18	; 0x12
    19d2:	89 17       	cp	r24, r25
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__vector_6+0xbe>
    19d6:	1c 8e       	std	Y+28, r1	; 0x1c
    19d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19dc:	89 2b       	or	r24, r25
    19de:	8a 8f       	std	Y+26, r24	; 0x1a
    19e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e2:	8a 8b       	std	Y+18, r24	; 0x12
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e8:	98 0f       	add	r25, r24
    19ea:	9b 8b       	std	Y+19, r25	; 0x13
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	9d 8f       	std	Y+29, r25	; 0x1d
    19f0:	8b 89       	ldd	r24, Y+19	; 0x13
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	89 17       	cp	r24, r25
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <__vector_6+0xe0>
    19f8:	1d 8e       	std	Y+29, r1	; 0x1d
    19fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19fc:	9b 89       	ldd	r25, Y+19	; 0x13
    19fe:	89 0f       	add	r24, r25
    1a00:	8e 8f       	std	Y+30, r24	; 0x1e
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	8f 8f       	std	Y+31, r24	; 0x1f
    1a06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a08:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0a:	98 17       	cp	r25, r24
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <__vector_6+0xf6>
    1a0e:	1f 8e       	std	Y+31, r1	; 0x1f
    1a10:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a14:	98 2b       	or	r25, r24
    1a16:	9d 8f       	std	Y+29, r25	; 0x1d
    1a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1a:	9b 8b       	std	Y+19, r25	; 0x13
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a20:	89 0f       	add	r24, r25
    1a22:	8c 8b       	std	Y+20, r24	; 0x14
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	88 a3       	std	Y+32, r24	; 0x20
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	98 17       	cp	r25, r24
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <__vector_6+0x118>
    1a30:	18 a2       	std	Y+32, r1	; 0x20
    1a32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a34:	8c 89       	ldd	r24, Y+20	; 0x14
    1a36:	98 0f       	add	r25, r24
    1a38:	99 a3       	std	Y+33, r25	; 0x21
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	89 17       	cp	r24, r25
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <__vector_6+0x12e>
    1a46:	1a a2       	std	Y+34, r1	; 0x22
    1a48:	88 a1       	ldd	r24, Y+32	; 0x20
    1a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4c:	89 2b       	or	r24, r25
    1a4e:	88 a3       	std	Y+32, r24	; 0x20
    1a50:	89 a1       	ldd	r24, Y+33	; 0x21
    1a52:	8c 8b       	std	Y+20, r24	; 0x14
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	98 0f       	add	r25, r24
    1a5a:	9d 8b       	std	Y+21, r25	; 0x15
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9b a3       	std	Y+35, r25	; 0x23
    1a60:	8d 89       	ldd	r24, Y+21	; 0x15
    1a62:	9d 81       	ldd	r25, Y+5	; 0x05
    1a64:	89 17       	cp	r24, r25
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <__vector_6+0x150>
    1a68:	1b a2       	std	Y+35, r1	; 0x23
    1a6a:	88 a1       	ldd	r24, Y+32	; 0x20
    1a6c:	9d 89       	ldd	r25, Y+21	; 0x15
    1a6e:	89 0f       	add	r24, r25
    1a70:	8c a3       	std	Y+36, r24	; 0x24
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	8d a3       	std	Y+37, r24	; 0x25
    1a76:	9c a1       	ldd	r25, Y+36	; 0x24
    1a78:	8d 89       	ldd	r24, Y+21	; 0x15
    1a7a:	98 17       	cp	r25, r24
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <__vector_6+0x166>
    1a7e:	1d a2       	std	Y+37, r1	; 0x25
    1a80:	9b a1       	ldd	r25, Y+35	; 0x23
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	98 2b       	or	r25, r24
    1a86:	9b a3       	std	Y+35, r25	; 0x23
    1a88:	9c a1       	ldd	r25, Y+36	; 0x24
    1a8a:	9d 8b       	std	Y+21, r25	; 0x15
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	89 0f       	add	r24, r25
    1a92:	8e 8b       	std	Y+22, r24	; 0x16
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	8e a3       	std	Y+38, r24	; 0x26
    1a98:	9e 89       	ldd	r25, Y+22	; 0x16
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	98 17       	cp	r25, r24
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <__vector_6+0x188>
    1aa0:	1e a2       	std	Y+38, r1	; 0x26
    1aa2:	9b a1       	ldd	r25, Y+35	; 0x23
    1aa4:	8e 89       	ldd	r24, Y+22	; 0x16
    1aa6:	98 0f       	add	r25, r24
    1aa8:	9f a3       	std	Y+39, r25	; 0x27
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	98 a7       	std	Y+40, r25	; 0x28
    1aae:	8f a1       	ldd	r24, Y+39	; 0x27
    1ab0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ab2:	89 17       	cp	r24, r25
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <__vector_6+0x19e>
    1ab6:	18 a6       	std	Y+40, r1	; 0x28
    1ab8:	8e a1       	ldd	r24, Y+38	; 0x26
    1aba:	98 a5       	ldd	r25, Y+40	; 0x28
    1abc:	89 2b       	or	r24, r25
    1abe:	8e a3       	std	Y+38, r24	; 0x26
    1ac0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ac2:	8e 8b       	std	Y+22, r24	; 0x16
    1ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac8:	98 0f       	add	r25, r24
    1aca:	9f 8b       	std	Y+23, r25	; 0x17
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	99 a7       	std	Y+41, r25	; 0x29
    1ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad4:	89 17       	cp	r24, r25
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <__vector_6+0x1c0>
    1ad8:	19 a6       	std	Y+41, r1	; 0x29
    1ada:	8e a1       	ldd	r24, Y+38	; 0x26
    1adc:	9f 89       	ldd	r25, Y+23	; 0x17
    1ade:	89 0f       	add	r24, r25
    1ae0:	8a a7       	std	Y+42, r24	; 0x2a
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	8b a7       	std	Y+43, r24	; 0x2b
    1ae6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 17       	cp	r25, r24
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <__vector_6+0x1d6>
    1aee:	1b a6       	std	Y+43, r1	; 0x2b
    1af0:	99 a5       	ldd	r25, Y+41	; 0x29
    1af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af4:	98 2b       	or	r25, r24
    1af6:	99 a7       	std	Y+41, r25	; 0x29
    1af8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afa:	9f 8b       	std	Y+23, r25	; 0x17
    1afc:	88 85       	ldd	r24, Y+8	; 0x08
    1afe:	98 89       	ldd	r25, Y+16	; 0x10
    1b00:	89 0f       	add	r24, r25
    1b02:	88 8f       	std	Y+24, r24	; 0x18
    1b04:	89 a5       	ldd	r24, Y+41	; 0x29
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	89 0f       	add	r24, r25
    1b0a:	88 8f       	std	Y+24, r24	; 0x18
    1b0c:	29 89       	ldd	r18, Y+17	; 0x11
    1b0e:	3a 89       	ldd	r19, Y+18	; 0x12
    1b10:	4b 89       	ldd	r20, Y+19	; 0x13
    1b12:	5c 89       	ldd	r21, Y+20	; 0x14
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 93 eb 04 	sts	0x04EB, r18
    1b20:	30 93 ec 04 	sts	0x04EC, r19
    1b24:	40 93 ed 04 	sts	0x04ED, r20
    1b28:	50 93 ee 04 	sts	0x04EE, r21
    1b2c:	60 93 ef 04 	sts	0x04EF, r22
    1b30:	70 93 f0 04 	sts	0x04F0, r23
    1b34:	80 93 f1 04 	sts	0x04F1, r24
    1b38:	90 93 f2 04 	sts	0x04F2, r25

}
    1b3c:	ab 96       	adiw	r28, 0x2b	; 43
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	0f 90       	pop	r0
    1b5c:	1f 90       	pop	r1
    1b5e:	18 95       	reti

00001b60 <__vector_5>:


//SR for left position encoder
ISR(INT4_vect)
{
    1b60:	1f 92       	push	r1
    1b62:	0f 92       	push	r0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	0f 92       	push	r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	ab 97       	sbiw	r28, 0x2b	; 43
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	cd bf       	out	0x3d, r28	; 61
	leftInt++;
    1b88:	80 91 df 04 	lds	r24, 0x04DF
    1b8c:	90 91 e0 04 	lds	r25, 0x04E0
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	90 93 e0 04 	sts	0x04E0, r25
    1b96:	80 93 df 04 	sts	0x04DF, r24
	curLeftCounter++;  //increment left shaft position count
    1b9a:	80 91 fb 04 	lds	r24, 0x04FB
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	90 91 fc 04 	lds	r25, 0x04FC
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	80 91 fd 04 	lds	r24, 0x04FD
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	90 91 fe 04 	lds	r25, 0x04FE
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	80 91 ff 04 	lds	r24, 0x04FF
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	90 91 00 05 	lds	r25, 0x0500
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	80 91 01 05 	lds	r24, 0x0501
    1bc2:	8f 83       	std	Y+7, r24	; 0x07
    1bc4:	90 91 02 05 	lds	r25, 0x0502
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 87       	std	Y+9, r24	; 0x09
    1bce:	1a 86       	std	Y+10, r1	; 0x0a
    1bd0:	1b 86       	std	Y+11, r1	; 0x0b
    1bd2:	1c 86       	std	Y+12, r1	; 0x0c
    1bd4:	1d 86       	std	Y+13, r1	; 0x0d
    1bd6:	1e 86       	std	Y+14, r1	; 0x0e
    1bd8:	1f 86       	std	Y+15, r1	; 0x0f
    1bda:	18 8a       	std	Y+16, r1	; 0x10
    1bdc:	99 81       	ldd	r25, Y+1	; 0x01
    1bde:	89 85       	ldd	r24, Y+9	; 0x09
    1be0:	98 0f       	add	r25, r24
    1be2:	99 8b       	std	Y+17, r25	; 0x11
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	99 8f       	std	Y+25, r25	; 0x19
    1be8:	89 89       	ldd	r24, Y+17	; 0x11
    1bea:	99 81       	ldd	r25, Y+1	; 0x01
    1bec:	89 17       	cp	r24, r25
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <__vector_5+0x92>
    1bf0:	19 8e       	std	Y+25, r1	; 0x19
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	89 0f       	add	r24, r25
    1bf8:	8a 8b       	std	Y+18, r24	; 0x12
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	8a 8f       	std	Y+26, r24	; 0x1a
    1bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	98 17       	cp	r25, r24
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <__vector_5+0xa8>
    1c06:	1a 8e       	std	Y+26, r1	; 0x1a
    1c08:	99 8d       	ldd	r25, Y+25	; 0x19
    1c0a:	8a 89       	ldd	r24, Y+18	; 0x12
    1c0c:	98 0f       	add	r25, r24
    1c0e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	9c 8f       	std	Y+28, r25	; 0x1c
    1c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c16:	9a 89       	ldd	r25, Y+18	; 0x12
    1c18:	89 17       	cp	r24, r25
    1c1a:	08 f0       	brcs	.+2      	; 0x1c1e <__vector_5+0xbe>
    1c1c:	1c 8e       	std	Y+28, r1	; 0x1c
    1c1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c22:	89 2b       	or	r24, r25
    1c24:	8a 8f       	std	Y+26, r24	; 0x1a
    1c26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c28:	8a 8b       	std	Y+18, r24	; 0x12
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c2e:	98 0f       	add	r25, r24
    1c30:	9b 8b       	std	Y+19, r25	; 0x13
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	9d 8f       	std	Y+29, r25	; 0x1d
    1c36:	8b 89       	ldd	r24, Y+19	; 0x13
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	89 17       	cp	r24, r25
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <__vector_5+0xe0>
    1c3e:	1d 8e       	std	Y+29, r1	; 0x1d
    1c40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c42:	9b 89       	ldd	r25, Y+19	; 0x13
    1c44:	89 0f       	add	r24, r25
    1c46:	8e 8f       	std	Y+30, r24	; 0x1e
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c50:	98 17       	cp	r25, r24
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <__vector_5+0xf6>
    1c54:	1f 8e       	std	Y+31, r1	; 0x1f
    1c56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c5a:	98 2b       	or	r25, r24
    1c5c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c60:	9b 8b       	std	Y+19, r25	; 0x13
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c66:	89 0f       	add	r24, r25
    1c68:	8c 8b       	std	Y+20, r24	; 0x14
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	88 a3       	std	Y+32, r24	; 0x20
    1c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	98 17       	cp	r25, r24
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <__vector_5+0x118>
    1c76:	18 a2       	std	Y+32, r1	; 0x20
    1c78:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c7a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7c:	98 0f       	add	r25, r24
    1c7e:	99 a3       	std	Y+33, r25	; 0x21
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a1       	ldd	r24, Y+33	; 0x21
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	89 17       	cp	r24, r25
    1c8a:	08 f0       	brcs	.+2      	; 0x1c8e <__vector_5+0x12e>
    1c8c:	1a a2       	std	Y+34, r1	; 0x22
    1c8e:	88 a1       	ldd	r24, Y+32	; 0x20
    1c90:	9a a1       	ldd	r25, Y+34	; 0x22
    1c92:	89 2b       	or	r24, r25
    1c94:	88 a3       	std	Y+32, r24	; 0x20
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	8c 8b       	std	Y+20, r24	; 0x14
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9e:	98 0f       	add	r25, r24
    1ca0:	9d 8b       	std	Y+21, r25	; 0x15
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	9b a3       	std	Y+35, r25	; 0x23
    1ca6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	89 17       	cp	r24, r25
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <__vector_5+0x150>
    1cae:	1b a2       	std	Y+35, r1	; 0x23
    1cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cb4:	89 0f       	add	r24, r25
    1cb6:	8c a3       	std	Y+36, r24	; 0x24
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	8d a3       	std	Y+37, r24	; 0x25
    1cbc:	9c a1       	ldd	r25, Y+36	; 0x24
    1cbe:	8d 89       	ldd	r24, Y+21	; 0x15
    1cc0:	98 17       	cp	r25, r24
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <__vector_5+0x166>
    1cc4:	1d a2       	std	Y+37, r1	; 0x25
    1cc6:	9b a1       	ldd	r25, Y+35	; 0x23
    1cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cca:	98 2b       	or	r25, r24
    1ccc:	9b a3       	std	Y+35, r25	; 0x23
    1cce:	9c a1       	ldd	r25, Y+36	; 0x24
    1cd0:	9d 8b       	std	Y+21, r25	; 0x15
    1cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	89 0f       	add	r24, r25
    1cd8:	8e 8b       	std	Y+22, r24	; 0x16
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	8e a3       	std	Y+38, r24	; 0x26
    1cde:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce2:	98 17       	cp	r25, r24
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <__vector_5+0x188>
    1ce6:	1e a2       	std	Y+38, r1	; 0x26
    1ce8:	9b a1       	ldd	r25, Y+35	; 0x23
    1cea:	8e 89       	ldd	r24, Y+22	; 0x16
    1cec:	98 0f       	add	r25, r24
    1cee:	9f a3       	std	Y+39, r25	; 0x27
    1cf0:	91 e0       	ldi	r25, 0x01	; 1
    1cf2:	98 a7       	std	Y+40, r25	; 0x28
    1cf4:	8f a1       	ldd	r24, Y+39	; 0x27
    1cf6:	9e 89       	ldd	r25, Y+22	; 0x16
    1cf8:	89 17       	cp	r24, r25
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <__vector_5+0x19e>
    1cfc:	18 a6       	std	Y+40, r1	; 0x28
    1cfe:	8e a1       	ldd	r24, Y+38	; 0x26
    1d00:	98 a5       	ldd	r25, Y+40	; 0x28
    1d02:	89 2b       	or	r24, r25
    1d04:	8e a3       	std	Y+38, r24	; 0x26
    1d06:	8f a1       	ldd	r24, Y+39	; 0x27
    1d08:	8e 8b       	std	Y+22, r24	; 0x16
    1d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	98 0f       	add	r25, r24
    1d10:	9f 8b       	std	Y+23, r25	; 0x17
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	99 a7       	std	Y+41, r25	; 0x29
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1a:	89 17       	cp	r24, r25
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <__vector_5+0x1c0>
    1d1e:	19 a6       	std	Y+41, r1	; 0x29
    1d20:	8e a1       	ldd	r24, Y+38	; 0x26
    1d22:	9f 89       	ldd	r25, Y+23	; 0x17
    1d24:	89 0f       	add	r24, r25
    1d26:	8a a7       	std	Y+42, r24	; 0x2a
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	8b a7       	std	Y+43, r24	; 0x2b
    1d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 17       	cp	r25, r24
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <__vector_5+0x1d6>
    1d34:	1b a6       	std	Y+43, r1	; 0x2b
    1d36:	99 a5       	ldd	r25, Y+41	; 0x29
    1d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d3a:	98 2b       	or	r25, r24
    1d3c:	99 a7       	std	Y+41, r25	; 0x29
    1d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d40:	9f 8b       	std	Y+23, r25	; 0x17
    1d42:	88 85       	ldd	r24, Y+8	; 0x08
    1d44:	98 89       	ldd	r25, Y+16	; 0x10
    1d46:	89 0f       	add	r24, r25
    1d48:	88 8f       	std	Y+24, r24	; 0x18
    1d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4e:	89 0f       	add	r24, r25
    1d50:	88 8f       	std	Y+24, r24	; 0x18
    1d52:	29 89       	ldd	r18, Y+17	; 0x11
    1d54:	3a 89       	ldd	r19, Y+18	; 0x12
    1d56:	4b 89       	ldd	r20, Y+19	; 0x13
    1d58:	5c 89       	ldd	r21, Y+20	; 0x14
    1d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d60:	98 8d       	ldd	r25, Y+24	; 0x18
    1d62:	20 93 fb 04 	sts	0x04FB, r18
    1d66:	30 93 fc 04 	sts	0x04FC, r19
    1d6a:	40 93 fd 04 	sts	0x04FD, r20
    1d6e:	50 93 fe 04 	sts	0x04FE, r21
    1d72:	60 93 ff 04 	sts	0x04FF, r22
    1d76:	70 93 00 05 	sts	0x0500, r23
    1d7a:	80 93 01 05 	sts	0x0501, r24
    1d7e:	90 93 02 05 	sts	0x0502, r25

}
    1d82:	ab 96       	adiw	r28, 0x2b	; 43
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	7f 91       	pop	r23
    1d92:	6f 91       	pop	r22
    1d94:	5f 91       	pop	r21
    1d96:	4f 91       	pop	r20
    1d98:	3f 91       	pop	r19
    1d9a:	2f 91       	pop	r18
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <uart0_init>:

/////////////////interrupt vectors

////zigbee
void uart0_init(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1dae:	e1 ec       	ldi	r30, 0xC1	; 193
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1db4:	e0 ec       	ldi	r30, 0xC0	; 192
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1dba:	e2 ec       	ldi	r30, 0xC2	; 194
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	86 e0       	ldi	r24, 0x06	; 6
    1dc0:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
    1dc2:	e4 ec       	ldi	r30, 0xC4	; 196
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	87 e4       	ldi	r24, 0x47	; 71
    1dc8:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    1dca:	e5 ec       	ldi	r30, 0xC5	; 197
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    1dd0:	e1 ec       	ldi	r30, 0xC1	; 193
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	88 e9       	ldi	r24, 0x98	; 152
    1dd6:	80 83       	st	Z, r24
}
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <__vector_25>:
charPack *serialDataStart=NULL;
charPack *serialDataEnd=NULL;
int serial_lock=0;
 
SIGNAL(SIG_USART0_RECV)         // ISR for receive complete interrupt
{
    1dde:	1f 92       	push	r1
    1de0:	0f 92       	push	r0
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	0f 92       	push	r0
    1de6:	00 90 5b 00 	lds	r0, 0x005B
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	2f 93       	push	r18
    1df0:	3f 93       	push	r19
    1df2:	4f 93       	push	r20
    1df4:	5f 93       	push	r21
    1df6:	6f 93       	push	r22
    1df8:	7f 93       	push	r23
    1dfa:	8f 93       	push	r24
    1dfc:	9f 93       	push	r25
    1dfe:	af 93       	push	r26
    1e00:	bf 93       	push	r27
    1e02:	ef 93       	push	r30
    1e04:	ff 93       	push	r31
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	0f 92       	push	r0
    1e0c:	0f 92       	push	r0
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    data = UDR0;                 //making copy of data from UDR0 in 'data' variable 
    1e12:	e6 ec       	ldi	r30, 0xC6	; 198
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 93 8a 05 	sts	0x058A, r24
  
    charPack *temp;

    temp=(charPack *) malloc(sizeof(charPack));
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 4a 37 	call	0x6e94	; 0x6e94 <malloc>
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    temp->next=NULL;
    1e28:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2c:	12 82       	std	Z+2, r1	; 0x02
    1e2e:	11 82       	std	Z+1, r1	; 0x01
    temp->data=(char) data;
    1e30:	80 91 8a 05 	lds	r24, 0x058A
    1e34:	e9 81       	ldd	r30, Y+1	; 0x01
    1e36:	fa 81       	ldd	r31, Y+2	; 0x02
    1e38:	80 83       	st	Z, r24
    serial_lock=1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	90 93 e6 04 	sts	0x04E6, r25
    1e42:	80 93 e5 04 	sts	0x04E5, r24
       //lcd_wr_char(temp->data);
    if(serialDataEnd==NULL) serialDataEnd=temp;
    1e46:	80 91 e3 04 	lds	r24, 0x04E3
    1e4a:	90 91 e4 04 	lds	r25, 0x04E4
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	39 f4       	brne	.+14     	; 0x1e60 <__vector_25+0x82>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	90 93 e4 04 	sts	0x04E4, r25
    1e5a:	80 93 e3 04 	sts	0x04E3, r24
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <__vector_25+0x9e>
    else
    {
         serialDataEnd->next=temp;
    1e60:	e0 91 e3 04 	lds	r30, 0x04E3
    1e64:	f0 91 e4 04 	lds	r31, 0x04E4
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	92 83       	std	Z+2, r25	; 0x02
    1e6e:	81 83       	std	Z+1, r24	; 0x01
         serialDataEnd=temp;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	90 93 e4 04 	sts	0x04E4, r25
    1e78:	80 93 e3 04 	sts	0x04E3, r24
    }
    if(serialDataStart==NULL) serialDataStart=serialDataEnd;     
    1e7c:	80 91 e1 04 	lds	r24, 0x04E1
    1e80:	90 91 e2 04 	lds	r25, 0x04E2
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	41 f4       	brne	.+16     	; 0x1e98 <__vector_25+0xba>
    1e88:	80 91 e3 04 	lds	r24, 0x04E3
    1e8c:	90 91 e4 04 	lds	r25, 0x04E4
    1e90:	90 93 e2 04 	sts	0x04E2, r25
    1e94:	80 93 e1 04 	sts	0x04E1, r24

}
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	ff 91       	pop	r31
    1ea2:	ef 91       	pop	r30
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	0f 90       	pop	r0
    1eba:	00 92 5b 00 	sts	0x005B, r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <serial_sendString>:


void serial_sendString(char str[])
{int i;
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	c2 54       	subi	r28, 0x42	; 66
    1ed6:	d0 40       	sbci	r29, 0x00	; 0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ef 5b       	subi	r30, 0xBF	; 191
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
lcd_cursor(1,1);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
UDR0='#';
    1ef4:	e6 ec       	ldi	r30, 0xC6	; 198
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	83 e2       	ldi	r24, 0x23	; 35
    1efa:	80 83       	st	Z, r24
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	8f a3       	std	Y+39, r24	; 0x27
    1f06:	98 a7       	std	Y+40, r25	; 0x28
    1f08:	a9 a7       	std	Y+41, r26	; 0x29
    1f0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f10:	89 a5       	ldd	r24, Y+41	; 0x29
    1f12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f14:	2d ec       	ldi	r18, 0xCD	; 205
    1f16:	3c ec       	ldi	r19, 0xCC	; 204
    1f18:	4c e2       	ldi	r20, 0x2C	; 44
    1f1a:	55 e4       	ldi	r21, 0x45	; 69
    1f1c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8b a3       	std	Y+35, r24	; 0x23
    1f26:	9c a3       	std	Y+36, r25	; 0x24
    1f28:	ad a3       	std	Y+37, r26	; 0x25
    1f2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f30:	8d a1       	ldd	r24, Y+37	; 0x25
    1f32:	9e a1       	ldd	r25, Y+38	; 0x26
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <serial_sendString+0x86>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9a a3       	std	Y+34, r25	; 0x22
    1f4a:	89 a3       	std	Y+33, r24	; 0x21
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <serial_sendString+0x104>
	else if (__tmp > 65535)
    1f4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f50:	7c a1       	ldd	r23, Y+36	; 0x24
    1f52:	8d a1       	ldd	r24, Y+37	; 0x25
    1f54:	9e a1       	ldd	r25, Y+38	; 0x26
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <serial_sendString+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6f a1       	ldd	r22, Y+39	; 0x27
    1f68:	78 a5       	ldd	r23, Y+40	; 0x28
    1f6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <serial_sendString+0xe6>
    1f90:	84 e1       	ldi	r24, 0x14	; 20
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	98 a3       	std	Y+32, r25	; 0x20
    1f96:	8f 8f       	std	Y+31, r24	; 0x1f
    1f98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <serial_sendString+0xd4>
    1fa0:	98 a3       	std	Y+32, r25	; 0x20
    1fa2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9a a3       	std	Y+34, r25	; 0x22
    1fac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <serial_sendString+0xc8>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <serial_sendString+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fba:	7c a1       	ldd	r23, Y+36	; 0x24
    1fbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc0:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9a a3       	std	Y+34, r25	; 0x22
    1fca:	89 a3       	std	Y+33, r24	; 0x21
    1fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fce:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <serial_sendString+0x110>
    1fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fde:	8d 8f       	std	Y+29, r24	; 0x1d
char val[20];
//lcd_string("here");
//itoa(strlen(str),val,10);
//	lcd_string(val);

	for(i=0;i<strlen(str);i++)
    1fe0:	1c a6       	std	Y+44, r1	; 0x2c
    1fe2:	1b a6       	std	Y+43, r1	; 0x2b
    1fe4:	85 c0       	rjmp	.+266    	; 0x20f0 <serial_sendString+0x228>
	{
	UDR0=str[i];
    1fe6:	a6 ec       	ldi	r26, 0xC6	; 198
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	2b a5       	ldd	r18, Y+43	; 0x2b
    1fec:	3c a5       	ldd	r19, Y+44	; 0x2c
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ef 5b       	subi	r30, 0xBF	; 191
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	80 81       	ld	r24, Z
    2000:	8c 93       	st	X, r24
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e8       	ldi	r26, 0x80	; 128
    2008:	bf e3       	ldi	r27, 0x3F	; 63
    200a:	89 8f       	std	Y+25, r24	; 0x19
    200c:	9a 8f       	std	Y+26, r25	; 0x1a
    200e:	ab 8f       	std	Y+27, r26	; 0x1b
    2010:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	69 8d       	ldd	r22, Y+25	; 0x19
    2014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201a:	2d ec       	ldi	r18, 0xCD	; 205
    201c:	3c ec       	ldi	r19, 0xCC	; 204
    201e:	4c e2       	ldi	r20, 0x2C	; 44
    2020:	55 e4       	ldi	r21, 0x45	; 69
    2022:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8d 8b       	std	Y+21, r24	; 0x15
    202c:	9e 8b       	std	Y+22, r25	; 0x16
    202e:	af 8b       	std	Y+23, r26	; 0x17
    2030:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2032:	6d 89       	ldd	r22, Y+21	; 0x15
    2034:	7e 89       	ldd	r23, Y+22	; 0x16
    2036:	8f 89       	ldd	r24, Y+23	; 0x17
    2038:	98 8d       	ldd	r25, Y+24	; 0x18
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	2c f4       	brge	.+10     	; 0x2054 <serial_sendString+0x18c>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <serial_sendString+0x20a>
	else if (__tmp > 65535)
    2054:	6d 89       	ldd	r22, Y+21	; 0x15
    2056:	7e 89       	ldd	r23, Y+22	; 0x16
    2058:	8f 89       	ldd	r24, Y+23	; 0x17
    205a:	98 8d       	ldd	r25, Y+24	; 0x18
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	4c f5       	brge	.+82     	; 0x20be <serial_sendString+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	69 8d       	ldd	r22, Y+25	; 0x19
    206e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e2       	ldi	r20, 0x20	; 32
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <serial_sendString+0x1ec>
    2096:	84 e1       	ldi	r24, 0x14	; 20
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	9a 8b       	std	Y+18, r25	; 0x12
    209c:	89 8b       	std	Y+17, r24	; 0x11
    209e:	89 89       	ldd	r24, Y+17	; 0x11
    20a0:	9a 89       	ldd	r25, Y+18	; 0x12
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <serial_sendString+0x1da>
    20a6:	9a 8b       	std	Y+18, r25	; 0x12
    20a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	8b 89       	ldd	r24, Y+19	; 0x13
    20ac:	9c 89       	ldd	r25, Y+20	; 0x14
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f7       	brne	.-38     	; 0x2096 <serial_sendString+0x1ce>
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <serial_sendString+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	98 8b       	std	Y+16, r25	; 0x10
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
    20da:	8f 85       	ldd	r24, Y+15	; 0x0f
    20dc:	98 89       	ldd	r25, Y+16	; 0x10
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <serial_sendString+0x216>
    20e2:	98 8b       	std	Y+16, r25	; 0x10
    20e4:	8f 87       	std	Y+15, r24	; 0x0f
char val[20];
//lcd_string("here");
//itoa(strlen(str),val,10);
//	lcd_string(val);

	for(i=0;i<strlen(str);i++)
    20e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	9c a7       	std	Y+44, r25	; 0x2c
    20ee:	8b a7       	std	Y+43, r24	; 0x2b
    20f0:	0b a5       	ldd	r16, Y+43	; 0x2b
    20f2:	1c a5       	ldd	r17, Y+44	; 0x2c
    20f4:	fe 01       	movw	r30, r28
    20f6:	ef 5b       	subi	r30, 0xBF	; 191
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	0e 94 86 38 	call	0x710c	; 0x710c <strlen>
    2102:	08 17       	cp	r16, r24
    2104:	19 07       	cpc	r17, r25
    2106:	08 f4       	brcc	.+2      	; 0x210a <serial_sendString+0x242>
    2108:	6e cf       	rjmp	.-292    	; 0x1fe6 <serial_sendString+0x11e>
	UDR0=str[i];
//	lcd_wr_char(str[i]);

	_delay_ms(1);
	}
	UDR0='#';
    210a:	e6 ec       	ldi	r30, 0xC6	; 198
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	83 e2       	ldi	r24, 0x23	; 35
    2110:	80 83       	st	Z, r24
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	2d ec       	ldi	r18, 0xCD	; 205
    212c:	3c ec       	ldi	r19, 0xCC	; 204
    212e:	4c e2       	ldi	r20, 0x2C	; 44
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <serial_sendString+0x29c>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <serial_sendString+0x31a>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <serial_sendString+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <serial_sendString+0x2fc>
    21a6:	84 e1       	ldi	r24, 0x14	; 20
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <serial_sendString+0x2ea>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <serial_sendString+0x2de>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <serial_sendString+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <serial_sendString+0x326>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    21f6:	ce 5b       	subi	r28, 0xBE	; 190
    21f8:	df 4f       	sbci	r29, 0xFF	; 255
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <invoker>:


void invoker(char opt[50])
{
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	cc 53       	subi	r28, 0x3C	; 60
    221c:	d1 40       	sbci	r29, 0x01	; 1
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	fe 01       	movw	r30, r28
    222a:	e5 5c       	subi	r30, 0xC5	; 197
    222c:	fe 4f       	sbci	r31, 0xFE	; 254
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
	    if(!strcmp("w",opt)) //ASCII value of 8
    2232:	84 e1       	ldi	r24, 0x14	; 20
    2234:	92 e0       	ldi	r25, 0x02	; 2
    2236:	fe 01       	movw	r30, r28
    2238:	e5 5c       	subi	r30, 0xC5	; 197
    223a:	fe 4f       	sbci	r31, 0xFE	; 254
    223c:	20 81       	ld	r18, Z
    223e:	31 81       	ldd	r19, Z+1	; 0x01
    2240:	b9 01       	movw	r22, r18
    2242:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	29 f4       	brne	.+10     	; 0x2254 <invoker+0x46>
        {
            PORTA=0x06;  //forward
    224a:	e2 e2       	ldi	r30, 0x22	; 34
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	86 e0       	ldi	r24, 0x06	; 6
    2250:	80 83       	st	Z, r24
    2252:	9a c5       	rjmp	.+2868   	; 0x2d88 <invoker+0xb7a>
			return;
        }
 
        if(!strcmp("s",opt)) //ASCII value of 2
    2254:	86 e1       	ldi	r24, 0x16	; 22
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	fe 01       	movw	r30, r28
    225a:	e5 5c       	subi	r30, 0xC5	; 197
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	20 81       	ld	r18, Z
    2260:	31 81       	ldd	r19, Z+1	; 0x01
    2262:	b9 01       	movw	r22, r18
    2264:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	29 f4       	brne	.+10     	; 0x2276 <invoker+0x68>
        {
            PORTA=0x09; //back
    226c:	e2 e2       	ldi	r30, 0x22	; 34
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	89 e0       	ldi	r24, 0x09	; 9
    2272:	80 83       	st	Z, r24
    2274:	89 c5       	rjmp	.+2834   	; 0x2d88 <invoker+0xb7a>
			return;
        }
 
        if(!strcmp("a",opt)) //ASCII value of 4
    2276:	88 e1       	ldi	r24, 0x18	; 24
    2278:	92 e0       	ldi	r25, 0x02	; 2
    227a:	fe 01       	movw	r30, r28
    227c:	e5 5c       	subi	r30, 0xC5	; 197
    227e:	fe 4f       	sbci	r31, 0xFE	; 254
    2280:	20 81       	ld	r18, Z
    2282:	31 81       	ldd	r19, Z+1	; 0x01
    2284:	b9 01       	movw	r22, r18
    2286:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	29 f4       	brne	.+10     	; 0x2298 <invoker+0x8a>
        {
            PORTA=0x05;  //left
    228e:	e2 e2       	ldi	r30, 0x22	; 34
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	85 e0       	ldi	r24, 0x05	; 5
    2294:	80 83       	st	Z, r24
    2296:	78 c5       	rjmp	.+2800   	; 0x2d88 <invoker+0xb7a>
  	        return;
		}
 
        if(!strcmp("d",opt)) //ASCII value of 6
    2298:	8a e1       	ldi	r24, 0x1A	; 26
    229a:	92 e0       	ldi	r25, 0x02	; 2
    229c:	fe 01       	movw	r30, r28
    229e:	e5 5c       	subi	r30, 0xC5	; 197
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	20 81       	ld	r18, Z
    22a4:	31 81       	ldd	r19, Z+1	; 0x01
    22a6:	b9 01       	movw	r22, r18
    22a8:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	29 f4       	brne	.+10     	; 0x22ba <invoker+0xac>
        {
            PORTA=0x0A; //right
    22b0:	e2 e2       	ldi	r30, 0x22	; 34
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	8a e0       	ldi	r24, 0x0A	; 10
    22b6:	80 83       	st	Z, r24
    22b8:	67 c5       	rjmp	.+2766   	; 0x2d88 <invoker+0xb7a>
			return;
        }
 
        if(!strcmp(" ",opt)) //ASCII value of 5
    22ba:	8c e1       	ldi	r24, 0x1C	; 28
    22bc:	92 e0       	ldi	r25, 0x02	; 2
    22be:	fe 01       	movw	r30, r28
    22c0:	e5 5c       	subi	r30, 0xC5	; 197
    22c2:	fe 4f       	sbci	r31, 0xFE	; 254
    22c4:	20 81       	ld	r18, Z
    22c6:	31 81       	ldd	r19, Z+1	; 0x01
    22c8:	b9 01       	movw	r22, r18
    22ca:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	21 f4       	brne	.+8      	; 0x22da <invoker+0xcc>
        {
            PORTA=0x00; //stop
    22d2:	e2 e2       	ldi	r30, 0x22	; 34
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	10 82       	st	Z, r1
    22d8:	57 c5       	rjmp	.+2734   	; 0x2d88 <invoker+0xb7a>
			return;
        }
 
        if(!strcmp("h",opt)) //ASCII value of 7
    22da:	8e e1       	ldi	r24, 0x1E	; 30
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	fe 01       	movw	r30, r28
    22e0:	e5 5c       	subi	r30, 0xC5	; 197
    22e2:	fe 4f       	sbci	r31, 0xFE	; 254
    22e4:	20 81       	ld	r18, Z
    22e6:	31 81       	ldd	r19, Z+1	; 0x01
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	19 f4       	brne	.+6      	; 0x22f8 <invoker+0xea>
        {
            buzzer_on();
    22f2:	0e 94 ef 0a 	call	0x15de	; 0x15de <buzzer_on>
    22f6:	48 c5       	rjmp	.+2704   	; 0x2d88 <invoker+0xb7a>
			return;
        }
 
        if(!strcmp("m",opt)) //ASCII value of 9
    22f8:	80 e2       	ldi	r24, 0x20	; 32
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	fe 01       	movw	r30, r28
    22fe:	e5 5c       	subi	r30, 0xC5	; 197
    2300:	fe 4f       	sbci	r31, 0xFE	; 254
    2302:	20 81       	ld	r18, Z
    2304:	31 81       	ldd	r19, Z+1	; 0x01
    2306:	b9 01       	movw	r22, r18
    2308:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	19 f4       	brne	.+6      	; 0x2316 <invoker+0x108>
        {
            buzzer_off();
    2310:	0e 94 04 0b 	call	0x1608	; 0x1608 <buzzer_off>
    2314:	39 c5       	rjmp	.+2674   	; 0x2d88 <invoker+0xb7a>
			return;
        }
		if(!strcmp("lcd",opt))
    2316:	82 e2       	ldi	r24, 0x22	; 34
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	fe 01       	movw	r30, r28
    231c:	e5 5c       	subi	r30, 0xC5	; 197
    231e:	fe 4f       	sbci	r31, 0xFE	; 254
    2320:	20 81       	ld	r18, Z
    2322:	31 81       	ldd	r19, Z+1	; 0x01
    2324:	b9 01       	movw	r22, r18
    2326:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	99 f4       	brne	.+38     	; 0x2354 <invoker+0x146>
		{
			char arg1[50];
			serial_getString(arg1,50);
    232e:	ce 01       	movw	r24, r28
    2330:	8b 55       	subi	r24, 0x5B	; 91
    2332:	9f 4f       	sbci	r25, 0xFF	; 255
    2334:	62 e3       	ldi	r22, 0x32	; 50
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			lcd_cursor(1,1);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
			lcd_clear();
    2344:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
			lcd_string(arg1);
    2348:	ce 01       	movw	r24, r28
    234a:	8b 55       	subi	r24, 0x5B	; 91
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    2352:	1a c5       	rjmp	.+2612   	; 0x2d88 <invoker+0xb7a>
			return;
		}
		if(!strcmp("setPort",opt))
    2354:	86 e2       	ldi	r24, 0x26	; 38
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	fe 01       	movw	r30, r28
    235a:	e5 5c       	subi	r30, 0xC5	; 197
    235c:	fe 4f       	sbci	r31, 0xFE	; 254
    235e:	20 81       	ld	r18, Z
    2360:	31 81       	ldd	r19, Z+1	; 0x01
    2362:	b9 01       	movw	r22, r18
    2364:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	09 f0       	breq	.+2      	; 0x236e <invoker+0x160>
    236c:	c7 c1       	rjmp	.+910    	; 0x26fc <invoker+0x4ee>
		{
			char portName[50],value[50];
				serial_getString(portName,50);serial_getString(value,50); 
    236e:	ce 01       	movw	r24, r28
    2370:	8b 55       	subi	r24, 0x5B	; 91
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	62 e3       	ldi	r22, 0x32	; 50
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
    237c:	ce 01       	movw	r24, r28
    237e:	89 52       	subi	r24, 0x29	; 41
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	62 e3       	ldi	r22, 0x32	; 50
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
				  if(strcmp(portName,"PORTA")==0) PORTA=atoi(value);
    238a:	ce 01       	movw	r24, r28
    238c:	8b 55       	subi	r24, 0x5B	; 91
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	2e e2       	ldi	r18, 0x2E	; 46
    2392:	32 e0       	ldi	r19, 0x02	; 2
    2394:	b9 01       	movw	r22, r18
    2396:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	51 f4       	brne	.+20     	; 0x23b2 <invoker+0x1a4>
    239e:	02 e2       	ldi	r16, 0x22	; 34
    23a0:	10 e0       	ldi	r17, 0x00	; 0
    23a2:	ce 01       	movw	r24, r28
    23a4:	89 52       	subi	r24, 0x29	; 41
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    23ac:	f8 01       	movw	r30, r16
    23ae:	80 83       	st	Z, r24
    23b0:	eb c4       	rjmp	.+2518   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTB")==0) PORTB=atoi(value);
    23b2:	ce 01       	movw	r24, r28
    23b4:	8b 55       	subi	r24, 0x5B	; 91
    23b6:	9f 4f       	sbci	r25, 0xFF	; 255
    23b8:	24 e3       	ldi	r18, 0x34	; 52
    23ba:	32 e0       	ldi	r19, 0x02	; 2
    23bc:	b9 01       	movw	r22, r18
    23be:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	51 f4       	brne	.+20     	; 0x23da <invoker+0x1cc>
    23c6:	05 e2       	ldi	r16, 0x25	; 37
    23c8:	10 e0       	ldi	r17, 0x00	; 0
    23ca:	ce 01       	movw	r24, r28
    23cc:	89 52       	subi	r24, 0x29	; 41
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	d7 c4       	rjmp	.+2478   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTC")==0) PORTC=atoi(value);
    23da:	ce 01       	movw	r24, r28
    23dc:	8b 55       	subi	r24, 0x5B	; 91
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	2a e3       	ldi	r18, 0x3A	; 58
    23e2:	32 e0       	ldi	r19, 0x02	; 2
    23e4:	b9 01       	movw	r22, r18
    23e6:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	51 f4       	brne	.+20     	; 0x2402 <invoker+0x1f4>
    23ee:	08 e2       	ldi	r16, 0x28	; 40
    23f0:	10 e0       	ldi	r17, 0x00	; 0
    23f2:	ce 01       	movw	r24, r28
    23f4:	89 52       	subi	r24, 0x29	; 41
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    23fc:	f8 01       	movw	r30, r16
    23fe:	80 83       	st	Z, r24
    2400:	c3 c4       	rjmp	.+2438   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTD")==0) PORTD=atoi(value);
    2402:	ce 01       	movw	r24, r28
    2404:	8b 55       	subi	r24, 0x5B	; 91
    2406:	9f 4f       	sbci	r25, 0xFF	; 255
    2408:	20 e4       	ldi	r18, 0x40	; 64
    240a:	32 e0       	ldi	r19, 0x02	; 2
    240c:	b9 01       	movw	r22, r18
    240e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	51 f4       	brne	.+20     	; 0x242a <invoker+0x21c>
    2416:	0b e2       	ldi	r16, 0x2B	; 43
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	ce 01       	movw	r24, r28
    241c:	89 52       	subi	r24, 0x29	; 41
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2424:	f8 01       	movw	r30, r16
    2426:	80 83       	st	Z, r24
    2428:	af c4       	rjmp	.+2398   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTE")==0) PORTE=atoi(value);
    242a:	ce 01       	movw	r24, r28
    242c:	8b 55       	subi	r24, 0x5B	; 91
    242e:	9f 4f       	sbci	r25, 0xFF	; 255
    2430:	26 e4       	ldi	r18, 0x46	; 70
    2432:	32 e0       	ldi	r19, 0x02	; 2
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	51 f4       	brne	.+20     	; 0x2452 <invoker+0x244>
    243e:	0e e2       	ldi	r16, 0x2E	; 46
    2440:	10 e0       	ldi	r17, 0x00	; 0
    2442:	ce 01       	movw	r24, r28
    2444:	89 52       	subi	r24, 0x29	; 41
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    244c:	f8 01       	movw	r30, r16
    244e:	80 83       	st	Z, r24
    2450:	9b c4       	rjmp	.+2358   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTF")==0) PORTF=atoi(value);
    2452:	ce 01       	movw	r24, r28
    2454:	8b 55       	subi	r24, 0x5B	; 91
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	2c e4       	ldi	r18, 0x4C	; 76
    245a:	32 e0       	ldi	r19, 0x02	; 2
    245c:	b9 01       	movw	r22, r18
    245e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	51 f4       	brne	.+20     	; 0x247a <invoker+0x26c>
    2466:	01 e3       	ldi	r16, 0x31	; 49
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	ce 01       	movw	r24, r28
    246c:	89 52       	subi	r24, 0x29	; 41
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2474:	f8 01       	movw	r30, r16
    2476:	80 83       	st	Z, r24
    2478:	87 c4       	rjmp	.+2318   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTG")==0) PORTG=atoi(value);
    247a:	ce 01       	movw	r24, r28
    247c:	8b 55       	subi	r24, 0x5B	; 91
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	22 e5       	ldi	r18, 0x52	; 82
    2482:	32 e0       	ldi	r19, 0x02	; 2
    2484:	b9 01       	movw	r22, r18
    2486:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	51 f4       	brne	.+20     	; 0x24a2 <invoker+0x294>
    248e:	04 e3       	ldi	r16, 0x34	; 52
    2490:	10 e0       	ldi	r17, 0x00	; 0
    2492:	ce 01       	movw	r24, r28
    2494:	89 52       	subi	r24, 0x29	; 41
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    249c:	f8 01       	movw	r30, r16
    249e:	80 83       	st	Z, r24
    24a0:	73 c4       	rjmp	.+2278   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTH")==0) PORTH=atoi(value);
    24a2:	ce 01       	movw	r24, r28
    24a4:	8b 55       	subi	r24, 0x5B	; 91
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	28 e5       	ldi	r18, 0x58	; 88
    24aa:	32 e0       	ldi	r19, 0x02	; 2
    24ac:	b9 01       	movw	r22, r18
    24ae:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	51 f4       	brne	.+20     	; 0x24ca <invoker+0x2bc>
    24b6:	02 e0       	ldi	r16, 0x02	; 2
    24b8:	11 e0       	ldi	r17, 0x01	; 1
    24ba:	ce 01       	movw	r24, r28
    24bc:	89 52       	subi	r24, 0x29	; 41
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    24c4:	f8 01       	movw	r30, r16
    24c6:	80 83       	st	Z, r24
    24c8:	5f c4       	rjmp	.+2238   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTJ")==0) PORTJ=atoi(value);
    24ca:	ce 01       	movw	r24, r28
    24cc:	8b 55       	subi	r24, 0x5B	; 91
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	2e e5       	ldi	r18, 0x5E	; 94
    24d2:	32 e0       	ldi	r19, 0x02	; 2
    24d4:	b9 01       	movw	r22, r18
    24d6:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	51 f4       	brne	.+20     	; 0x24f2 <invoker+0x2e4>
    24de:	05 e0       	ldi	r16, 0x05	; 5
    24e0:	11 e0       	ldi	r17, 0x01	; 1
    24e2:	ce 01       	movw	r24, r28
    24e4:	89 52       	subi	r24, 0x29	; 41
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    24ec:	f8 01       	movw	r30, r16
    24ee:	80 83       	st	Z, r24
    24f0:	4b c4       	rjmp	.+2198   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTK")==0) PORTK=atoi(value);
    24f2:	ce 01       	movw	r24, r28
    24f4:	8b 55       	subi	r24, 0x5B	; 91
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	24 e6       	ldi	r18, 0x64	; 100
    24fa:	32 e0       	ldi	r19, 0x02	; 2
    24fc:	b9 01       	movw	r22, r18
    24fe:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	51 f4       	brne	.+20     	; 0x251a <invoker+0x30c>
    2506:	08 e0       	ldi	r16, 0x08	; 8
    2508:	11 e0       	ldi	r17, 0x01	; 1
    250a:	ce 01       	movw	r24, r28
    250c:	89 52       	subi	r24, 0x29	; 41
    250e:	9f 4f       	sbci	r25, 0xFF	; 255
    2510:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2514:	f8 01       	movw	r30, r16
    2516:	80 83       	st	Z, r24
    2518:	37 c4       	rjmp	.+2158   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"PORTL")==0) PORTL=atoi(value);
    251a:	ce 01       	movw	r24, r28
    251c:	8b 55       	subi	r24, 0x5B	; 91
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	2a e6       	ldi	r18, 0x6A	; 106
    2522:	32 e0       	ldi	r19, 0x02	; 2
    2524:	b9 01       	movw	r22, r18
    2526:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	51 f4       	brne	.+20     	; 0x2542 <invoker+0x334>
    252e:	0b e0       	ldi	r16, 0x0B	; 11
    2530:	11 e0       	ldi	r17, 0x01	; 1
    2532:	ce 01       	movw	r24, r28
    2534:	89 52       	subi	r24, 0x29	; 41
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    253c:	f8 01       	movw	r30, r16
    253e:	80 83       	st	Z, r24
    2540:	23 c4       	rjmp	.+2118   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRA")==0) DDRA=atoi(value);
    2542:	ce 01       	movw	r24, r28
    2544:	8b 55       	subi	r24, 0x5B	; 91
    2546:	9f 4f       	sbci	r25, 0xFF	; 255
    2548:	20 e7       	ldi	r18, 0x70	; 112
    254a:	32 e0       	ldi	r19, 0x02	; 2
    254c:	b9 01       	movw	r22, r18
    254e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	51 f4       	brne	.+20     	; 0x256a <invoker+0x35c>
    2556:	01 e2       	ldi	r16, 0x21	; 33
    2558:	10 e0       	ldi	r17, 0x00	; 0
    255a:	ce 01       	movw	r24, r28
    255c:	89 52       	subi	r24, 0x29	; 41
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2564:	f8 01       	movw	r30, r16
    2566:	80 83       	st	Z, r24
    2568:	0f c4       	rjmp	.+2078   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRB")==0) DDRB=atoi(value);
    256a:	ce 01       	movw	r24, r28
    256c:	8b 55       	subi	r24, 0x5B	; 91
    256e:	9f 4f       	sbci	r25, 0xFF	; 255
    2570:	25 e7       	ldi	r18, 0x75	; 117
    2572:	32 e0       	ldi	r19, 0x02	; 2
    2574:	b9 01       	movw	r22, r18
    2576:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	51 f4       	brne	.+20     	; 0x2592 <invoker+0x384>
    257e:	04 e2       	ldi	r16, 0x24	; 36
    2580:	10 e0       	ldi	r17, 0x00	; 0
    2582:	ce 01       	movw	r24, r28
    2584:	89 52       	subi	r24, 0x29	; 41
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    258c:	f8 01       	movw	r30, r16
    258e:	80 83       	st	Z, r24
    2590:	fb c3       	rjmp	.+2038   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRC")==0) DDRC=atoi(value);
    2592:	ce 01       	movw	r24, r28
    2594:	8b 55       	subi	r24, 0x5B	; 91
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	2a e7       	ldi	r18, 0x7A	; 122
    259a:	32 e0       	ldi	r19, 0x02	; 2
    259c:	b9 01       	movw	r22, r18
    259e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	51 f4       	brne	.+20     	; 0x25ba <invoker+0x3ac>
    25a6:	07 e2       	ldi	r16, 0x27	; 39
    25a8:	10 e0       	ldi	r17, 0x00	; 0
    25aa:	ce 01       	movw	r24, r28
    25ac:	89 52       	subi	r24, 0x29	; 41
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	e7 c3       	rjmp	.+1998   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRD")==0) DDRD=atoi(value);
    25ba:	ce 01       	movw	r24, r28
    25bc:	8b 55       	subi	r24, 0x5B	; 91
    25be:	9f 4f       	sbci	r25, 0xFF	; 255
    25c0:	2f e7       	ldi	r18, 0x7F	; 127
    25c2:	32 e0       	ldi	r19, 0x02	; 2
    25c4:	b9 01       	movw	r22, r18
    25c6:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	51 f4       	brne	.+20     	; 0x25e2 <invoker+0x3d4>
    25ce:	0a e2       	ldi	r16, 0x2A	; 42
    25d0:	10 e0       	ldi	r17, 0x00	; 0
    25d2:	ce 01       	movw	r24, r28
    25d4:	89 52       	subi	r24, 0x29	; 41
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    25dc:	f8 01       	movw	r30, r16
    25de:	80 83       	st	Z, r24
    25e0:	d3 c3       	rjmp	.+1958   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRE")==0) DDRE=atoi(value);
    25e2:	ce 01       	movw	r24, r28
    25e4:	8b 55       	subi	r24, 0x5B	; 91
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	24 e8       	ldi	r18, 0x84	; 132
    25ea:	32 e0       	ldi	r19, 0x02	; 2
    25ec:	b9 01       	movw	r22, r18
    25ee:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	51 f4       	brne	.+20     	; 0x260a <invoker+0x3fc>
    25f6:	0d e2       	ldi	r16, 0x2D	; 45
    25f8:	10 e0       	ldi	r17, 0x00	; 0
    25fa:	ce 01       	movw	r24, r28
    25fc:	89 52       	subi	r24, 0x29	; 41
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2604:	f8 01       	movw	r30, r16
    2606:	80 83       	st	Z, r24
    2608:	bf c3       	rjmp	.+1918   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRF")==0) DDRF=atoi(value);
    260a:	ce 01       	movw	r24, r28
    260c:	8b 55       	subi	r24, 0x5B	; 91
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	29 e8       	ldi	r18, 0x89	; 137
    2612:	32 e0       	ldi	r19, 0x02	; 2
    2614:	b9 01       	movw	r22, r18
    2616:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	51 f4       	brne	.+20     	; 0x2632 <invoker+0x424>
    261e:	00 e3       	ldi	r16, 0x30	; 48
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	ce 01       	movw	r24, r28
    2624:	89 52       	subi	r24, 0x29	; 41
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    262c:	f8 01       	movw	r30, r16
    262e:	80 83       	st	Z, r24
    2630:	ab c3       	rjmp	.+1878   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRG")==0) DDRG=atoi(value);
    2632:	ce 01       	movw	r24, r28
    2634:	8b 55       	subi	r24, 0x5B	; 91
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	2e e8       	ldi	r18, 0x8E	; 142
    263a:	32 e0       	ldi	r19, 0x02	; 2
    263c:	b9 01       	movw	r22, r18
    263e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	51 f4       	brne	.+20     	; 0x265a <invoker+0x44c>
    2646:	03 e3       	ldi	r16, 0x33	; 51
    2648:	10 e0       	ldi	r17, 0x00	; 0
    264a:	ce 01       	movw	r24, r28
    264c:	89 52       	subi	r24, 0x29	; 41
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2654:	f8 01       	movw	r30, r16
    2656:	80 83       	st	Z, r24
    2658:	97 c3       	rjmp	.+1838   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRH")==0) DDRG=atoi(value);
    265a:	ce 01       	movw	r24, r28
    265c:	8b 55       	subi	r24, 0x5B	; 91
    265e:	9f 4f       	sbci	r25, 0xFF	; 255
    2660:	23 e9       	ldi	r18, 0x93	; 147
    2662:	32 e0       	ldi	r19, 0x02	; 2
    2664:	b9 01       	movw	r22, r18
    2666:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	51 f4       	brne	.+20     	; 0x2682 <invoker+0x474>
    266e:	03 e3       	ldi	r16, 0x33	; 51
    2670:	10 e0       	ldi	r17, 0x00	; 0
    2672:	ce 01       	movw	r24, r28
    2674:	89 52       	subi	r24, 0x29	; 41
    2676:	9f 4f       	sbci	r25, 0xFF	; 255
    2678:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    267c:	f8 01       	movw	r30, r16
    267e:	80 83       	st	Z, r24
    2680:	83 c3       	rjmp	.+1798   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRJ")==0) DDRJ=atoi(value);
    2682:	ce 01       	movw	r24, r28
    2684:	8b 55       	subi	r24, 0x5B	; 91
    2686:	9f 4f       	sbci	r25, 0xFF	; 255
    2688:	28 e9       	ldi	r18, 0x98	; 152
    268a:	32 e0       	ldi	r19, 0x02	; 2
    268c:	b9 01       	movw	r22, r18
    268e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	51 f4       	brne	.+20     	; 0x26aa <invoker+0x49c>
    2696:	04 e0       	ldi	r16, 0x04	; 4
    2698:	11 e0       	ldi	r17, 0x01	; 1
    269a:	ce 01       	movw	r24, r28
    269c:	89 52       	subi	r24, 0x29	; 41
    269e:	9f 4f       	sbci	r25, 0xFF	; 255
    26a0:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    26a4:	f8 01       	movw	r30, r16
    26a6:	80 83       	st	Z, r24
    26a8:	6f c3       	rjmp	.+1758   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRK")==0) DDRK=atoi(value);
    26aa:	ce 01       	movw	r24, r28
    26ac:	8b 55       	subi	r24, 0x5B	; 91
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	2d e9       	ldi	r18, 0x9D	; 157
    26b2:	32 e0       	ldi	r19, 0x02	; 2
    26b4:	b9 01       	movw	r22, r18
    26b6:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	51 f4       	brne	.+20     	; 0x26d2 <invoker+0x4c4>
    26be:	07 e0       	ldi	r16, 0x07	; 7
    26c0:	11 e0       	ldi	r17, 0x01	; 1
    26c2:	ce 01       	movw	r24, r28
    26c4:	89 52       	subi	r24, 0x29	; 41
    26c6:	9f 4f       	sbci	r25, 0xFF	; 255
    26c8:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    26cc:	f8 01       	movw	r30, r16
    26ce:	80 83       	st	Z, r24
    26d0:	5b c3       	rjmp	.+1718   	; 0x2d88 <invoker+0xb7a>
				  else if(strcmp(portName,"DDRL")==0) DDRL=atoi(value);
    26d2:	ce 01       	movw	r24, r28
    26d4:	8b 55       	subi	r24, 0x5B	; 91
    26d6:	9f 4f       	sbci	r25, 0xFF	; 255
    26d8:	22 ea       	ldi	r18, 0xA2	; 162
    26da:	32 e0       	ldi	r19, 0x02	; 2
    26dc:	b9 01       	movw	r22, r18
    26de:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <invoker+0x4da>
    26e6:	50 c3       	rjmp	.+1696   	; 0x2d88 <invoker+0xb7a>
    26e8:	0a e0       	ldi	r16, 0x0A	; 10
    26ea:	11 e0       	ldi	r17, 0x01	; 1
    26ec:	ce 01       	movw	r24, r28
    26ee:	89 52       	subi	r24, 0x29	; 41
    26f0:	9f 4f       	sbci	r25, 0xFF	; 255
    26f2:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    26f6:	f8 01       	movw	r30, r16
    26f8:	80 83       	st	Z, r24
    26fa:	46 c3       	rjmp	.+1676   	; 0x2d88 <invoker+0xb7a>
				return;

		
		
		}
		if(!strcmp("getPin",opt))
    26fc:	87 ea       	ldi	r24, 0xA7	; 167
    26fe:	92 e0       	ldi	r25, 0x02	; 2
    2700:	fe 01       	movw	r30, r28
    2702:	e5 5c       	subi	r30, 0xC5	; 197
    2704:	fe 4f       	sbci	r31, 0xFE	; 254
    2706:	20 81       	ld	r18, Z
    2708:	31 81       	ldd	r19, Z+1	; 0x01
    270a:	b9 01       	movw	r22, r18
    270c:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	09 f0       	breq	.+2      	; 0x2716 <invoker+0x508>
    2714:	07 c1       	rjmp	.+526    	; 0x2924 <invoker+0x716>
		{
			char pinName[10],value[10];
			serial_getString(pinName,10); 
    2716:	ce 01       	movw	r24, r28
    2718:	43 96       	adiw	r24, 0x13	; 19
    271a:	6a e0       	ldi	r22, 0x0A	; 10
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			if(strcmp(pinName,"PINA")==0)   itoa(PINA, value,10 ); 
    2722:	ce 01       	movw	r24, r28
    2724:	43 96       	adiw	r24, 0x13	; 19
    2726:	2e ea       	ldi	r18, 0xAE	; 174
    2728:	32 e0       	ldi	r19, 0x02	; 2
    272a:	b9 01       	movw	r22, r18
    272c:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	71 f4       	brne	.+28     	; 0x2750 <invoker+0x542>
    2734:	e0 e2       	ldi	r30, 0x20	; 32
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	88 2f       	mov	r24, r24
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9e 01       	movw	r18, r28
    2740:	23 5e       	subi	r18, 0xE3	; 227
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	b9 01       	movw	r22, r18
    2746:	4a e0       	ldi	r20, 0x0A	; 10
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    274e:	e5 c0       	rjmp	.+458    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINB")==0)   itoa(PINB, value,10 ); 
    2750:	ce 01       	movw	r24, r28
    2752:	43 96       	adiw	r24, 0x13	; 19
    2754:	23 eb       	ldi	r18, 0xB3	; 179
    2756:	32 e0       	ldi	r19, 0x02	; 2
    2758:	b9 01       	movw	r22, r18
    275a:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	71 f4       	brne	.+28     	; 0x277e <invoker+0x570>
    2762:	e3 e2       	ldi	r30, 0x23	; 35
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9e 01       	movw	r18, r28
    276e:	23 5e       	subi	r18, 0xE3	; 227
    2770:	3f 4f       	sbci	r19, 0xFF	; 255
    2772:	b9 01       	movw	r22, r18
    2774:	4a e0       	ldi	r20, 0x0A	; 10
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    277c:	ce c0       	rjmp	.+412    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINC")==0)   itoa(PINC, value,10 ); 
    277e:	ce 01       	movw	r24, r28
    2780:	43 96       	adiw	r24, 0x13	; 19
    2782:	28 eb       	ldi	r18, 0xB8	; 184
    2784:	32 e0       	ldi	r19, 0x02	; 2
    2786:	b9 01       	movw	r22, r18
    2788:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	71 f4       	brne	.+28     	; 0x27ac <invoker+0x59e>
    2790:	e6 e2       	ldi	r30, 0x26	; 38
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9e 01       	movw	r18, r28
    279c:	23 5e       	subi	r18, 0xE3	; 227
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	b9 01       	movw	r22, r18
    27a2:	4a e0       	ldi	r20, 0x0A	; 10
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    27aa:	b7 c0       	rjmp	.+366    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PIND")==0)   itoa(PIND, value,10 ); 
    27ac:	ce 01       	movw	r24, r28
    27ae:	43 96       	adiw	r24, 0x13	; 19
    27b0:	2d eb       	ldi	r18, 0xBD	; 189
    27b2:	32 e0       	ldi	r19, 0x02	; 2
    27b4:	b9 01       	movw	r22, r18
    27b6:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	71 f4       	brne	.+28     	; 0x27da <invoker+0x5cc>
    27be:	e9 e2       	ldi	r30, 0x29	; 41
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9e 01       	movw	r18, r28
    27ca:	23 5e       	subi	r18, 0xE3	; 227
    27cc:	3f 4f       	sbci	r19, 0xFF	; 255
    27ce:	b9 01       	movw	r22, r18
    27d0:	4a e0       	ldi	r20, 0x0A	; 10
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    27d8:	a0 c0       	rjmp	.+320    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINE")==0)   itoa(PINE, value,10 ); 
    27da:	ce 01       	movw	r24, r28
    27dc:	43 96       	adiw	r24, 0x13	; 19
    27de:	22 ec       	ldi	r18, 0xC2	; 194
    27e0:	32 e0       	ldi	r19, 0x02	; 2
    27e2:	b9 01       	movw	r22, r18
    27e4:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	71 f4       	brne	.+28     	; 0x2808 <invoker+0x5fa>
    27ec:	ec e2       	ldi	r30, 0x2C	; 44
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9e 01       	movw	r18, r28
    27f8:	23 5e       	subi	r18, 0xE3	; 227
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	b9 01       	movw	r22, r18
    27fe:	4a e0       	ldi	r20, 0x0A	; 10
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    2806:	89 c0       	rjmp	.+274    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINF")==0)   itoa(PINF, value,10 ); 
    2808:	ce 01       	movw	r24, r28
    280a:	43 96       	adiw	r24, 0x13	; 19
    280c:	27 ec       	ldi	r18, 0xC7	; 199
    280e:	32 e0       	ldi	r19, 0x02	; 2
    2810:	b9 01       	movw	r22, r18
    2812:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	71 f4       	brne	.+28     	; 0x2836 <invoker+0x628>
    281a:	ef e2       	ldi	r30, 0x2F	; 47
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9e 01       	movw	r18, r28
    2826:	23 5e       	subi	r18, 0xE3	; 227
    2828:	3f 4f       	sbci	r19, 0xFF	; 255
    282a:	b9 01       	movw	r22, r18
    282c:	4a e0       	ldi	r20, 0x0A	; 10
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    2834:	72 c0       	rjmp	.+228    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PING")==0)   itoa(PING, value,10 ); 
    2836:	ce 01       	movw	r24, r28
    2838:	43 96       	adiw	r24, 0x13	; 19
    283a:	2c ec       	ldi	r18, 0xCC	; 204
    283c:	32 e0       	ldi	r19, 0x02	; 2
    283e:	b9 01       	movw	r22, r18
    2840:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	71 f4       	brne	.+28     	; 0x2864 <invoker+0x656>
    2848:	e2 e3       	ldi	r30, 0x32	; 50
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9e 01       	movw	r18, r28
    2854:	23 5e       	subi	r18, 0xE3	; 227
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	b9 01       	movw	r22, r18
    285a:	4a e0       	ldi	r20, 0x0A	; 10
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    2862:	5b c0       	rjmp	.+182    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINH")==0)   itoa(PINH, value,10 ); 
    2864:	ce 01       	movw	r24, r28
    2866:	43 96       	adiw	r24, 0x13	; 19
    2868:	21 ed       	ldi	r18, 0xD1	; 209
    286a:	32 e0       	ldi	r19, 0x02	; 2
    286c:	b9 01       	movw	r22, r18
    286e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	71 f4       	brne	.+28     	; 0x2892 <invoker+0x684>
    2876:	e0 e0       	ldi	r30, 0x00	; 0
    2878:	f1 e0       	ldi	r31, 0x01	; 1
    287a:	80 81       	ld	r24, Z
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9e 01       	movw	r18, r28
    2882:	23 5e       	subi	r18, 0xE3	; 227
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	b9 01       	movw	r22, r18
    2888:	4a e0       	ldi	r20, 0x0A	; 10
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    2890:	44 c0       	rjmp	.+136    	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINJ")==0)   itoa(PINJ, value,10 ); 
    2892:	ce 01       	movw	r24, r28
    2894:	43 96       	adiw	r24, 0x13	; 19
    2896:	26 ed       	ldi	r18, 0xD6	; 214
    2898:	32 e0       	ldi	r19, 0x02	; 2
    289a:	b9 01       	movw	r22, r18
    289c:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	71 f4       	brne	.+28     	; 0x28c0 <invoker+0x6b2>
    28a4:	e3 e0       	ldi	r30, 0x03	; 3
    28a6:	f1 e0       	ldi	r31, 0x01	; 1
    28a8:	80 81       	ld	r24, Z
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9e 01       	movw	r18, r28
    28b0:	23 5e       	subi	r18, 0xE3	; 227
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	b9 01       	movw	r22, r18
    28b6:	4a e0       	ldi	r20, 0x0A	; 10
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    28be:	2d c0       	rjmp	.+90     	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINK")==0)   itoa(PINK, value,10 ); 
    28c0:	ce 01       	movw	r24, r28
    28c2:	43 96       	adiw	r24, 0x13	; 19
    28c4:	2b ed       	ldi	r18, 0xDB	; 219
    28c6:	32 e0       	ldi	r19, 0x02	; 2
    28c8:	b9 01       	movw	r22, r18
    28ca:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	71 f4       	brne	.+28     	; 0x28ee <invoker+0x6e0>
    28d2:	e6 e0       	ldi	r30, 0x06	; 6
    28d4:	f1 e0       	ldi	r31, 0x01	; 1
    28d6:	80 81       	ld	r24, Z
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9e 01       	movw	r18, r28
    28de:	23 5e       	subi	r18, 0xE3	; 227
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	b9 01       	movw	r22, r18
    28e4:	4a e0       	ldi	r20, 0x0A	; 10
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    28ec:	16 c0       	rjmp	.+44     	; 0x291a <invoker+0x70c>
			  else if(strcmp(pinName,"PINL")==0)   itoa(PINL, value,10 ); 
    28ee:	ce 01       	movw	r24, r28
    28f0:	43 96       	adiw	r24, 0x13	; 19
    28f2:	20 ee       	ldi	r18, 0xE0	; 224
    28f4:	32 e0       	ldi	r19, 0x02	; 2
    28f6:	b9 01       	movw	r22, r18
    28f8:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f4       	brne	.+26     	; 0x291a <invoker+0x70c>
    2900:	e9 e0       	ldi	r30, 0x09	; 9
    2902:	f1 e0       	ldi	r31, 0x01	; 1
    2904:	80 81       	ld	r24, Z
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9e 01       	movw	r18, r28
    290c:	23 5e       	subi	r18, 0xE3	; 227
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	b9 01       	movw	r22, r18
    2912:	4a e0       	ldi	r20, 0x0A	; 10
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
			serial_sendString(value);
    291a:	ce 01       	movw	r24, r28
    291c:	4d 96       	adiw	r24, 0x1d	; 29
    291e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2922:	32 c2       	rjmp	.+1124   	; 0x2d88 <invoker+0xb7a>
			return;

		}
		if(!strcmp("rollLCD",opt))
    2924:	85 ee       	ldi	r24, 0xE5	; 229
    2926:	92 e0       	ldi	r25, 0x02	; 2
    2928:	fe 01       	movw	r30, r28
    292a:	e5 5c       	subi	r30, 0xC5	; 197
    292c:	fe 4f       	sbci	r31, 0xFE	; 254
    292e:	20 81       	ld	r18, Z
    2930:	31 81       	ldd	r19, Z+1	; 0x01
    2932:	b9 01       	movw	r22, r18
    2934:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f4       	brne	.+26     	; 0x2956 <invoker+0x748>
		{

			char str[100];
			serial_getString(str,100);
    293c:	ce 01       	movw	r24, r28
    293e:	89 52       	subi	r24, 0x29	; 41
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	64 e6       	ldi	r22, 0x64	; 100
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			rollLCD(str);
    294a:	ce 01       	movw	r24, r28
    294c:	89 52       	subi	r24, 0x29	; 41
    294e:	9f 4f       	sbci	r25, 0xFF	; 255
    2950:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <rollLCD>
    2954:	19 c2       	rjmp	.+1074   	; 0x2d88 <invoker+0xb7a>
			return;

		}
		if(!strcmp("strictForward",opt))
    2956:	8d ee       	ldi	r24, 0xED	; 237
    2958:	92 e0       	ldi	r25, 0x02	; 2
    295a:	fe 01       	movw	r30, r28
    295c:	e5 5c       	subi	r30, 0xC5	; 197
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
    2960:	20 81       	ld	r18, Z
    2962:	31 81       	ldd	r19, Z+1	; 0x01
    2964:	b9 01       	movw	r22, r18
    2966:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	19 f4       	brne	.+6      	; 0x2974 <invoker+0x766>
		{
			strictForward();return;
    296e:	0e 94 1d 18 	call	0x303a	; 0x303a <strictForward>
    2972:	0a c2       	rjmp	.+1044   	; 0x2d88 <invoker+0xb7a>
			
		}
		if(!strcmp("strictBack",opt))
    2974:	8b ef       	ldi	r24, 0xFB	; 251
    2976:	92 e0       	ldi	r25, 0x02	; 2
    2978:	fe 01       	movw	r30, r28
    297a:	e5 5c       	subi	r30, 0xC5	; 197
    297c:	fe 4f       	sbci	r31, 0xFE	; 254
    297e:	20 81       	ld	r18, Z
    2980:	31 81       	ldd	r19, Z+1	; 0x01
    2982:	b9 01       	movw	r22, r18
    2984:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	19 f4       	brne	.+6      	; 0x2992 <invoker+0x784>
		{
			strictBackward();return;
    298c:	0e 94 83 18 	call	0x3106	; 0x3106 <strictBackward>
    2990:	fb c1       	rjmp	.+1014   	; 0x2d88 <invoker+0xb7a>
			
		}
		if(!strcmp("moveOnArc",opt))
    2992:	86 e0       	ldi	r24, 0x06	; 6
    2994:	93 e0       	ldi	r25, 0x03	; 3
    2996:	fe 01       	movw	r30, r28
    2998:	e5 5c       	subi	r30, 0xC5	; 197
    299a:	fe 4f       	sbci	r31, 0xFE	; 254
    299c:	20 81       	ld	r18, Z
    299e:	31 81       	ldd	r19, Z+1	; 0x01
    29a0:	b9 01       	movw	r22, r18
    29a2:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	01 f5       	brne	.+64     	; 0x29ea <invoker+0x7dc>
		{

			char rad[20],dir[3];
			serial_getString(rad,20);
    29aa:	ce 01       	movw	r24, r28
    29ac:	87 96       	adiw	r24, 0x27	; 39
    29ae:	64 e1       	ldi	r22, 0x14	; 20
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			serial_getString(dir,3);
    29b6:	ce 01       	movw	r24, r28
    29b8:	cb 96       	adiw	r24, 0x3b	; 59
    29ba:	63 e0       	ldi	r22, 0x03	; 3
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			int radius,direc;
			radius=atoi(rad);
    29c2:	ce 01       	movw	r24, r28
    29c4:	87 96       	adiw	r24, 0x27	; 39
    29c6:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    29ca:	9a 8b       	std	Y+18, r25	; 0x12
    29cc:	89 8b       	std	Y+17, r24	; 0x11
			direc=atoi(dir);
    29ce:	ce 01       	movw	r24, r28
    29d0:	cb 96       	adiw	r24, 0x3b	; 59
    29d2:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    29d6:	98 8b       	std	Y+16, r25	; 0x10
    29d8:	8f 87       	std	Y+15, r24	; 0x0f
			moveOnArc(radius,direc);
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	9a 89       	ldd	r25, Y+18	; 0x12
    29de:	2f 85       	ldd	r18, Y+15	; 0x0f
    29e0:	38 89       	ldd	r19, Y+16	; 0x10
    29e2:	b9 01       	movw	r22, r18
    29e4:	0e 94 20 19 	call	0x3240	; 0x3240 <moveOnArc>
    29e8:	cf c1       	rjmp	.+926    	; 0x2d88 <invoker+0xb7a>
			
			return;

		}
		if(!strcmp("getLeftWLS",opt))
    29ea:	80 e1       	ldi	r24, 0x10	; 16
    29ec:	93 e0       	ldi	r25, 0x03	; 3
    29ee:	fe 01       	movw	r30, r28
    29f0:	e5 5c       	subi	r30, 0xC5	; 197
    29f2:	fe 4f       	sbci	r31, 0xFE	; 254
    29f4:	20 81       	ld	r18, Z
    29f6:	31 81       	ldd	r19, Z+1	; 0x01
    29f8:	b9 01       	movw	r22, r18
    29fa:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	b1 f4       	brne	.+44     	; 0x2a2e <invoker+0x820>
		{
		char value[10];
		int a=ADC_Conversion(3);
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_Conversion>
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9e 87       	std	Y+14, r25	; 0x0e
    2a0e:	8d 87       	std	Y+13, r24	; 0x0d
		itoa(a, value,10 );
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	9e 01       	movw	r18, r28
    2a16:	22 5c       	subi	r18, 0xC2	; 194
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	b9 01       	movw	r22, r18
    2a1c:	4a e0       	ldi	r20, 0x0A	; 10
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
		serial_sendString(value);
    2a24:	ce 01       	movw	r24, r28
    2a26:	ce 96       	adiw	r24, 0x3e	; 62
    2a28:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2a2c:	ad c1       	rjmp	.+858    	; 0x2d88 <invoker+0xb7a>
		return;
		}
		if(!strcmp("getCenterWLS",opt))
    2a2e:	8b e1       	ldi	r24, 0x1B	; 27
    2a30:	93 e0       	ldi	r25, 0x03	; 3
    2a32:	fe 01       	movw	r30, r28
    2a34:	e5 5c       	subi	r30, 0xC5	; 197
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	20 81       	ld	r18, Z
    2a3a:	31 81       	ldd	r19, Z+1	; 0x01
    2a3c:	b9 01       	movw	r22, r18
    2a3e:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	b9 f4       	brne	.+46     	; 0x2a74 <invoker+0x866>
		{
		char value[10];
		int a=ADC_Conversion(2);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_Conversion>
    2a4c:	88 2f       	mov	r24, r24
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9c 87       	std	Y+12, r25	; 0x0c
    2a52:	8b 87       	std	Y+11, r24	; 0x0b
		itoa(a, value,10 );
    2a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a56:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a58:	9e 01       	movw	r18, r28
    2a5a:	28 5b       	subi	r18, 0xB8	; 184
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	b9 01       	movw	r22, r18
    2a60:	4a e0       	ldi	r20, 0x0A	; 10
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
		serial_sendString(value);
    2a68:	ce 01       	movw	r24, r28
    2a6a:	88 5b       	subi	r24, 0xB8	; 184
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2a72:	8a c1       	rjmp	.+788    	; 0x2d88 <invoker+0xb7a>
		return;
		}
		if(!strcmp("getRightWLS",opt))
    2a74:	88 e2       	ldi	r24, 0x28	; 40
    2a76:	93 e0       	ldi	r25, 0x03	; 3
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e5 5c       	subi	r30, 0xC5	; 197
    2a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7e:	20 81       	ld	r18, Z
    2a80:	31 81       	ldd	r19, Z+1	; 0x01
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	b9 f4       	brne	.+46     	; 0x2aba <invoker+0x8ac>
		{
		char value[10];
		int a=ADC_Conversion(1);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_Conversion>
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9a 87       	std	Y+10, r25	; 0x0a
    2a98:	89 87       	std	Y+9, r24	; 0x09
		itoa(a, value,10 );
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	9e 01       	movw	r18, r28
    2aa0:	2e 5a       	subi	r18, 0xAE	; 174
    2aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa4:	b9 01       	movw	r22, r18
    2aa6:	4a e0       	ldi	r20, 0x0A	; 10
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
		serial_sendString(value);
    2aae:	ce 01       	movw	r24, r28
    2ab0:	8e 5a       	subi	r24, 0xAE	; 174
    2ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2ab8:	67 c1       	rjmp	.+718    	; 0x2d88 <invoker+0xb7a>
		return;
		}
		if(!strcmp("getIRProx",opt))
    2aba:	84 e3       	ldi	r24, 0x34	; 52
    2abc:	93 e0       	ldi	r25, 0x03	; 3
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e5 5c       	subi	r30, 0xC5	; 197
    2ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac4:	20 81       	ld	r18, Z
    2ac6:	31 81       	ldd	r19, Z+1	; 0x01
    2ac8:	b9 01       	movw	r22, r18
    2aca:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	a9 f5       	brne	.+106    	; 0x2b3c <invoker+0x92e>
		{
			char sensorNo[4];
			serial_getString(sensorNo,4);
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	84 5a       	subi	r24, 0xA4	; 164
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	64 e0       	ldi	r22, 0x04	; 4
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			int sen=atoi(sensorNo);
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	84 5a       	subi	r24, 0xA4	; 164
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2aea:	98 87       	std	Y+8, r25	; 0x08
    2aec:	8f 83       	std	Y+7, r24	; 0x07
			if(sen>5||sen<1)
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	98 85       	ldd	r25, Y+8	; 0x08
    2af2:	86 30       	cpi	r24, 0x06	; 6
    2af4:	91 05       	cpc	r25, r1
    2af6:	2c f4       	brge	.+10     	; 0x2b02 <invoker+0x8f4>
    2af8:	8f 81       	ldd	r24, Y+7	; 0x07
    2afa:	98 85       	ldd	r25, Y+8	; 0x08
    2afc:	18 16       	cp	r1, r24
    2afe:	19 06       	cpc	r1, r25
    2b00:	2c f0       	brlt	.+10     	; 0x2b0c <invoker+0x8fe>
			{	lcd_string("wrong sensor no.");
    2b02:	8e e3       	ldi	r24, 0x3E	; 62
    2b04:	93 e0       	ldi	r25, 0x03	; 3
    2b06:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    2b0a:	3e c1       	rjmp	.+636    	; 0x2d88 <invoker+0xb7a>
				return;
			}
			char value[10];
			int a=ADC_Conversion(sen+3);
    2b0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0e:	8d 5f       	subi	r24, 0xFD	; 253
    2b10:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_Conversion>
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
			itoa(a, value,10 );
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	9e 01       	movw	r18, r28
    2b22:	20 5a       	subi	r18, 0xA0	; 160
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
    2b26:	b9 01       	movw	r22, r18
    2b28:	4a e0       	ldi	r20, 0x0A	; 10
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
			serial_sendString(value);
    2b30:	ce 01       	movw	r24, r28
    2b32:	80 5a       	subi	r24, 0xA0	; 160
    2b34:	9f 4f       	sbci	r25, 0xFF	; 255
    2b36:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2b3a:	26 c1       	rjmp	.+588    	; 0x2d88 <invoker+0xb7a>
			return;
		}
		if(!strcmp("getIRSharp",opt))
    2b3c:	8f e4       	ldi	r24, 0x4F	; 79
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	fe 01       	movw	r30, r28
    2b42:	e5 5c       	subi	r30, 0xC5	; 197
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	20 81       	ld	r18, Z
    2b48:	31 81       	ldd	r19, Z+1	; 0x01
    2b4a:	b9 01       	movw	r22, r18
    2b4c:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	a9 f5       	brne	.+106    	; 0x2bbe <invoker+0x9b0>
		{
			char sensorNo[4];
			serial_getString(sensorNo,4);
    2b54:	ce 01       	movw	r24, r28
    2b56:	86 59       	subi	r24, 0x96	; 150
    2b58:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5a:	64 e0       	ldi	r22, 0x04	; 4
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			int sen=atoi(sensorNo);
    2b62:	ce 01       	movw	r24, r28
    2b64:	86 59       	subi	r24, 0x96	; 150
    2b66:	9f 4f       	sbci	r25, 0xFF	; 255
    2b68:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
			if(sen>5||sen<1)
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	86 30       	cpi	r24, 0x06	; 6
    2b76:	91 05       	cpc	r25, r1
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <invoker+0x976>
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	18 16       	cp	r1, r24
    2b80:	19 06       	cpc	r1, r25
    2b82:	2c f0       	brlt	.+10     	; 0x2b8e <invoker+0x980>
			{	lcd_string("wrong sensor no.");
    2b84:	8e e3       	ldi	r24, 0x3E	; 62
    2b86:	93 e0       	ldi	r25, 0x03	; 3
    2b88:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    2b8c:	fd c0       	rjmp	.+506    	; 0x2d88 <invoker+0xb7a>
				return;
			}
			char value[10];
			int a=ADC_Conversion(sen+8);
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	88 5f       	subi	r24, 0xF8	; 248
    2b92:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_Conversion>
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
			itoa(a, value,10 );
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	22 59       	subi	r18, 0x92	; 146
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	b9 01       	movw	r22, r18
    2baa:	4a e0       	ldi	r20, 0x0A	; 10
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
			serial_sendString(value);
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	82 59       	subi	r24, 0x92	; 146
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2bbc:	e5 c0       	rjmp	.+458    	; 0x2d88 <invoker+0xb7a>
			return;
		}
		if(!strcmp("setVelocity",opt))
    2bbe:	8a e5       	ldi	r24, 0x5A	; 90
    2bc0:	93 e0       	ldi	r25, 0x03	; 3
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e5 5c       	subi	r30, 0xC5	; 197
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	20 81       	ld	r18, Z
    2bca:	31 81       	ldd	r19, Z+1	; 0x01
    2bcc:	b9 01       	movw	r22, r18
    2bce:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	49 f5       	brne	.+82     	; 0x2c28 <invoker+0xa1a>
		{
		
			char left[10],right[10];
			serial_getString(left,10);
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	88 58       	subi	r24, 0x88	; 136
    2bda:	9f 4f       	sbci	r25, 0xFF	; 255
    2bdc:	6a e0       	ldi	r22, 0x0A	; 10
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			serial_getString(right,10);
    2be4:	ce 01       	movw	r24, r28
    2be6:	8e 57       	subi	r24, 0x7E	; 126
    2be8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bea:	6a e0       	ldi	r22, 0x0A	; 10
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			velocity(atoi(left)%255,atoi(right)%255);
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	88 58       	subi	r24, 0x88	; 136
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2bfc:	2f ef       	ldi	r18, 0xFF	; 255
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	b9 01       	movw	r22, r18
    2c02:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <__divmodhi4>
    2c06:	18 2f       	mov	r17, r24
    2c08:	ce 01       	movw	r24, r28
    2c0a:	8e 57       	subi	r24, 0x7E	; 126
    2c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0e:	0e 94 4f 38 	call	0x709e	; 0x709e <atoi>
    2c12:	2f ef       	ldi	r18, 0xFF	; 255
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	b9 01       	movw	r22, r18
    2c18:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <__divmodhi4>
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	81 2f       	mov	r24, r17
    2c20:	69 2f       	mov	r22, r25
    2c22:	0e 94 8a 0b 	call	0x1714	; 0x1714 <velocity>
    2c26:	b0 c0       	rjmp	.+352    	; 0x2d88 <invoker+0xb7a>
			return;
		}
		if(!strcmp("listenForInterrupt",opt))
    2c28:	86 e6       	ldi	r24, 0x66	; 102
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e5 5c       	subi	r30, 0xC5	; 197
    2c30:	fe 4f       	sbci	r31, 0xFE	; 254
    2c32:	20 81       	ld	r18, Z
    2c34:	31 81       	ldd	r19, Z+1	; 0x01
    2c36:	b9 01       	movw	r22, r18
    2c38:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <invoker+0xa34>
    2c40:	64 c0       	rjmp	.+200    	; 0x2d0a <invoker+0xafc>
		{
			char intName[10],value[5];
			
			serial_getString(intName,10);
    2c42:	ce 01       	movw	r24, r28
    2c44:	84 57       	subi	r24, 0x74	; 116
    2c46:	9f 4f       	sbci	r25, 0xFF	; 255
    2c48:	6a e0       	ldi	r22, 0x0A	; 10
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			if(!(strcmp(intName,"left")))
    2c50:	ce 01       	movw	r24, r28
    2c52:	84 57       	subi	r24, 0x74	; 116
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	29 e7       	ldi	r18, 0x79	; 121
    2c58:	33 e0       	ldi	r19, 0x03	; 3
    2c5a:	b9 01       	movw	r22, r18
    2c5c:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	09 f5       	brne	.+66     	; 0x2ca6 <invoker+0xa98>
			{ 
				if(leftInt>0)
    2c64:	80 91 df 04 	lds	r24, 0x04DF
    2c68:	90 91 e0 04 	lds	r25, 0x04E0
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	b1 f0       	breq	.+44     	; 0x2c9c <invoker+0xa8e>
				{	
					itoa(leftInt, value, 5 );leftInt=0;
    2c70:	80 91 df 04 	lds	r24, 0x04DF
    2c74:	90 91 e0 04 	lds	r25, 0x04E0
    2c78:	9e 01       	movw	r18, r28
    2c7a:	2a 56       	subi	r18, 0x6A	; 106
    2c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7e:	b9 01       	movw	r22, r18
    2c80:	45 e0       	ldi	r20, 0x05	; 5
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    2c88:	10 92 e0 04 	sts	0x04E0, r1
    2c8c:	10 92 df 04 	sts	0x04DF, r1
					serial_sendString(value);
    2c90:	ce 01       	movw	r24, r28
    2c92:	8a 56       	subi	r24, 0x6A	; 106
    2c94:	9f 4f       	sbci	r25, 0xFF	; 255
    2c96:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2c9a:	76 c0       	rjmp	.+236    	; 0x2d88 <invoker+0xb7a>

				}
				else serial_sendString("0");
    2c9c:	8e e7       	ldi	r24, 0x7E	; 126
    2c9e:	93 e0       	ldi	r25, 0x03	; 3
    2ca0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2ca4:	71 c0       	rjmp	.+226    	; 0x2d88 <invoker+0xb7a>
			}
			else if(!(strcmp(intName,"right")))
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	84 57       	subi	r24, 0x74	; 116
    2caa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cac:	20 e8       	ldi	r18, 0x80	; 128
    2cae:	33 e0       	ldi	r19, 0x03	; 3
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	09 f5       	brne	.+66     	; 0x2cfc <invoker+0xaee>
			{ 
				if(rightInt>0)
    2cba:	80 91 86 05 	lds	r24, 0x0586
    2cbe:	90 91 87 05 	lds	r25, 0x0587
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	b1 f0       	breq	.+44     	; 0x2cf2 <invoker+0xae4>
				{	
					itoa(rightInt, value, 5 );rightInt=0;
    2cc6:	80 91 86 05 	lds	r24, 0x0586
    2cca:	90 91 87 05 	lds	r25, 0x0587
    2cce:	9e 01       	movw	r18, r28
    2cd0:	2a 56       	subi	r18, 0x6A	; 106
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	b9 01       	movw	r22, r18
    2cd6:	45 e0       	ldi	r20, 0x05	; 5
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
    2cde:	10 92 87 05 	sts	0x0587, r1
    2ce2:	10 92 86 05 	sts	0x0586, r1
					serial_sendString(value);
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	8a 56       	subi	r24, 0x6A	; 106
    2cea:	9f 4f       	sbci	r25, 0xFF	; 255
    2cec:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2cf0:	4b c0       	rjmp	.+150    	; 0x2d88 <invoker+0xb7a>

				}
				else serial_sendString("0");
    2cf2:	8e e7       	ldi	r24, 0x7E	; 126
    2cf4:	93 e0       	ldi	r25, 0x03	; 3
    2cf6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <serial_sendString>
    2cfa:	46 c0       	rjmp	.+140    	; 0x2d88 <invoker+0xb7a>
			}
			else
			{ 
				lcd_clear();
    2cfc:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
				lcd_string("wrong interrupt"); 
    2d00:	86 e8       	ldi	r24, 0x86	; 134
    2d02:	93 e0       	ldi	r25, 0x03	; 3
    2d04:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    2d08:	3f c0       	rjmp	.+126    	; 0x2d88 <invoker+0xb7a>
			}
			return;

		}
		if(!strcmp("resetInterrupt",opt))
    2d0a:	86 e9       	ldi	r24, 0x96	; 150
    2d0c:	93 e0       	ldi	r25, 0x03	; 3
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e5 5c       	subi	r30, 0xC5	; 197
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	20 81       	ld	r18, Z
    2d16:	31 81       	ldd	r19, Z+1	; 0x01
    2d18:	b9 01       	movw	r22, r18
    2d1a:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	61 f5       	brne	.+88     	; 0x2d7a <invoker+0xb6c>
		{
			char intName[10];
			
			serial_getString(intName,10);
    2d22:	ce 01       	movw	r24, r28
    2d24:	85 56       	subi	r24, 0x65	; 101
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	6a e0       	ldi	r22, 0x0A	; 10
    2d2a:	70 e0       	ldi	r23, 0x00	; 0
    2d2c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
			if(!(strcmp(intName,"left")))
    2d30:	ce 01       	movw	r24, r28
    2d32:	85 56       	subi	r24, 0x65	; 101
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	29 e7       	ldi	r18, 0x79	; 121
    2d38:	33 e0       	ldi	r19, 0x03	; 3
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	29 f4       	brne	.+10     	; 0x2d4e <invoker+0xb40>
			{ leftInt=0;
    2d44:	10 92 e0 04 	sts	0x04E0, r1
    2d48:	10 92 df 04 	sts	0x04DF, r1
    2d4c:	1d c0       	rjmp	.+58     	; 0x2d88 <invoker+0xb7a>
			}
			else if(!(strcmp(intName,"right")))
    2d4e:	ce 01       	movw	r24, r28
    2d50:	85 56       	subi	r24, 0x65	; 101
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	20 e8       	ldi	r18, 0x80	; 128
    2d56:	33 e0       	ldi	r19, 0x03	; 3
    2d58:	b9 01       	movw	r22, r18
    2d5a:	0e 94 76 38 	call	0x70ec	; 0x70ec <strcmp>
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	29 f4       	brne	.+10     	; 0x2d6c <invoker+0xb5e>
			{ rightInt=0;
    2d62:	10 92 87 05 	sts	0x0587, r1
    2d66:	10 92 86 05 	sts	0x0586, r1
    2d6a:	0e c0       	rjmp	.+28     	; 0x2d88 <invoker+0xb7a>
			}
			else 
			{ 
				lcd_clear();
    2d6c:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
				lcd_string("wrong interrupt"); 
    2d70:	86 e8       	ldi	r24, 0x86	; 134
    2d72:	93 e0       	ldi	r25, 0x03	; 3
    2d74:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    2d78:	07 c0       	rjmp	.+14     	; 0x2d88 <invoker+0xb7a>
			}
			return;
		}


		lcd_string(opt);
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e5 5c       	subi	r30, 0xC5	; 197
    2d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>


}
    2d88:	c4 5c       	subi	r28, 0xC4	; 196
    2d8a:	de 4f       	sbci	r29, 0xFE	; 254
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <serial_getString>:

 
void serial_getString(char *x , int n)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	2a 97       	sbiw	r28, 0x0a	; 10
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	98 87       	std	Y+8, r25	; 0x08
    2db6:	8f 83       	std	Y+7, r24	; 0x07
    2db8:	7a 87       	std	Y+10, r23	; 0x0a
    2dba:	69 87       	std	Y+9, r22	; 0x09
    int i;
    charPack *runner=serialDataStart, *temp;
    2dbc:	80 91 e1 04 	lds	r24, 0x04E1
    2dc0:	90 91 e2 04 	lds	r25, 0x04E2
    2dc4:	9c 83       	std	Y+4, r25	; 0x04
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
    for(i=0;i<n;i++)
    2dc8:	1e 82       	std	Y+6, r1	; 0x06
    2dca:	1d 82       	std	Y+5, r1	; 0x05
    2dcc:	6e c0       	rjmp	.+220    	; 0x2eaa <serial_getString+0x10a>
    {   
	//	lcd_string("reading ");
		
        if(runner==NULL || serial_lock==1) {i=-1; serial_lock=0;runner=serialDataStart;continue;}
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	39 f0       	breq	.+14     	; 0x2de4 <serial_getString+0x44>
    2dd6:	80 91 e5 04 	lds	r24, 0x04E5
    2dda:	90 91 e6 04 	lds	r25, 0x04E6
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	91 05       	cpc	r25, r1
    2de2:	79 f4       	brne	.+30     	; 0x2e02 <serial_getString+0x62>
    2de4:	8f ef       	ldi	r24, 0xFF	; 255
    2de6:	9f ef       	ldi	r25, 0xFF	; 255
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	10 92 e6 04 	sts	0x04E6, r1
    2df0:	10 92 e5 04 	sts	0x04E5, r1
    2df4:	80 91 e1 04 	lds	r24, 0x04E1
    2df8:	90 91 e2 04 	lds	r25, 0x04E2
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
    2e00:	4f c0       	rjmp	.+158    	; 0x2ea0 <serial_getString+0x100>
        else if(runner->data=='#') {
    2e02:	eb 81       	ldd	r30, Y+3	; 0x03
    2e04:	fc 81       	ldd	r31, Y+4	; 0x04
    2e06:	80 81       	ld	r24, Z
    2e08:	83 32       	cpi	r24, 0x23	; 35
    2e0a:	c9 f5       	brne	.+114    	; 0x2e7e <serial_getString+0xde>
            x[i]='\0';
    2e0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e10:	8f 81       	ldd	r24, Y+7	; 0x07
    2e12:	98 85       	ldd	r25, Y+8	; 0x08
    2e14:	fc 01       	movw	r30, r24
    2e16:	e2 0f       	add	r30, r18
    2e18:	f3 1f       	adc	r31, r19
    2e1a:	10 82       	st	Z, r1
            runner=serialDataStart;
    2e1c:	80 91 e1 04 	lds	r24, 0x04E1
    2e20:	90 91 e2 04 	lds	r25, 0x04E2
    2e24:	9c 83       	std	Y+4, r25	; 0x04
    2e26:	8b 83       	std	Y+3, r24	; 0x03
    2e28:	0e c0       	rjmp	.+28     	; 0x2e46 <serial_getString+0xa6>
            while(runner->data!='#')
            { temp=runner;
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2e:	9a 83       	std	Y+2, r25	; 0x02
    2e30:	89 83       	std	Y+1, r24	; 0x01
              runner=runner->next;
    2e32:	eb 81       	ldd	r30, Y+3	; 0x03
    2e34:	fc 81       	ldd	r31, Y+4	; 0x04
    2e36:	81 81       	ldd	r24, Z+1	; 0x01
    2e38:	92 81       	ldd	r25, Z+2	; 0x02
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
              free(temp);       
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	0e 94 f7 37 	call	0x6fee	; 0x6fee <free>
		
        if(runner==NULL || serial_lock==1) {i=-1; serial_lock=0;runner=serialDataStart;continue;}
        else if(runner->data=='#') {
            x[i]='\0';
            runner=serialDataStart;
            while(runner->data!='#')
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	80 81       	ld	r24, Z
    2e4c:	83 32       	cpi	r24, 0x23	; 35
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <serial_getString+0x8a>
            { temp=runner;
              runner=runner->next;
              free(temp);       
            }
            serialDataStart=runner->next;
    2e50:	eb 81       	ldd	r30, Y+3	; 0x03
    2e52:	fc 81       	ldd	r31, Y+4	; 0x04
    2e54:	81 81       	ldd	r24, Z+1	; 0x01
    2e56:	92 81       	ldd	r25, Z+2	; 0x02
    2e58:	90 93 e2 04 	sts	0x04E2, r25
    2e5c:	80 93 e1 04 	sts	0x04E1, r24
			if(serialDataStart==NULL) serialDataEnd=NULL;
    2e60:	80 91 e1 04 	lds	r24, 0x04E1
    2e64:	90 91 e2 04 	lds	r25, 0x04E2
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	21 f4       	brne	.+8      	; 0x2e74 <serial_getString+0xd4>
    2e6c:	10 92 e4 04 	sts	0x04E4, r1
    2e70:	10 92 e3 04 	sts	0x04E3, r1
            free(runner);
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	0e 94 f7 37 	call	0x6fee	; 0x6fee <free>
    2e7c:	1e c0       	rjmp	.+60     	; 0x2eba <serial_getString+0x11a>
            return;                   
        }
        else
        {
            x[i]=runner->data;
    2e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e80:	3e 81       	ldd	r19, Y+6	; 0x06
    2e82:	8f 81       	ldd	r24, Y+7	; 0x07
    2e84:	98 85       	ldd	r25, Y+8	; 0x08
    2e86:	dc 01       	movw	r26, r24
    2e88:	a2 0f       	add	r26, r18
    2e8a:	b3 1f       	adc	r27, r19
    2e8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e90:	80 81       	ld	r24, Z
    2e92:	8c 93       	st	X, r24
			//lcd_wr_char(x[i]);
			runner=runner->next;			
    2e94:	eb 81       	ldd	r30, Y+3	; 0x03
    2e96:	fc 81       	ldd	r31, Y+4	; 0x04
    2e98:	81 81       	ldd	r24, Z+1	; 0x01
    2e9a:	92 81       	ldd	r25, Z+2	; 0x02
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
 
void serial_getString(char *x , int n)
{
    int i;
    charPack *runner=serialDataStart, *temp;
    for(i=0;i<n;i++)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	2d 81       	ldd	r18, Y+5	; 0x05
    2eac:	3e 81       	ldd	r19, Y+6	; 0x06
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	28 17       	cp	r18, r24
    2eb4:	39 07       	cpc	r19, r25
    2eb6:	0c f4       	brge	.+2      	; 0x2eba <serial_getString+0x11a>
    2eb8:	8a cf       	rjmp	.-236    	; 0x2dce <serial_getString+0x2e>
			//lcd_wr_char(x[i]);
			runner=runner->next;			
        }
    }
     
}
    2eba:	2a 96       	adiw	r28, 0x0a	; 10
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <lcd_num>:
/////////////zigbeeeeeeeeeeee
void lcd_num(int x)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	2d 97       	sbiw	r28, 0x0d	; 13
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	9d 87       	std	Y+13, r25	; 0x0d
    2ee2:	8c 87       	std	Y+12, r24	; 0x0c
char cVal[10];
itoa(x,cVal,10);
    2ee4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ee6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ee8:	9e 01       	movw	r18, r28
    2eea:	2e 5f       	subi	r18, 0xFE	; 254
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	b9 01       	movw	r22, r18
    2ef0:	4a e0       	ldi	r20, 0x0A	; 10
    2ef2:	50 e0       	ldi	r21, 0x00	; 0
    2ef4:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
lcd_string(cVal);
    2ef8:	ce 01       	movw	r24, r28
    2efa:	02 96       	adiw	r24, 0x02	; 2
    2efc:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
char a=" ";
    2f00:	8c e1       	ldi	r24, 0x1C	; 28
    2f02:	92 e0       	ldi	r25, 0x02	; 2
    2f04:	89 83       	std	Y+1, r24	; 0x01
lcd_wr_char(a);
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
}
    2f0c:	2d 96       	adiw	r28, 0x0d	; 13
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <turnRatio>:
///timerrrrrrrrrrrrr



float turnRatio(float radius,int dir)
{//radius is in cm
    2f1e:	ef 92       	push	r14
    2f20:	ff 92       	push	r15
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	2c 97       	sbiw	r28, 0x0c	; 12
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	6f 83       	std	Y+7, r22	; 0x07
    2f3c:	78 87       	std	Y+8, r23	; 0x08
    2f3e:	89 87       	std	Y+9, r24	; 0x09
    2f40:	9a 87       	std	Y+10, r25	; 0x0a
    2f42:	5c 87       	std	Y+12, r21	; 0x0c
    2f44:	4b 87       	std	Y+11, r20	; 0x0b

	int w;
	w=WHEEL_DIST;
    2f46:	8f e0       	ldi	r24, 0x0F	; 15
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
	float ratio;
		ratio=(float) ((float)(radius+w/2.0))/((float) (radius-w/2.0));
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	aa 27       	eor	r26, r26
    2f54:	97 fd       	sbrc	r25, 7
    2f56:	a0 95       	com	r26
    2f58:	ba 2f       	mov	r27, r26
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e0       	ldi	r20, 0x00	; 0
    2f70:	50 e4       	ldi	r21, 0x40	; 64
    2f72:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	bc 01       	movw	r22, r24
    2f7c:	cd 01       	movw	r24, r26
    2f7e:	2f 81       	ldd	r18, Y+7	; 0x07
    2f80:	38 85       	ldd	r19, Y+8	; 0x08
    2f82:	49 85       	ldd	r20, Y+9	; 0x09
    2f84:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f86:	0e 94 c7 31 	call	0x638e	; 0x638e <__addsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	7c 01       	movw	r14, r24
    2f90:	8d 01       	movw	r16, r26
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	aa 27       	eor	r26, r26
    2f98:	97 fd       	sbrc	r25, 7
    2f9a:	a0 95       	com	r26
    2f9c:	ba 2f       	mov	r27, r26
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	50 ec       	ldi	r21, 0xC0	; 192
    2fb6:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    2fc4:	38 85       	ldd	r19, Y+8	; 0x08
    2fc6:	49 85       	ldd	r20, Y+9	; 0x09
    2fc8:	5a 85       	ldd	r21, Y+10	; 0x0a
    2fca:	0e 94 c7 31 	call	0x638e	; 0x638e <__addsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	ad 01       	movw	r20, r26
    2fd6:	c8 01       	movw	r24, r16
    2fd8:	b7 01       	movw	r22, r14
    2fda:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	ab 83       	std	Y+3, r26	; 0x03
    2fe8:	bc 83       	std	Y+4, r27	; 0x04
		if(dir==2)//means left
    2fea:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fec:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fee:	82 30       	cpi	r24, 0x02	; 2
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	81 f4       	brne	.+32     	; 0x3014 <turnRatio+0xf6>
		{	ratio=1.0/ratio;
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	80 e8       	ldi	r24, 0x80	; 128
    2ffa:	9f e3       	ldi	r25, 0x3F	; 63
    2ffc:	29 81       	ldd	r18, Y+1	; 0x01
    2ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    3000:	4b 81       	ldd	r20, Y+3	; 0x03
    3002:	5c 81       	ldd	r21, Y+4	; 0x04
    3004:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	9a 83       	std	Y+2, r25	; 0x02
    3010:	ab 83       	std	Y+3, r26	; 0x03
    3012:	bc 83       	std	Y+4, r27	; 0x04
		}
	return ratio;
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	9a 81       	ldd	r25, Y+2	; 0x02
    3018:	ab 81       	ldd	r26, Y+3	; 0x03
    301a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	2c 96       	adiw	r28, 0x0c	; 12
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	08 95       	ret

0000303a <strictForward>:

void strictForward()
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
botRatio=1.0;
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a0 e8       	ldi	r26, 0x80	; 128
    3048:	bf e3       	ldi	r27, 0x3F	; 63
    304a:	80 93 03 05 	sts	0x0503, r24
    304e:	90 93 04 05 	sts	0x0504, r25
    3052:	a0 93 05 05 	sts	0x0505, r26
    3056:	b0 93 06 05 	sts	0x0506, r27

functionFlag=1;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	80 93 d7 04 	sts	0x04D7, r24
    3060:	10 92 d8 04 	sts	0x04D8, r1
    3064:	10 92 d9 04 	sts	0x04D9, r1
    3068:	10 92 da 04 	sts	0x04DA, r1
    306c:	10 92 db 04 	sts	0x04DB, r1
    3070:	10 92 dc 04 	sts	0x04DC, r1
    3074:	10 92 dd 04 	sts	0x04DD, r1
    3078:	10 92 de 04 	sts	0x04DE, r1
splRightCounter=curRightCounter;
    307c:	20 91 eb 04 	lds	r18, 0x04EB
    3080:	30 91 ec 04 	lds	r19, 0x04EC
    3084:	40 91 ed 04 	lds	r20, 0x04ED
    3088:	50 91 ee 04 	lds	r21, 0x04EE
    308c:	60 91 ef 04 	lds	r22, 0x04EF
    3090:	70 91 f0 04 	lds	r23, 0x04F0
    3094:	80 91 f1 04 	lds	r24, 0x04F1
    3098:	90 91 f2 04 	lds	r25, 0x04F2
    309c:	20 93 14 05 	sts	0x0514, r18
    30a0:	30 93 15 05 	sts	0x0515, r19
    30a4:	40 93 16 05 	sts	0x0516, r20
    30a8:	50 93 17 05 	sts	0x0517, r21
    30ac:	60 93 18 05 	sts	0x0518, r22
    30b0:	70 93 19 05 	sts	0x0519, r23
    30b4:	80 93 1a 05 	sts	0x051A, r24
    30b8:	90 93 1b 05 	sts	0x051B, r25
splLeftCounter=curLeftCounter;
    30bc:	20 91 fb 04 	lds	r18, 0x04FB
    30c0:	30 91 fc 04 	lds	r19, 0x04FC
    30c4:	40 91 fd 04 	lds	r20, 0x04FD
    30c8:	50 91 fe 04 	lds	r21, 0x04FE
    30cc:	60 91 ff 04 	lds	r22, 0x04FF
    30d0:	70 91 00 05 	lds	r23, 0x0500
    30d4:	80 91 01 05 	lds	r24, 0x0501
    30d8:	90 91 02 05 	lds	r25, 0x0502
    30dc:	20 93 f3 04 	sts	0x04F3, r18
    30e0:	30 93 f4 04 	sts	0x04F4, r19
    30e4:	40 93 f5 04 	sts	0x04F5, r20
    30e8:	50 93 f6 04 	sts	0x04F6, r21
    30ec:	60 93 f7 04 	sts	0x04F7, r22
    30f0:	70 93 f8 04 	sts	0x04F8, r23
    30f4:	80 93 f9 04 	sts	0x04F9, r24
    30f8:	90 93 fa 04 	sts	0x04FA, r25
forward();
    30fc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <forward>

}
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <strictBackward>:
void strictBackward()
{
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
botRatio=1.0;
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a0 e8       	ldi	r26, 0x80	; 128
    3114:	bf e3       	ldi	r27, 0x3F	; 63
    3116:	80 93 03 05 	sts	0x0503, r24
    311a:	90 93 04 05 	sts	0x0504, r25
    311e:	a0 93 05 05 	sts	0x0505, r26
    3122:	b0 93 06 05 	sts	0x0506, r27

functionFlag=1;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	80 93 d7 04 	sts	0x04D7, r24
    312c:	10 92 d8 04 	sts	0x04D8, r1
    3130:	10 92 d9 04 	sts	0x04D9, r1
    3134:	10 92 da 04 	sts	0x04DA, r1
    3138:	10 92 db 04 	sts	0x04DB, r1
    313c:	10 92 dc 04 	sts	0x04DC, r1
    3140:	10 92 dd 04 	sts	0x04DD, r1
    3144:	10 92 de 04 	sts	0x04DE, r1
splRightCounter=curRightCounter;
    3148:	20 91 eb 04 	lds	r18, 0x04EB
    314c:	30 91 ec 04 	lds	r19, 0x04EC
    3150:	40 91 ed 04 	lds	r20, 0x04ED
    3154:	50 91 ee 04 	lds	r21, 0x04EE
    3158:	60 91 ef 04 	lds	r22, 0x04EF
    315c:	70 91 f0 04 	lds	r23, 0x04F0
    3160:	80 91 f1 04 	lds	r24, 0x04F1
    3164:	90 91 f2 04 	lds	r25, 0x04F2
    3168:	20 93 14 05 	sts	0x0514, r18
    316c:	30 93 15 05 	sts	0x0515, r19
    3170:	40 93 16 05 	sts	0x0516, r20
    3174:	50 93 17 05 	sts	0x0517, r21
    3178:	60 93 18 05 	sts	0x0518, r22
    317c:	70 93 19 05 	sts	0x0519, r23
    3180:	80 93 1a 05 	sts	0x051A, r24
    3184:	90 93 1b 05 	sts	0x051B, r25
splLeftCounter=curLeftCounter;
    3188:	20 91 fb 04 	lds	r18, 0x04FB
    318c:	30 91 fc 04 	lds	r19, 0x04FC
    3190:	40 91 fd 04 	lds	r20, 0x04FD
    3194:	50 91 fe 04 	lds	r21, 0x04FE
    3198:	60 91 ff 04 	lds	r22, 0x04FF
    319c:	70 91 00 05 	lds	r23, 0x0500
    31a0:	80 91 01 05 	lds	r24, 0x0501
    31a4:	90 91 02 05 	lds	r25, 0x0502
    31a8:	20 93 f3 04 	sts	0x04F3, r18
    31ac:	30 93 f4 04 	sts	0x04F4, r19
    31b0:	40 93 f5 04 	sts	0x04F5, r20
    31b4:	50 93 f6 04 	sts	0x04F6, r21
    31b8:	60 93 f7 04 	sts	0x04F7, r22
    31bc:	70 93 f8 04 	sts	0x04F8, r23
    31c0:	80 93 f9 04 	sts	0x04F9, r24
    31c4:	90 93 fa 04 	sts	0x04FA, r25
back();
    31c8:	0e 94 ce 0b 	call	0x179c	; 0x179c <back>

}
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <rollLCD>:

void rollLCD(char str[])
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	0f 92       	push	r0
    31d8:	0f 92       	push	r0
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
strcpy(_rollLCD,str);
    31e2:	80 e2       	ldi	r24, 0x20	; 32
    31e4:	95 e0       	ldi	r25, 0x05	; 5
    31e6:	29 81       	ldd	r18, Y+1	; 0x01
    31e8:	3a 81       	ldd	r19, Y+2	; 0x02
    31ea:	b9 01       	movw	r22, r18
    31ec:	0e 94 7f 38 	call	0x70fe	; 0x70fe <strcpy>
strcat(_rollLCD,"               ");
    31f0:	80 e2       	ldi	r24, 0x20	; 32
    31f2:	95 e0       	ldi	r25, 0x05	; 5
    31f4:	0e 94 86 38 	call	0x710c	; 0x710c <strlen>
    31f8:	80 5e       	subi	r24, 0xE0	; 224
    31fa:	9a 4f       	sbci	r25, 0xFA	; 250
    31fc:	25 ea       	ldi	r18, 0xA5	; 165
    31fe:	33 e0       	ldi	r19, 0x03	; 3
    3200:	b9 01       	movw	r22, r18
    3202:	40 e1       	ldi	r20, 0x10	; 16
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	0e 94 6d 38 	call	0x70da	; 0x70da <memcpy>
lcd_clear();
    320a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
lcd_cursor(1,1);
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	61 e0       	ldi	r22, 0x01	; 1
    3212:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
lcd_string(_rollLCD);
    3216:	80 e2       	ldi	r24, 0x20	; 32
    3218:	95 e0       	ldi	r25, 0x05	; 5
    321a:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
_LCDpos=1;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	90 93 98 05 	sts	0x0598, r25
    3226:	80 93 97 05 	sts	0x0597, r24
_rollLCDFlag=1;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	90 93 08 05 	sts	0x0508, r25
    3232:	80 93 07 05 	sts	0x0507, r24

}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <moveOnArc>:
void moveOnArc(float radius,int dir)
{
    3240:	1f 93       	push	r17
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	62 97       	sbiw	r28, 0x12	; 18
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	6d 87       	std	Y+13, r22	; 0x0d
    3258:	7e 87       	std	Y+14, r23	; 0x0e
    325a:	8f 87       	std	Y+15, r24	; 0x0f
    325c:	98 8b       	std	Y+16, r25	; 0x10
    325e:	5a 8b       	std	Y+18, r21	; 0x12
    3260:	49 8b       	std	Y+17, r20	; 0x11

float ratio,newLeftVel,newRightVel;
ratio=turnRatio(radius,dir);
    3262:	8d 85       	ldd	r24, Y+13	; 0x0d
    3264:	9e 85       	ldd	r25, Y+14	; 0x0e
    3266:	af 85       	ldd	r26, Y+15	; 0x0f
    3268:	b8 89       	ldd	r27, Y+16	; 0x10
    326a:	29 89       	ldd	r18, Y+17	; 0x11
    326c:	3a 89       	ldd	r19, Y+18	; 0x12
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	a9 01       	movw	r20, r18
    3274:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <turnRatio>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	89 87       	std	Y+9, r24	; 0x09
    327e:	9a 87       	std	Y+10, r25	; 0x0a
    3280:	ab 87       	std	Y+11, r26	; 0x0b
    3282:	bc 87       	std	Y+12, r27	; 0x0c

functionFlag=1;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	80 93 d7 04 	sts	0x04D7, r24
    328a:	10 92 d8 04 	sts	0x04D8, r1
    328e:	10 92 d9 04 	sts	0x04D9, r1
    3292:	10 92 da 04 	sts	0x04DA, r1
    3296:	10 92 db 04 	sts	0x04DB, r1
    329a:	10 92 dc 04 	sts	0x04DC, r1
    329e:	10 92 dd 04 	sts	0x04DD, r1
    32a2:	10 92 de 04 	sts	0x04DE, r1
botRatio=ratio;
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    32ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    32ae:	80 93 03 05 	sts	0x0503, r24
    32b2:	90 93 04 05 	sts	0x0504, r25
    32b6:	a0 93 05 05 	sts	0x0505, r26
    32ba:	b0 93 06 05 	sts	0x0506, r27

leftVel=150;
    32be:	86 e9       	ldi	r24, 0x96	; 150
    32c0:	80 93 09 05 	sts	0x0509, r24
rightVel=150;
    32c4:	86 e9       	ldi	r24, 0x96	; 150
    32c6:	80 93 0c 05 	sts	0x050C, r24
	if(ratio>1)
    32ca:	69 85       	ldd	r22, Y+9	; 0x09
    32cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    32ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    32d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e8       	ldi	r20, 0x80	; 128
    32d8:	5f e3       	ldi	r21, 0x3F	; 63
    32da:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    32de:	18 16       	cp	r1, r24
    32e0:	0c f0       	brlt	.+2      	; 0x32e4 <moveOnArc+0xa4>
    32e2:	4e c0       	rjmp	.+156    	; 0x3380 <moveOnArc+0x140>
	{
		newRightVel=rightVel;
    32e4:	80 91 0c 05 	lds	r24, 0x050C
    32e8:	88 2f       	mov	r24, r24
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	ab 83       	std	Y+3, r26	; 0x03
    3302:	bc 83       	std	Y+4, r27	; 0x04
		newLeftVel=(float) newRightVel*ratio;
    3304:	69 81       	ldd	r22, Y+1	; 0x01
    3306:	7a 81       	ldd	r23, Y+2	; 0x02
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	9c 81       	ldd	r25, Y+4	; 0x04
    330c:	29 85       	ldd	r18, Y+9	; 0x09
    330e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3310:	4b 85       	ldd	r20, Y+11	; 0x0b
    3312:	5c 85       	ldd	r21, Y+12	; 0x0c
    3314:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	8d 83       	std	Y+5, r24	; 0x05
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	af 83       	std	Y+7, r26	; 0x07
    3322:	b8 87       	std	Y+8, r27	; 0x08
		if(newLeftVel>254)
    3324:	6d 81       	ldd	r22, Y+5	; 0x05
    3326:	7e 81       	ldd	r23, Y+6	; 0x06
    3328:	8f 81       	ldd	r24, Y+7	; 0x07
    332a:	98 85       	ldd	r25, Y+8	; 0x08
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	4e e7       	ldi	r20, 0x7E	; 126
    3332:	53 e4       	ldi	r21, 0x43	; 67
    3334:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	0c f0       	brlt	.+2      	; 0x333e <moveOnArc+0xfe>
    333c:	6d c0       	rjmp	.+218    	; 0x3418 <moveOnArc+0x1d8>
		{
			newLeftVel=leftVel;
    333e:	80 91 09 05 	lds	r24, 0x0509
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a0 e0       	ldi	r26, 0x00	; 0
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	9e 83       	std	Y+6, r25	; 0x06
    335a:	af 83       	std	Y+7, r26	; 0x07
    335c:	b8 87       	std	Y+8, r27	; 0x08
			newRightVel=(float)newLeftVel/ratio;
    335e:	6d 81       	ldd	r22, Y+5	; 0x05
    3360:	7e 81       	ldd	r23, Y+6	; 0x06
    3362:	8f 81       	ldd	r24, Y+7	; 0x07
    3364:	98 85       	ldd	r25, Y+8	; 0x08
    3366:	29 85       	ldd	r18, Y+9	; 0x09
    3368:	3a 85       	ldd	r19, Y+10	; 0x0a
    336a:	4b 85       	ldd	r20, Y+11	; 0x0b
    336c:	5c 85       	ldd	r21, Y+12	; 0x0c
    336e:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	ab 83       	std	Y+3, r26	; 0x03
    337c:	bc 83       	std	Y+4, r27	; 0x04
    337e:	4c c0       	rjmp	.+152    	; 0x3418 <moveOnArc+0x1d8>
		}
	}
	else 
	{
		newLeftVel=leftVel;
    3380:	80 91 09 05 	lds	r24, 0x0509
    3384:	88 2f       	mov	r24, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e0       	ldi	r26, 0x00	; 0
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	bc 01       	movw	r22, r24
    338e:	cd 01       	movw	r24, r26
    3390:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	8d 83       	std	Y+5, r24	; 0x05
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	af 83       	std	Y+7, r26	; 0x07
    339e:	b8 87       	std	Y+8, r27	; 0x08
		newRightVel=(float) newLeftVel/ratio;
    33a0:	6d 81       	ldd	r22, Y+5	; 0x05
    33a2:	7e 81       	ldd	r23, Y+6	; 0x06
    33a4:	8f 81       	ldd	r24, Y+7	; 0x07
    33a6:	98 85       	ldd	r25, Y+8	; 0x08
    33a8:	29 85       	ldd	r18, Y+9	; 0x09
    33aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    33ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    33ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    33b0:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	89 83       	std	Y+1, r24	; 0x01
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	ab 83       	std	Y+3, r26	; 0x03
    33be:	bc 83       	std	Y+4, r27	; 0x04
		if(newRightVel>254)
    33c0:	69 81       	ldd	r22, Y+1	; 0x01
    33c2:	7a 81       	ldd	r23, Y+2	; 0x02
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	9c 81       	ldd	r25, Y+4	; 0x04
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4e e7       	ldi	r20, 0x7E	; 126
    33ce:	53 e4       	ldi	r21, 0x43	; 67
    33d0:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    33d4:	18 16       	cp	r1, r24
    33d6:	04 f5       	brge	.+64     	; 0x3418 <moveOnArc+0x1d8>
		{
			newRightVel=rightVel;
    33d8:	80 91 0c 05 	lds	r24, 0x050C
    33dc:	88 2f       	mov	r24, r24
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	a0 e0       	ldi	r26, 0x00	; 0
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	bc 01       	movw	r22, r24
    33e6:	cd 01       	movw	r24, r26
    33e8:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	ab 83       	std	Y+3, r26	; 0x03
    33f6:	bc 83       	std	Y+4, r27	; 0x04
			newLeftVel=(float)newRightVel*ratio;
    33f8:	69 81       	ldd	r22, Y+1	; 0x01
    33fa:	7a 81       	ldd	r23, Y+2	; 0x02
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3400:	29 85       	ldd	r18, Y+9	; 0x09
    3402:	3a 85       	ldd	r19, Y+10	; 0x0a
    3404:	4b 85       	ldd	r20, Y+11	; 0x0b
    3406:	5c 85       	ldd	r21, Y+12	; 0x0c
    3408:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	af 83       	std	Y+7, r26	; 0x07
    3416:	b8 87       	std	Y+8, r27	; 0x08
		}
	}
splLeftCounter=curLeftCounter;
    3418:	20 91 fb 04 	lds	r18, 0x04FB
    341c:	30 91 fc 04 	lds	r19, 0x04FC
    3420:	40 91 fd 04 	lds	r20, 0x04FD
    3424:	50 91 fe 04 	lds	r21, 0x04FE
    3428:	60 91 ff 04 	lds	r22, 0x04FF
    342c:	70 91 00 05 	lds	r23, 0x0500
    3430:	80 91 01 05 	lds	r24, 0x0501
    3434:	90 91 02 05 	lds	r25, 0x0502
    3438:	20 93 f3 04 	sts	0x04F3, r18
    343c:	30 93 f4 04 	sts	0x04F4, r19
    3440:	40 93 f5 04 	sts	0x04F5, r20
    3444:	50 93 f6 04 	sts	0x04F6, r21
    3448:	60 93 f7 04 	sts	0x04F7, r22
    344c:	70 93 f8 04 	sts	0x04F8, r23
    3450:	80 93 f9 04 	sts	0x04F9, r24
    3454:	90 93 fa 04 	sts	0x04FA, r25
splRightCounter=curRightCounter;
    3458:	20 91 eb 04 	lds	r18, 0x04EB
    345c:	30 91 ec 04 	lds	r19, 0x04EC
    3460:	40 91 ed 04 	lds	r20, 0x04ED
    3464:	50 91 ee 04 	lds	r21, 0x04EE
    3468:	60 91 ef 04 	lds	r22, 0x04EF
    346c:	70 91 f0 04 	lds	r23, 0x04F0
    3470:	80 91 f1 04 	lds	r24, 0x04F1
    3474:	90 91 f2 04 	lds	r25, 0x04F2
    3478:	20 93 14 05 	sts	0x0514, r18
    347c:	30 93 15 05 	sts	0x0515, r19
    3480:	40 93 16 05 	sts	0x0516, r20
    3484:	50 93 17 05 	sts	0x0517, r21
    3488:	60 93 18 05 	sts	0x0518, r22
    348c:	70 93 19 05 	sts	0x0519, r23
    3490:	80 93 1a 05 	sts	0x051A, r24
    3494:	90 93 1b 05 	sts	0x051B, r25

velocity((unsigned char) newLeftVel,(unsigned char) newRightVel);
    3498:	6d 81       	ldd	r22, Y+5	; 0x05
    349a:	7e 81       	ldd	r23, Y+6	; 0x06
    349c:	8f 81       	ldd	r24, Y+7	; 0x07
    349e:	98 85       	ldd	r25, Y+8	; 0x08
    34a0:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	18 2f       	mov	r17, r24
    34aa:	69 81       	ldd	r22, Y+1	; 0x01
    34ac:	7a 81       	ldd	r23, Y+2	; 0x02
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	98 2f       	mov	r25, r24
    34bc:	81 2f       	mov	r24, r17
    34be:	69 2f       	mov	r22, r25
    34c0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <velocity>
forward();
    34c4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <forward>
}
    34c8:	62 96       	adiw	r28, 0x12	; 18
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	1f 91       	pop	r17
    34da:	08 95       	ret

000034dc <setTimer3>:

void setTimer3(int time, void (*f) (void))
{
    34dc:	8f 92       	push	r8
    34de:	9f 92       	push	r9
    34e0:	af 92       	push	r10
    34e2:	bf 92       	push	r11
    34e4:	cf 92       	push	r12
    34e6:	df 92       	push	r13
    34e8:	ef 92       	push	r14
    34ea:	ff 92       	push	r15
    34ec:	0f 93       	push	r16
    34ee:	1f 93       	push	r17
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	2c 97       	sbiw	r28, 0x0c	; 12
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	f8 94       	cli
    34fe:	de bf       	out	0x3e, r29	; 62
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	9a 87       	std	Y+10, r25	; 0x0a
    3506:	89 87       	std	Y+9, r24	; 0x09
    3508:	7c 87       	std	Y+12, r23	; 0x0c
    350a:	6b 87       	std	Y+11, r22	; 0x0b
long long int ticks=TICKS_PER_SEC*time;
    350c:	29 85       	ldd	r18, Y+9	; 0x09
    350e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3510:	83 e3       	ldi	r24, 0x33	; 51
    3512:	9b e2       	ldi	r25, 0x2B	; 43
    3514:	ac 01       	movw	r20, r24
    3516:	24 9f       	mul	r18, r20
    3518:	c0 01       	movw	r24, r0
    351a:	25 9f       	mul	r18, r21
    351c:	90 0d       	add	r25, r0
    351e:	34 9f       	mul	r19, r20
    3520:	90 0d       	add	r25, r0
    3522:	11 24       	eor	r1, r1
    3524:	9a 83       	std	Y+2, r25	; 0x02
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	99 0f       	add	r25, r25
    352a:	88 0b       	sbc	r24, r24
    352c:	98 2f       	mov	r25, r24
    352e:	8b 83       	std	Y+3, r24	; 0x03
    3530:	8c 83       	std	Y+4, r24	; 0x04
    3532:	8d 83       	std	Y+5, r24	; 0x05
    3534:	8e 83       	std	Y+6, r24	; 0x06
    3536:	8f 83       	std	Y+7, r24	; 0x07
    3538:	88 87       	std	Y+8, r24	; 0x08
TCCR3B = 0x00; //stop
    353a:	e1 e9       	ldi	r30, 0x91	; 145
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	10 82       	st	Z, r1
 TCNT3H = 0xFF - ticks/0xFF; //Counter higher 8 bit value
    3540:	0f 2e       	mov	r0, r31
    3542:	f5 e9       	ldi	r31, 0x95	; 149
    3544:	8f 2e       	mov	r8, r31
    3546:	99 24       	eor	r9, r9
    3548:	f0 2d       	mov	r31, r0
    354a:	a9 80       	ldd	r10, Y+1	; 0x01
    354c:	ba 80       	ldd	r11, Y+2	; 0x02
    354e:	cb 80       	ldd	r12, Y+3	; 0x03
    3550:	dc 80       	ldd	r13, Y+4	; 0x04
    3552:	ed 80       	ldd	r14, Y+5	; 0x05
    3554:	fe 80       	ldd	r15, Y+6	; 0x06
    3556:	0f 81       	ldd	r16, Y+7	; 0x07
    3558:	18 85       	ldd	r17, Y+8	; 0x08
    355a:	2a 2d       	mov	r18, r10
    355c:	3b 2d       	mov	r19, r11
    355e:	4c 2d       	mov	r20, r12
    3560:	5d 2d       	mov	r21, r13
    3562:	6e 2d       	mov	r22, r14
    3564:	7f 2d       	mov	r23, r15
    3566:	80 2f       	mov	r24, r16
    3568:	91 2f       	mov	r25, r17
    356a:	aa 24       	eor	r10, r10
    356c:	aa 94       	dec	r10
    356e:	bb 24       	eor	r11, r11
    3570:	cc 24       	eor	r12, r12
    3572:	dd 24       	eor	r13, r13
    3574:	ee 24       	eor	r14, r14
    3576:	ff 24       	eor	r15, r15
    3578:	00 e0       	ldi	r16, 0x00	; 0
    357a:	10 e0       	ldi	r17, 0x00	; 0
    357c:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__divdi3>
    3580:	a2 2e       	mov	r10, r18
    3582:	b3 2e       	mov	r11, r19
    3584:	c4 2e       	mov	r12, r20
    3586:	d5 2e       	mov	r13, r21
    3588:	e6 2e       	mov	r14, r22
    358a:	f7 2e       	mov	r15, r23
    358c:	08 2f       	mov	r16, r24
    358e:	19 2f       	mov	r17, r25
    3590:	2a 2d       	mov	r18, r10
    3592:	3b 2d       	mov	r19, r11
    3594:	4c 2d       	mov	r20, r12
    3596:	5d 2d       	mov	r21, r13
    3598:	6e 2d       	mov	r22, r14
    359a:	7f 2d       	mov	r23, r15
    359c:	80 2f       	mov	r24, r16
    359e:	91 2f       	mov	r25, r17
    35a0:	82 2f       	mov	r24, r18
    35a2:	80 95       	com	r24
    35a4:	f4 01       	movw	r30, r8
    35a6:	80 83       	st	Z, r24
 TCNT3L = 0xFF-ticks%0xFF; //Counter lower 8 bit value
    35a8:	0f 2e       	mov	r0, r31
    35aa:	f4 e9       	ldi	r31, 0x94	; 148
    35ac:	8f 2e       	mov	r8, r31
    35ae:	99 24       	eor	r9, r9
    35b0:	f0 2d       	mov	r31, r0
    35b2:	a9 80       	ldd	r10, Y+1	; 0x01
    35b4:	ba 80       	ldd	r11, Y+2	; 0x02
    35b6:	cb 80       	ldd	r12, Y+3	; 0x03
    35b8:	dc 80       	ldd	r13, Y+4	; 0x04
    35ba:	ed 80       	ldd	r14, Y+5	; 0x05
    35bc:	fe 80       	ldd	r15, Y+6	; 0x06
    35be:	0f 81       	ldd	r16, Y+7	; 0x07
    35c0:	18 85       	ldd	r17, Y+8	; 0x08
    35c2:	2a 2d       	mov	r18, r10
    35c4:	3b 2d       	mov	r19, r11
    35c6:	4c 2d       	mov	r20, r12
    35c8:	5d 2d       	mov	r21, r13
    35ca:	6e 2d       	mov	r22, r14
    35cc:	7f 2d       	mov	r23, r15
    35ce:	80 2f       	mov	r24, r16
    35d0:	91 2f       	mov	r25, r17
    35d2:	aa 24       	eor	r10, r10
    35d4:	aa 94       	dec	r10
    35d6:	bb 24       	eor	r11, r11
    35d8:	cc 24       	eor	r12, r12
    35da:	dd 24       	eor	r13, r13
    35dc:	ee 24       	eor	r14, r14
    35de:	ff 24       	eor	r15, r15
    35e0:	00 e0       	ldi	r16, 0x00	; 0
    35e2:	10 e0       	ldi	r17, 0x00	; 0
    35e4:	0e 94 0d 28 	call	0x501a	; 0x501a <__moddi3>
    35e8:	a2 2e       	mov	r10, r18
    35ea:	b3 2e       	mov	r11, r19
    35ec:	c4 2e       	mov	r12, r20
    35ee:	d5 2e       	mov	r13, r21
    35f0:	e6 2e       	mov	r14, r22
    35f2:	f7 2e       	mov	r15, r23
    35f4:	08 2f       	mov	r16, r24
    35f6:	19 2f       	mov	r17, r25
    35f8:	2a 2d       	mov	r18, r10
    35fa:	3b 2d       	mov	r19, r11
    35fc:	4c 2d       	mov	r20, r12
    35fe:	5d 2d       	mov	r21, r13
    3600:	6e 2d       	mov	r22, r14
    3602:	7f 2d       	mov	r23, r15
    3604:	80 2f       	mov	r24, r16
    3606:	91 2f       	mov	r25, r17
    3608:	82 2f       	mov	r24, r18
    360a:	80 95       	com	r24
    360c:	f4 01       	movw	r30, r8
    360e:	80 83       	st	Z, r24
 TCCR3B = 0x05; //start Timer
    3610:	e1 e9       	ldi	r30, 0x91	; 145
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	85 e0       	ldi	r24, 0x05	; 5
    3616:	80 83       	st	Z, r24
 timer3func=f;
    3618:	8b 85       	ldd	r24, Y+11	; 0x0b
    361a:	9c 85       	ldd	r25, Y+12	; 0x0c
    361c:	90 93 92 05 	sts	0x0592, r25
    3620:	80 93 91 05 	sts	0x0591, r24

}
    3624:	2c 96       	adiw	r28, 0x0c	; 12
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	1f 91       	pop	r17
    3636:	0f 91       	pop	r16
    3638:	ff 90       	pop	r15
    363a:	ef 90       	pop	r14
    363c:	df 90       	pop	r13
    363e:	cf 90       	pop	r12
    3640:	bf 90       	pop	r11
    3642:	af 90       	pop	r10
    3644:	9f 90       	pop	r9
    3646:	8f 90       	pop	r8
    3648:	08 95       	ret

0000364a <__vector_35>:
ISR(TIMER3_OVF_vect)
{
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	00 90 5b 00 	lds	r0, 0x005B
    3656:	0f 92       	push	r0
    3658:	11 24       	eor	r1, r1
    365a:	2f 93       	push	r18
    365c:	3f 93       	push	r19
    365e:	4f 93       	push	r20
    3660:	5f 93       	push	r21
    3662:	6f 93       	push	r22
    3664:	7f 93       	push	r23
    3666:	8f 93       	push	r24
    3668:	9f 93       	push	r25
    366a:	af 93       	push	r26
    366c:	bf 93       	push	r27
    366e:	ef 93       	push	r30
    3670:	ff 93       	push	r31
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62

(*timer3func)();
    367a:	e0 91 91 05 	lds	r30, 0x0591
    367e:	f0 91 92 05 	lds	r31, 0x0592
    3682:	19 95       	eicall
}
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	ff 91       	pop	r31
    368a:	ef 91       	pop	r30
    368c:	bf 91       	pop	r27
    368e:	af 91       	pop	r26
    3690:	9f 91       	pop	r25
    3692:	8f 91       	pop	r24
    3694:	7f 91       	pop	r23
    3696:	6f 91       	pop	r22
    3698:	5f 91       	pop	r21
    369a:	4f 91       	pop	r20
    369c:	3f 91       	pop	r19
    369e:	2f 91       	pop	r18
    36a0:	0f 90       	pop	r0
    36a2:	00 92 5b 00 	sts	0x005B, r0
    36a6:	0f 90       	pop	r0
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	0f 90       	pop	r0
    36ac:	1f 90       	pop	r1
    36ae:	18 95       	reti

000036b0 <setTimer1>:

void setTimer1(int time, void (*f) (void))
{
    36b0:	8f 92       	push	r8
    36b2:	9f 92       	push	r9
    36b4:	af 92       	push	r10
    36b6:	bf 92       	push	r11
    36b8:	cf 92       	push	r12
    36ba:	df 92       	push	r13
    36bc:	ef 92       	push	r14
    36be:	ff 92       	push	r15
    36c0:	0f 93       	push	r16
    36c2:	1f 93       	push	r17
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    36cc:	2c 97       	sbiw	r28, 0x0c	; 12
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	9a 87       	std	Y+10, r25	; 0x0a
    36da:	89 87       	std	Y+9, r24	; 0x09
    36dc:	7c 87       	std	Y+12, r23	; 0x0c
    36de:	6b 87       	std	Y+11, r22	; 0x0b
long long int ticks=TICKS_PER_SEC*time;
    36e0:	29 85       	ldd	r18, Y+9	; 0x09
    36e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    36e4:	83 e3       	ldi	r24, 0x33	; 51
    36e6:	9b e2       	ldi	r25, 0x2B	; 43
    36e8:	ac 01       	movw	r20, r24
    36ea:	24 9f       	mul	r18, r20
    36ec:	c0 01       	movw	r24, r0
    36ee:	25 9f       	mul	r18, r21
    36f0:	90 0d       	add	r25, r0
    36f2:	34 9f       	mul	r19, r20
    36f4:	90 0d       	add	r25, r0
    36f6:	11 24       	eor	r1, r1
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
    36fc:	99 0f       	add	r25, r25
    36fe:	88 0b       	sbc	r24, r24
    3700:	98 2f       	mov	r25, r24
    3702:	8b 83       	std	Y+3, r24	; 0x03
    3704:	8c 83       	std	Y+4, r24	; 0x04
    3706:	8d 83       	std	Y+5, r24	; 0x05
    3708:	8e 83       	std	Y+6, r24	; 0x06
    370a:	8f 83       	std	Y+7, r24	; 0x07
    370c:	88 87       	std	Y+8, r24	; 0x08
TCCR1B = 0x00; //stop
    370e:	e1 e8       	ldi	r30, 0x81	; 129
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	10 82       	st	Z, r1
 TCNT1H = 0xFF - ticks/0xFF; //Counter higher 8 bit value
    3714:	0f 2e       	mov	r0, r31
    3716:	f5 e8       	ldi	r31, 0x85	; 133
    3718:	8f 2e       	mov	r8, r31
    371a:	99 24       	eor	r9, r9
    371c:	f0 2d       	mov	r31, r0
    371e:	a9 80       	ldd	r10, Y+1	; 0x01
    3720:	ba 80       	ldd	r11, Y+2	; 0x02
    3722:	cb 80       	ldd	r12, Y+3	; 0x03
    3724:	dc 80       	ldd	r13, Y+4	; 0x04
    3726:	ed 80       	ldd	r14, Y+5	; 0x05
    3728:	fe 80       	ldd	r15, Y+6	; 0x06
    372a:	0f 81       	ldd	r16, Y+7	; 0x07
    372c:	18 85       	ldd	r17, Y+8	; 0x08
    372e:	2a 2d       	mov	r18, r10
    3730:	3b 2d       	mov	r19, r11
    3732:	4c 2d       	mov	r20, r12
    3734:	5d 2d       	mov	r21, r13
    3736:	6e 2d       	mov	r22, r14
    3738:	7f 2d       	mov	r23, r15
    373a:	80 2f       	mov	r24, r16
    373c:	91 2f       	mov	r25, r17
    373e:	aa 24       	eor	r10, r10
    3740:	aa 94       	dec	r10
    3742:	bb 24       	eor	r11, r11
    3744:	cc 24       	eor	r12, r12
    3746:	dd 24       	eor	r13, r13
    3748:	ee 24       	eor	r14, r14
    374a:	ff 24       	eor	r15, r15
    374c:	00 e0       	ldi	r16, 0x00	; 0
    374e:	10 e0       	ldi	r17, 0x00	; 0
    3750:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__divdi3>
    3754:	a2 2e       	mov	r10, r18
    3756:	b3 2e       	mov	r11, r19
    3758:	c4 2e       	mov	r12, r20
    375a:	d5 2e       	mov	r13, r21
    375c:	e6 2e       	mov	r14, r22
    375e:	f7 2e       	mov	r15, r23
    3760:	08 2f       	mov	r16, r24
    3762:	19 2f       	mov	r17, r25
    3764:	2a 2d       	mov	r18, r10
    3766:	3b 2d       	mov	r19, r11
    3768:	4c 2d       	mov	r20, r12
    376a:	5d 2d       	mov	r21, r13
    376c:	6e 2d       	mov	r22, r14
    376e:	7f 2d       	mov	r23, r15
    3770:	80 2f       	mov	r24, r16
    3772:	91 2f       	mov	r25, r17
    3774:	82 2f       	mov	r24, r18
    3776:	80 95       	com	r24
    3778:	f4 01       	movw	r30, r8
    377a:	80 83       	st	Z, r24
 TCNT1L = 0xFF-ticks%0xFF; //Counter lower 8 bit value
    377c:	0f 2e       	mov	r0, r31
    377e:	f4 e8       	ldi	r31, 0x84	; 132
    3780:	8f 2e       	mov	r8, r31
    3782:	99 24       	eor	r9, r9
    3784:	f0 2d       	mov	r31, r0
    3786:	a9 80       	ldd	r10, Y+1	; 0x01
    3788:	ba 80       	ldd	r11, Y+2	; 0x02
    378a:	cb 80       	ldd	r12, Y+3	; 0x03
    378c:	dc 80       	ldd	r13, Y+4	; 0x04
    378e:	ed 80       	ldd	r14, Y+5	; 0x05
    3790:	fe 80       	ldd	r15, Y+6	; 0x06
    3792:	0f 81       	ldd	r16, Y+7	; 0x07
    3794:	18 85       	ldd	r17, Y+8	; 0x08
    3796:	2a 2d       	mov	r18, r10
    3798:	3b 2d       	mov	r19, r11
    379a:	4c 2d       	mov	r20, r12
    379c:	5d 2d       	mov	r21, r13
    379e:	6e 2d       	mov	r22, r14
    37a0:	7f 2d       	mov	r23, r15
    37a2:	80 2f       	mov	r24, r16
    37a4:	91 2f       	mov	r25, r17
    37a6:	aa 24       	eor	r10, r10
    37a8:	aa 94       	dec	r10
    37aa:	bb 24       	eor	r11, r11
    37ac:	cc 24       	eor	r12, r12
    37ae:	dd 24       	eor	r13, r13
    37b0:	ee 24       	eor	r14, r14
    37b2:	ff 24       	eor	r15, r15
    37b4:	00 e0       	ldi	r16, 0x00	; 0
    37b6:	10 e0       	ldi	r17, 0x00	; 0
    37b8:	0e 94 0d 28 	call	0x501a	; 0x501a <__moddi3>
    37bc:	a2 2e       	mov	r10, r18
    37be:	b3 2e       	mov	r11, r19
    37c0:	c4 2e       	mov	r12, r20
    37c2:	d5 2e       	mov	r13, r21
    37c4:	e6 2e       	mov	r14, r22
    37c6:	f7 2e       	mov	r15, r23
    37c8:	08 2f       	mov	r16, r24
    37ca:	19 2f       	mov	r17, r25
    37cc:	2a 2d       	mov	r18, r10
    37ce:	3b 2d       	mov	r19, r11
    37d0:	4c 2d       	mov	r20, r12
    37d2:	5d 2d       	mov	r21, r13
    37d4:	6e 2d       	mov	r22, r14
    37d6:	7f 2d       	mov	r23, r15
    37d8:	80 2f       	mov	r24, r16
    37da:	91 2f       	mov	r25, r17
    37dc:	82 2f       	mov	r24, r18
    37de:	80 95       	com	r24
    37e0:	f4 01       	movw	r30, r8
    37e2:	80 83       	st	Z, r24
 TCCR1B = 0x05; //start Timer
    37e4:	e1 e8       	ldi	r30, 0x81	; 129
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	85 e0       	ldi	r24, 0x05	; 5
    37ea:	80 83       	st	Z, r24
 timer1func=f;
    37ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    37ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    37f0:	90 93 1d 05 	sts	0x051D, r25
    37f4:	80 93 1c 05 	sts	0x051C, r24

}
    37f8:	2c 96       	adiw	r28, 0x0c	; 12
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	ff 90       	pop	r15
    380e:	ef 90       	pop	r14
    3810:	df 90       	pop	r13
    3812:	cf 90       	pop	r12
    3814:	bf 90       	pop	r11
    3816:	af 90       	pop	r10
    3818:	9f 90       	pop	r9
    381a:	8f 90       	pop	r8
    381c:	08 95       	ret

0000381e <__vector_20>:
ISR(TIMER1_OVF_vect)
{
    381e:	1f 92       	push	r1
    3820:	0f 92       	push	r0
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	0f 92       	push	r0
    3826:	00 90 5b 00 	lds	r0, 0x005B
    382a:	0f 92       	push	r0
    382c:	11 24       	eor	r1, r1
    382e:	2f 93       	push	r18
    3830:	3f 93       	push	r19
    3832:	4f 93       	push	r20
    3834:	5f 93       	push	r21
    3836:	6f 93       	push	r22
    3838:	7f 93       	push	r23
    383a:	8f 93       	push	r24
    383c:	9f 93       	push	r25
    383e:	af 93       	push	r26
    3840:	bf 93       	push	r27
    3842:	ef 93       	push	r30
    3844:	ff 93       	push	r31
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62

(*timer1func)();
    384e:	e0 91 1c 05 	lds	r30, 0x051C
    3852:	f0 91 1d 05 	lds	r31, 0x051D
    3856:	19 95       	eicall
}
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	ff 91       	pop	r31
    385e:	ef 91       	pop	r30
    3860:	bf 91       	pop	r27
    3862:	af 91       	pop	r26
    3864:	9f 91       	pop	r25
    3866:	8f 91       	pop	r24
    3868:	7f 91       	pop	r23
    386a:	6f 91       	pop	r22
    386c:	5f 91       	pop	r21
    386e:	4f 91       	pop	r20
    3870:	3f 91       	pop	r19
    3872:	2f 91       	pop	r18
    3874:	0f 90       	pop	r0
    3876:	00 92 5b 00 	sts	0x005B, r0
    387a:	0f 90       	pop	r0
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	0f 90       	pop	r0
    3880:	1f 90       	pop	r1
    3882:	18 95       	reti

00003884 <__vector_45>:


ISR(TIMER4_OVF_vect)
{
    3884:	1f 92       	push	r1
    3886:	0f 92       	push	r0
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	0f 92       	push	r0
    388c:	00 90 5b 00 	lds	r0, 0x005B
    3890:	0f 92       	push	r0
    3892:	11 24       	eor	r1, r1
    3894:	ef 92       	push	r14
    3896:	ff 92       	push	r15
    3898:	0f 93       	push	r16
    389a:	1f 93       	push	r17
    389c:	2f 93       	push	r18
    389e:	3f 93       	push	r19
    38a0:	4f 93       	push	r20
    38a2:	5f 93       	push	r21
    38a4:	6f 93       	push	r22
    38a6:	7f 93       	push	r23
    38a8:	8f 93       	push	r24
    38aa:	9f 93       	push	r25
    38ac:	af 93       	push	r26
    38ae:	bf 93       	push	r27
    38b0:	ef 93       	push	r30
    38b2:	ff 93       	push	r31
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	a4 97       	sbiw	r28, 0x24	; 36
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	cd bf       	out	0x3d, r28	; 61
//lcd_clear();
//lcd_string("timer");
if(functionFlag!=0)
    38c2:	20 91 d7 04 	lds	r18, 0x04D7
    38c6:	30 91 d8 04 	lds	r19, 0x04D8
    38ca:	40 91 d9 04 	lds	r20, 0x04D9
    38ce:	50 91 da 04 	lds	r21, 0x04DA
    38d2:	60 91 db 04 	lds	r22, 0x04DB
    38d6:	70 91 dc 04 	lds	r23, 0x04DC
    38da:	80 91 dd 04 	lds	r24, 0x04DD
    38de:	90 91 de 04 	lds	r25, 0x04DE
    38e2:	e2 2f       	mov	r30, r18
    38e4:	e3 2b       	or	r30, r19
    38e6:	e4 2b       	or	r30, r20
    38e8:	e5 2b       	or	r30, r21
    38ea:	e6 2b       	or	r30, r22
    38ec:	e7 2b       	or	r30, r23
    38ee:	e8 2b       	or	r30, r24
    38f0:	e9 2b       	or	r30, r25
    38f2:	ee 23       	and	r30, r30
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <__vector_45+0x74>
    38f6:	39 c2       	rjmp	.+1138   	; 0x3d6a <__vector_45+0x4e6>


		
		int left,right;float cratio,velRatio;
	float dist;
		right=curRightCounter-splRightCounter;
    38f8:	20 91 eb 04 	lds	r18, 0x04EB
    38fc:	30 91 ec 04 	lds	r19, 0x04EC
    3900:	40 91 ed 04 	lds	r20, 0x04ED
    3904:	50 91 ee 04 	lds	r21, 0x04EE
    3908:	60 91 ef 04 	lds	r22, 0x04EF
    390c:	70 91 f0 04 	lds	r23, 0x04F0
    3910:	80 91 f1 04 	lds	r24, 0x04F1
    3914:	90 91 f2 04 	lds	r25, 0x04F2
    3918:	f9 01       	movw	r30, r18
    391a:	20 91 14 05 	lds	r18, 0x0514
    391e:	30 91 15 05 	lds	r19, 0x0515
    3922:	40 91 16 05 	lds	r20, 0x0516
    3926:	50 91 17 05 	lds	r21, 0x0517
    392a:	60 91 18 05 	lds	r22, 0x0518
    392e:	70 91 19 05 	lds	r23, 0x0519
    3932:	80 91 1a 05 	lds	r24, 0x051A
    3936:	90 91 1b 05 	lds	r25, 0x051B
    393a:	c9 01       	movw	r24, r18
    393c:	9f 01       	movw	r18, r30
    393e:	28 1b       	sub	r18, r24
    3940:	39 0b       	sbc	r19, r25
    3942:	c9 01       	movw	r24, r18
    3944:	9a 8f       	std	Y+26, r25	; 0x1a
    3946:	89 8f       	std	Y+25, r24	; 0x19
		left=curLeftCounter-splLeftCounter;
    3948:	20 91 fb 04 	lds	r18, 0x04FB
    394c:	30 91 fc 04 	lds	r19, 0x04FC
    3950:	40 91 fd 04 	lds	r20, 0x04FD
    3954:	50 91 fe 04 	lds	r21, 0x04FE
    3958:	60 91 ff 04 	lds	r22, 0x04FF
    395c:	70 91 00 05 	lds	r23, 0x0500
    3960:	80 91 01 05 	lds	r24, 0x0501
    3964:	90 91 02 05 	lds	r25, 0x0502
    3968:	f9 01       	movw	r30, r18
    396a:	20 91 f3 04 	lds	r18, 0x04F3
    396e:	30 91 f4 04 	lds	r19, 0x04F4
    3972:	40 91 f5 04 	lds	r20, 0x04F5
    3976:	50 91 f6 04 	lds	r21, 0x04F6
    397a:	60 91 f7 04 	lds	r22, 0x04F7
    397e:	70 91 f8 04 	lds	r23, 0x04F8
    3982:	80 91 f9 04 	lds	r24, 0x04F9
    3986:	90 91 fa 04 	lds	r25, 0x04FA
    398a:	c9 01       	movw	r24, r18
    398c:	9f 01       	movw	r18, r30
    398e:	28 1b       	sub	r18, r24
    3990:	39 0b       	sbc	r19, r25
    3992:	c9 01       	movw	r24, r18
    3994:	9c 8f       	std	Y+28, r25	; 0x1c
    3996:	8b 8f       	std	Y+27, r24	; 0x1b
	
		if(left!=0 && right!=0)
    3998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	09 f4       	brne	.+2      	; 0x39a2 <__vector_45+0x11e>
    39a0:	6c c1       	rjmp	.+728    	; 0x3c7a <__vector_45+0x3f6>
    39a2:	89 8d       	ldd	r24, Y+25	; 0x19
    39a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	09 f4       	brne	.+2      	; 0x39ac <__vector_45+0x128>
    39aa:	67 c1       	rjmp	.+718    	; 0x3c7a <__vector_45+0x3f6>
		{
			cratio=(float)left/right;
    39ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b0:	aa 27       	eor	r26, r26
    39b2:	97 fd       	sbrc	r25, 7
    39b4:	a0 95       	com	r26
    39b6:	ba 2f       	mov	r27, r26
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    39c0:	7b 01       	movw	r14, r22
    39c2:	8c 01       	movw	r16, r24
    39c4:	89 8d       	ldd	r24, Y+25	; 0x19
    39c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39c8:	aa 27       	eor	r26, r26
    39ca:	97 fd       	sbrc	r25, 7
    39cc:	a0 95       	com	r26
    39ce:	ba 2f       	mov	r27, r26
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    39d8:	9b 01       	movw	r18, r22
    39da:	ac 01       	movw	r20, r24
    39dc:	c8 01       	movw	r24, r16
    39de:	b7 01       	movw	r22, r14
    39e0:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8d 8b       	std	Y+21, r24	; 0x15
    39ea:	9e 8b       	std	Y+22, r25	; 0x16
    39ec:	af 8b       	std	Y+23, r26	; 0x17
    39ee:	b8 8f       	std	Y+24, r27	; 0x18
			velRatio = (float)leftVel/rightVel;
    39f0:	80 91 09 05 	lds	r24, 0x0509
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 e0       	ldi	r26, 0x00	; 0
    39fa:	b0 e0       	ldi	r27, 0x00	; 0
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    3a04:	7b 01       	movw	r14, r22
    3a06:	8c 01       	movw	r16, r24
    3a08:	80 91 0c 05 	lds	r24, 0x050C
    3a0c:	88 2f       	mov	r24, r24
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	aa 27       	eor	r26, r26
    3a12:	97 fd       	sbrc	r25, 7
    3a14:	a0 95       	com	r26
    3a16:	ba 2f       	mov	r27, r26
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    3a20:	9b 01       	movw	r18, r22
    3a22:	ac 01       	movw	r20, r24
    3a24:	c8 01       	movw	r24, r16
    3a26:	b7 01       	movw	r22, r14
    3a28:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	89 8b       	std	Y+17, r24	; 0x11
    3a32:	9a 8b       	std	Y+18, r25	; 0x12
    3a34:	ab 8b       	std	Y+19, r26	; 0x13
    3a36:	bc 8b       	std	Y+20, r27	; 0x14
			int newLeftVel,newRightVel;
			if(cratio < botRatio - 0.001 )
    3a38:	80 91 03 05 	lds	r24, 0x0503
    3a3c:	90 91 04 05 	lds	r25, 0x0504
    3a40:	a0 91 05 05 	lds	r26, 0x0505
    3a44:	b0 91 06 05 	lds	r27, 0x0506
    3a48:	bc 01       	movw	r22, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	2f e6       	ldi	r18, 0x6F	; 111
    3a4e:	32 e1       	ldi	r19, 0x12	; 18
    3a50:	43 e8       	ldi	r20, 0x83	; 131
    3a52:	5a e3       	ldi	r21, 0x3A	; 58
    3a54:	0e 94 96 31 	call	0x632c	; 0x632c <__subsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	2d 89       	ldd	r18, Y+21	; 0x15
    3a62:	3e 89       	ldd	r19, Y+22	; 0x16
    3a64:	4f 89       	ldd	r20, Y+23	; 0x17
    3a66:	58 8d       	ldd	r21, Y+24	; 0x18
    3a68:	0e 94 9a 33 	call	0x6734	; 0x6734 <__gtsf2>
    3a6c:	18 16       	cp	r1, r24
    3a6e:	0c f0       	brlt	.+2      	; 0x3a72 <__vector_45+0x1ee>
    3a70:	75 c0       	rjmp	.+234    	; 0x3b5c <__vector_45+0x2d8>
			{
				float newVelRatio;
				newVelRatio =(float) ((float)botRatio/cratio)*velRatio;
    3a72:	80 91 03 05 	lds	r24, 0x0503
    3a76:	90 91 04 05 	lds	r25, 0x0504
    3a7a:	a0 91 05 05 	lds	r26, 0x0505
    3a7e:	b0 91 06 05 	lds	r27, 0x0506
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	2d 89       	ldd	r18, Y+21	; 0x15
    3a88:	3e 89       	ldd	r19, Y+22	; 0x16
    3a8a:	4f 89       	ldd	r20, Y+23	; 0x17
    3a8c:	58 8d       	ldd	r21, Y+24	; 0x18
    3a8e:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	29 89       	ldd	r18, Y+17	; 0x11
    3a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    3a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    3aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    3aa2:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	9e 83       	std	Y+6, r25	; 0x06
    3aae:	af 83       	std	Y+7, r26	; 0x07
    3ab0:	b8 87       	std	Y+8, r27	; 0x08

				newRightVel=rightVel;
    3ab2:	80 91 0c 05 	lds	r24, 0x050C
    3ab6:	88 2f       	mov	r24, r24
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	9a 87       	std	Y+10, r25	; 0x0a
    3abc:	89 87       	std	Y+9, r24	; 0x09
				newLeftVel=rightVel * newVelRatio;
    3abe:	80 91 0c 05 	lds	r24, 0x050C
    3ac2:	88 2f       	mov	r24, r24
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	aa 27       	eor	r26, r26
    3ac8:	97 fd       	sbrc	r25, 7
    3aca:	a0 95       	com	r26
    3acc:	ba 2f       	mov	r27, r26
    3ace:	bc 01       	movw	r22, r24
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	bc 01       	movw	r22, r24
    3adc:	cd 01       	movw	r24, r26
    3ade:	2d 81       	ldd	r18, Y+5	; 0x05
    3ae0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ae2:	4f 81       	ldd	r20, Y+7	; 0x07
    3ae4:	58 85       	ldd	r21, Y+8	; 0x08
    3ae6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	bc 01       	movw	r22, r24
    3af0:	cd 01       	movw	r24, r26
    3af2:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	9c 87       	std	Y+12, r25	; 0x0c
    3afc:	8b 87       	std	Y+11, r24	; 0x0b
				if(newLeftVel>254)
    3afe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b00:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b02:	8f 3f       	cpi	r24, 0xFF	; 255
    3b04:	91 05       	cpc	r25, r1
    3b06:	24 f1       	brlt	.+72     	; 0x3b50 <__vector_45+0x2cc>
				{
				newLeftVel=leftVel;
    3b08:	80 91 09 05 	lds	r24, 0x0509
    3b0c:	88 2f       	mov	r24, r24
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	9c 87       	std	Y+12, r25	; 0x0c
    3b12:	8b 87       	std	Y+11, r24	; 0x0b
				newRightVel=(float)leftVel/newVelRatio;
    3b14:	80 91 09 05 	lds	r24, 0x0509
    3b18:	88 2f       	mov	r24, r24
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	a0 e0       	ldi	r26, 0x00	; 0
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	2d 81       	ldd	r18, Y+5	; 0x05
    3b32:	3e 81       	ldd	r19, Y+6	; 0x06
    3b34:	4f 81       	ldd	r20, Y+7	; 0x07
    3b36:	58 85       	ldd	r21, Y+8	; 0x08
    3b38:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	bc 01       	movw	r22, r24
    3b42:	cd 01       	movw	r24, r26
    3b44:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	9a 87       	std	Y+10, r25	; 0x0a
    3b4e:	89 87       	std	Y+9, r24	; 0x09
				lcd_cursor(2,2);
				lcd_num(newLeftVel);
				lcd_num(newRightVel);
				*/

				velocity((unsigned char) newLeftVel,(unsigned char) newRightVel);
    3b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b52:	99 85       	ldd	r25, Y+9	; 0x09
    3b54:	69 2f       	mov	r22, r25
    3b56:	0e 94 8a 0b 	call	0x1714	; 0x1714 <velocity>
    3b5a:	8f c0       	rjmp	.+286    	; 0x3c7a <__vector_45+0x3f6>
				
			}
			else if( cratio > botRatio+0.001 )
    3b5c:	80 91 03 05 	lds	r24, 0x0503
    3b60:	90 91 04 05 	lds	r25, 0x0504
    3b64:	a0 91 05 05 	lds	r26, 0x0505
    3b68:	b0 91 06 05 	lds	r27, 0x0506
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	2f e6       	ldi	r18, 0x6F	; 111
    3b72:	32 e1       	ldi	r19, 0x12	; 18
    3b74:	43 e8       	ldi	r20, 0x83	; 131
    3b76:	5a e3       	ldi	r21, 0x3A	; 58
    3b78:	0e 94 c7 31 	call	0x638e	; 0x638e <__addsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	2d 89       	ldd	r18, Y+21	; 0x15
    3b86:	3e 89       	ldd	r19, Y+22	; 0x16
    3b88:	4f 89       	ldd	r20, Y+23	; 0x17
    3b8a:	58 8d       	ldd	r21, Y+24	; 0x18
    3b8c:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__ltsf2>
    3b90:	88 23       	and	r24, r24
    3b92:	0c f0       	brlt	.+2      	; 0x3b96 <__vector_45+0x312>
    3b94:	72 c0       	rjmp	.+228    	; 0x3c7a <__vector_45+0x3f6>
			{
				float newVelRatio;
				newVelRatio = (botRatio/cratio)*velRatio;
    3b96:	80 91 03 05 	lds	r24, 0x0503
    3b9a:	90 91 04 05 	lds	r25, 0x0504
    3b9e:	a0 91 05 05 	lds	r26, 0x0505
    3ba2:	b0 91 06 05 	lds	r27, 0x0506
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	2d 89       	ldd	r18, Y+21	; 0x15
    3bac:	3e 89       	ldd	r19, Y+22	; 0x16
    3bae:	4f 89       	ldd	r20, Y+23	; 0x17
    3bb0:	58 8d       	ldd	r21, Y+24	; 0x18
    3bb2:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	29 89       	ldd	r18, Y+17	; 0x11
    3bc0:	3a 89       	ldd	r19, Y+18	; 0x12
    3bc2:	4b 89       	ldd	r20, Y+19	; 0x13
    3bc4:	5c 89       	ldd	r21, Y+20	; 0x14
    3bc6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	ab 83       	std	Y+3, r26	; 0x03
    3bd4:	bc 83       	std	Y+4, r27	; 0x04
				newLeftVel=leftVel;
    3bd6:	80 91 09 05 	lds	r24, 0x0509
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	9c 87       	std	Y+12, r25	; 0x0c
    3be0:	8b 87       	std	Y+11, r24	; 0x0b

				newRightVel=(float)leftVel/newVelRatio;
    3be2:	80 91 09 05 	lds	r24, 0x0509
    3be6:	88 2f       	mov	r24, r24
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a0 e0       	ldi	r26, 0x00	; 0
    3bec:	b0 e0       	ldi	r27, 0x00	; 0
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__floatunsisf>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	cd 01       	movw	r24, r26
    3bfe:	29 81       	ldd	r18, Y+1	; 0x01
    3c00:	3a 81       	ldd	r19, Y+2	; 0x02
    3c02:	4b 81       	ldd	r20, Y+3	; 0x03
    3c04:	5c 81       	ldd	r21, Y+4	; 0x04
    3c06:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	9a 87       	std	Y+10, r25	; 0x0a
    3c1c:	89 87       	std	Y+9, r24	; 0x09
				if(newRightVel>254)
    3c1e:	89 85       	ldd	r24, Y+9	; 0x09
    3c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c22:	8f 3f       	cpi	r24, 0xFF	; 255
    3c24:	91 05       	cpc	r25, r1
    3c26:	24 f1       	brlt	.+72     	; 0x3c70 <__vector_45+0x3ec>
				{	
					newRightVel = rightVel;
    3c28:	80 91 0c 05 	lds	r24, 0x050C
    3c2c:	88 2f       	mov	r24, r24
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	9a 87       	std	Y+10, r25	; 0x0a
    3c32:	89 87       	std	Y+9, r24	; 0x09
					newLeftVel = newRightVel * newVelRatio;
    3c34:	89 85       	ldd	r24, Y+9	; 0x09
    3c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c38:	aa 27       	eor	r26, r26
    3c3a:	97 fd       	sbrc	r25, 7
    3c3c:	a0 95       	com	r26
    3c3e:	ba 2f       	mov	r27, r26
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	0e 94 2a 34 	call	0x6854	; 0x6854 <__floatsisf>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	bc 01       	movw	r22, r24
    3c4e:	cd 01       	movw	r24, r26
    3c50:	29 81       	ldd	r18, Y+1	; 0x01
    3c52:	3a 81       	ldd	r19, Y+2	; 0x02
    3c54:	4b 81       	ldd	r20, Y+3	; 0x03
    3c56:	5c 81       	ldd	r21, Y+4	; 0x04
    3c58:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	9c 87       	std	Y+12, r25	; 0x0c
    3c6e:	8b 87       	std	Y+11, r24	; 0x0b
				lcd_num(rightVel);
				lcd_cursor(2,2);
				lcd_num(newLeftVel);
				lcd_num(newRightVel);
				*/
				velocity((unsigned char) newLeftVel,(unsigned char) newRightVel);
    3c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c72:	99 85       	ldd	r25, Y+9	; 0x09
    3c74:	69 2f       	mov	r22, r25
    3c76:	0e 94 8a 0b 	call	0x1714	; 0x1714 <velocity>
				
			}

		}
		if(functionFlag==1)
    3c7a:	30 91 d7 04 	lds	r19, 0x04D7
    3c7e:	3d 8f       	std	Y+29, r19	; 0x1d
    3c80:	80 91 d8 04 	lds	r24, 0x04D8
    3c84:	8e 8f       	std	Y+30, r24	; 0x1e
    3c86:	20 91 d9 04 	lds	r18, 0x04D9
    3c8a:	2f 8f       	std	Y+31, r18	; 0x1f
    3c8c:	30 91 da 04 	lds	r19, 0x04DA
    3c90:	38 a3       	std	Y+32, r19	; 0x20
    3c92:	80 91 db 04 	lds	r24, 0x04DB
    3c96:	89 a3       	std	Y+33, r24	; 0x21
    3c98:	20 91 dc 04 	lds	r18, 0x04DC
    3c9c:	2a a3       	std	Y+34, r18	; 0x22
    3c9e:	30 91 dd 04 	lds	r19, 0x04DD
    3ca2:	3b a3       	std	Y+35, r19	; 0x23
    3ca4:	80 91 de 04 	lds	r24, 0x04DE
    3ca8:	8c a3       	std	Y+36, r24	; 0x24
    3caa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3cac:	21 30       	cpi	r18, 0x01	; 1
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <__vector_45+0x42e>
    3cb0:	5c c0       	rjmp	.+184    	; 0x3d6a <__vector_45+0x4e6>
    3cb2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3cb4:	33 23       	and	r19, r19
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <__vector_45+0x436>
    3cb8:	58 c0       	rjmp	.+176    	; 0x3d6a <__vector_45+0x4e6>
    3cba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cbc:	88 23       	and	r24, r24
    3cbe:	09 f0       	breq	.+2      	; 0x3cc2 <__vector_45+0x43e>
    3cc0:	54 c0       	rjmp	.+168    	; 0x3d6a <__vector_45+0x4e6>
    3cc2:	28 a1       	ldd	r18, Y+32	; 0x20
    3cc4:	22 23       	and	r18, r18
    3cc6:	09 f0       	breq	.+2      	; 0x3cca <__vector_45+0x446>
    3cc8:	50 c0       	rjmp	.+160    	; 0x3d6a <__vector_45+0x4e6>
    3cca:	39 a1       	ldd	r19, Y+33	; 0x21
    3ccc:	33 23       	and	r19, r19
    3cce:	09 f0       	breq	.+2      	; 0x3cd2 <__vector_45+0x44e>
    3cd0:	4c c0       	rjmp	.+152    	; 0x3d6a <__vector_45+0x4e6>
    3cd2:	8a a1       	ldd	r24, Y+34	; 0x22
    3cd4:	88 23       	and	r24, r24
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <__vector_45+0x456>
    3cd8:	48 c0       	rjmp	.+144    	; 0x3d6a <__vector_45+0x4e6>
    3cda:	2b a1       	ldd	r18, Y+35	; 0x23
    3cdc:	22 23       	and	r18, r18
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <__vector_45+0x45e>
    3ce0:	44 c0       	rjmp	.+136    	; 0x3d6a <__vector_45+0x4e6>
    3ce2:	3c a1       	ldd	r19, Y+36	; 0x24
    3ce4:	33 23       	and	r19, r19
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <__vector_45+0x466>
    3ce8:	40 c0       	rjmp	.+128    	; 0x3d6a <__vector_45+0x4e6>
		{
			splRightCounter=curRightCounter;
    3cea:	20 91 eb 04 	lds	r18, 0x04EB
    3cee:	30 91 ec 04 	lds	r19, 0x04EC
    3cf2:	40 91 ed 04 	lds	r20, 0x04ED
    3cf6:	50 91 ee 04 	lds	r21, 0x04EE
    3cfa:	60 91 ef 04 	lds	r22, 0x04EF
    3cfe:	70 91 f0 04 	lds	r23, 0x04F0
    3d02:	80 91 f1 04 	lds	r24, 0x04F1
    3d06:	90 91 f2 04 	lds	r25, 0x04F2
    3d0a:	20 93 14 05 	sts	0x0514, r18
    3d0e:	30 93 15 05 	sts	0x0515, r19
    3d12:	40 93 16 05 	sts	0x0516, r20
    3d16:	50 93 17 05 	sts	0x0517, r21
    3d1a:	60 93 18 05 	sts	0x0518, r22
    3d1e:	70 93 19 05 	sts	0x0519, r23
    3d22:	80 93 1a 05 	sts	0x051A, r24
    3d26:	90 93 1b 05 	sts	0x051B, r25
			splLeftCounter=curLeftCounter;
    3d2a:	20 91 fb 04 	lds	r18, 0x04FB
    3d2e:	30 91 fc 04 	lds	r19, 0x04FC
    3d32:	40 91 fd 04 	lds	r20, 0x04FD
    3d36:	50 91 fe 04 	lds	r21, 0x04FE
    3d3a:	60 91 ff 04 	lds	r22, 0x04FF
    3d3e:	70 91 00 05 	lds	r23, 0x0500
    3d42:	80 91 01 05 	lds	r24, 0x0501
    3d46:	90 91 02 05 	lds	r25, 0x0502
    3d4a:	20 93 f3 04 	sts	0x04F3, r18
    3d4e:	30 93 f4 04 	sts	0x04F4, r19
    3d52:	40 93 f5 04 	sts	0x04F5, r20
    3d56:	50 93 f6 04 	sts	0x04F6, r21
    3d5a:	60 93 f7 04 	sts	0x04F7, r22
    3d5e:	70 93 f8 04 	sts	0x04F8, r23
    3d62:	80 93 f9 04 	sts	0x04F9, r24
    3d66:	90 93 fa 04 	sts	0x04FA, r25
		}
	
	
}
if(_rollLCDFlag==1)
    3d6a:	80 91 07 05 	lds	r24, 0x0507
    3d6e:	90 91 08 05 	lds	r25, 0x0508
    3d72:	81 30       	cpi	r24, 0x01	; 1
    3d74:	91 05       	cpc	r25, r1
    3d76:	41 f5       	brne	.+80     	; 0x3dc8 <__vector_45+0x544>
{lcd_cursor(1,1);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	61 e0       	ldi	r22, 0x01	; 1
    3d7c:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
	lcd_string(_rollLCD+_LCDpos);
    3d80:	80 91 97 05 	lds	r24, 0x0597
    3d84:	90 91 98 05 	lds	r25, 0x0598
    3d88:	80 5e       	subi	r24, 0xE0	; 224
    3d8a:	9a 4f       	sbci	r25, 0xFA	; 250
    3d8c:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
	_LCDpos++;
    3d90:	80 91 97 05 	lds	r24, 0x0597
    3d94:	90 91 98 05 	lds	r25, 0x0598
    3d98:	01 96       	adiw	r24, 0x01	; 1
    3d9a:	90 93 98 05 	sts	0x0598, r25
    3d9e:	80 93 97 05 	sts	0x0597, r24
		if(_LCDpos==strlen(_rollLCD) -14)
    3da2:	80 91 97 05 	lds	r24, 0x0597
    3da6:	90 91 98 05 	lds	r25, 0x0598
    3daa:	8c 01       	movw	r16, r24
    3dac:	80 e2       	ldi	r24, 0x20	; 32
    3dae:	95 e0       	ldi	r25, 0x05	; 5
    3db0:	0e 94 86 38 	call	0x710c	; 0x710c <strlen>
    3db4:	0e 97       	sbiw	r24, 0x0e	; 14
    3db6:	08 17       	cp	r16, r24
    3db8:	19 07       	cpc	r17, r25
    3dba:	31 f4       	brne	.+12     	; 0x3dc8 <__vector_45+0x544>
		{ 
		_rollLCDFlag=0;
    3dbc:	10 92 08 05 	sts	0x0508, r1
    3dc0:	10 92 07 05 	sts	0x0507, r1
		lcd_clear();
    3dc4:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
	
		}
}
 //TIMER4 has overflowed
 TCNT4H = 0xEF; //reload counter high value
    3dc8:	e5 ea       	ldi	r30, 0xA5	; 165
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	8f ee       	ldi	r24, 0xEF	; 239
    3dce:	80 83       	st	Z, r24
 TCNT4L = 0x00; //reload counter low value
    3dd0:	e4 ea       	ldi	r30, 0xA4	; 164
    3dd2:	f0 e0       	ldi	r31, 0x00	; 0
    3dd4:	10 82       	st	Z, r1
//lcd_clear();
} 
    3dd6:	a4 96       	adiw	r28, 0x24	; 36
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	ff 91       	pop	r31
    3de2:	ef 91       	pop	r30
    3de4:	bf 91       	pop	r27
    3de6:	af 91       	pop	r26
    3de8:	9f 91       	pop	r25
    3dea:	8f 91       	pop	r24
    3dec:	7f 91       	pop	r23
    3dee:	6f 91       	pop	r22
    3df0:	5f 91       	pop	r21
    3df2:	4f 91       	pop	r20
    3df4:	3f 91       	pop	r19
    3df6:	2f 91       	pop	r18
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	0f 90       	pop	r0
    3e02:	00 92 5b 00 	sts	0x005B, r0
    3e06:	0f 90       	pop	r0
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	0f 90       	pop	r0
    3e0c:	1f 90       	pop	r1
    3e0e:	18 95       	reti

00003e10 <timer4_init>:

void timer4_init(void)
{
    3e10:	df 93       	push	r29
    3e12:	cf 93       	push	r28
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
 TCCR4B = 0x00; //stop
    3e18:	e1 ea       	ldi	r30, 0xA1	; 161
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	10 82       	st	Z, r1
 TCNT4H = 0xEF; //Counter higher 8 bit value
    3e1e:	e5 ea       	ldi	r30, 0xA5	; 165
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	8f ee       	ldi	r24, 0xEF	; 239
    3e24:	80 83       	st	Z, r24
 TCNT4L = 0x00; //Counter lower 8 bit value
    3e26:	e4 ea       	ldi	r30, 0xA4	; 164
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	10 82       	st	Z, r1
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used
    3e2c:	e9 ea       	ldi	r30, 0xA9	; 169
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
    3e32:	e8 ea       	ldi	r30, 0xA8	; 168
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
    3e38:	eb ea       	ldi	r30, 0xAB	; 171
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
    3e3e:	ea ea       	ldi	r30, 0xAA	; 170
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
    3e44:	ed ea       	ldi	r30, 0xAD	; 173
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
    3e4a:	ec ea       	ldi	r30, 0xAC	; 172
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
    3e50:	e7 ea       	ldi	r30, 0xA7	; 167
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
    3e56:	e6 ea       	ldi	r30, 0xA6	; 166
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	10 82       	st	Z, r1
 TCCR4A = 0x00; 
    3e5c:	e0 ea       	ldi	r30, 0xA0	; 160
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	10 82       	st	Z, r1
 TCCR4C = 0x00;
    3e62:	e2 ea       	ldi	r30, 0xA2	; 162
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	10 82       	st	Z, r1
 TCCR4B = 0x05; //start Timer
    3e68:	e1 ea       	ldi	r30, 0xA1	; 161
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	85 e0       	ldi	r24, 0x05	; 5
    3e6e:	80 83       	st	Z, r24
}
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <init_devices>:


////timerrrrrrrrrrrrrrrrrr 44444444

void init_devices (void)
{
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    3e7e:	f8 94       	cli
	port_init();
    3e80:	0e 94 ad 0a 	call	0x155a	; 0x155a <port_init>
	adc_init();
    3e84:	0e 94 19 0b 	call	0x1632	; 0x1632 <adc_init>
	uart0_init();
    3e88:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart0_init>
	timer5_init();
    3e8c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <timer5_init>
	timer4_init();
    3e90:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <timer4_init>

 TIMSK4 = 0x01; //timer4 overflow interrupt enable
    3e94:	e2 e7       	ldi	r30, 0x72	; 114
    3e96:	f0 e0       	ldi	r31, 0x00	; 0
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	80 83       	st	Z, r24
 TIMSK3 = 0x01;
    3e9c:	e1 e7       	ldi	r30, 0x71	; 113
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	80 83       	st	Z, r24
 left_position_encoder_interrupt_init();
    3ea4:	0e 94 48 0c 	call	0x1890	; 0x1890 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    3ea8:	0e 94 5f 0c 	call	0x18be	; 0x18be <right_position_encoder_interrupt_init>
 button_interrupt_init();
    3eac:	0e 94 76 0c 	call	0x18ec	; 0x18ec <button_interrupt_init>
	sei();   //Enables the global interrupts
    3eb0:	78 94       	sei
}
    3eb2:	cf 91       	pop	r28
    3eb4:	df 91       	pop	r29
    3eb6:	08 95       	ret

00003eb8 <test>:
int a=0;
void test()
{a++;
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	80 91 e9 04 	lds	r24, 0x04E9
    3ec4:	90 91 ea 04 	lds	r25, 0x04EA
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	90 93 ea 04 	sts	0x04EA, r25
    3ece:	80 93 e9 04 	sts	0x04E9, r24
	lcd_clear();
    3ed2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
	lcd_cursor(1,1);
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	61 e0       	ldi	r22, 0x01	; 1
    3eda:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
lcd_num(a);
    3ede:	80 91 e9 04 	lds	r24, 0x04E9
    3ee2:	90 91 ea 04 	lds	r25, 0x04EA
    3ee6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <lcd_num>
	lcd_string("hello world");
    3eea:	85 eb       	ldi	r24, 0xB5	; 181
    3eec:	93 e0       	ldi	r25, 0x03	; 3
    3eee:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
	setTimer3(3,&test);
    3ef2:	2c e5       	ldi	r18, 0x5C	; 92
    3ef4:	3f e1       	ldi	r19, 0x1F	; 31
    3ef6:	83 e0       	ldi	r24, 0x03	; 3
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	b9 01       	movw	r22, r18
    3efc:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <setTimer3>
}
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <main>:

//Main Function
int main()
{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	c4 56       	subi	r28, 0x64	; 100
    3f10:	d0 40       	sbci	r29, 0x00	; 0
    3f12:	0f b6       	in	r0, 0x3f	; 63
    3f14:	f8 94       	cli
    3f16:	de bf       	out	0x3e, r29	; 62
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    3f1c:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <init_devices>
	lcd_set_4bit();
    3f20:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    3f24:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
	leftVel=100;
    3f28:	84 e6       	ldi	r24, 0x64	; 100
    3f2a:	80 93 09 05 	sts	0x0509, r24
	rightVel=100;
    3f2e:	84 e6       	ldi	r24, 0x64	; 100
    3f30:	80 93 0c 05 	sts	0x050C, r24
	functionFlag=0;
    3f34:	10 92 d7 04 	sts	0x04D7, r1
    3f38:	10 92 d8 04 	sts	0x04D8, r1
    3f3c:	10 92 d9 04 	sts	0x04D9, r1
    3f40:	10 92 da 04 	sts	0x04DA, r1
    3f44:	10 92 db 04 	sts	0x04DB, r1
    3f48:	10 92 dc 04 	sts	0x04DC, r1
    3f4c:	10 92 dd 04 	sts	0x04DD, r1
    3f50:	10 92 de 04 	sts	0x04DE, r1

velocity(254,254);
    3f54:	8e ef       	ldi	r24, 0xFE	; 254
    3f56:	6e ef       	ldi	r22, 0xFE	; 254
    3f58:	0e 94 8a 0b 	call	0x1714	; 0x1714 <velocity>

//rollLCD("hello world. i am a botsfsfghsflkj ghoosfdgo odfgh oidfhgf ufgj");
//strictForward();
	while(1){
	char a[100];
	serial_getString(a,100);
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	64 e6       	ldi	r22, 0x64	; 100
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <serial_getString>
	invoker(a);
    3f68:	ce 01       	movw	r24, r28
    3f6a:	01 96       	adiw	r24, 0x01	; 1
    3f6c:	0e 94 07 11 	call	0x220e	; 0x220e <invoker>
    3f70:	f5 cf       	rjmp	.-22     	; 0x3f5c <main+0x56>

00003f72 <__fixunssfsi>:
    3f72:	ef 92       	push	r14
    3f74:	ff 92       	push	r15
    3f76:	0f 93       	push	r16
    3f78:	1f 93       	push	r17
    3f7a:	7b 01       	movw	r14, r22
    3f7c:	8c 01       	movw	r16, r24
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	5f e4       	ldi	r21, 0x4F	; 79
    3f86:	0e 94 ca 33 	call	0x6794	; 0x6794 <__gesf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	8c f0       	brlt	.+34     	; 0x3fb0 <__fixunssfsi+0x3e>
    3f8e:	c8 01       	movw	r24, r16
    3f90:	b7 01       	movw	r22, r14
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	5f e4       	ldi	r21, 0x4F	; 79
    3f9a:	0e 94 96 31 	call	0x632c	; 0x632c <__subsf3>
    3f9e:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    3fa2:	9b 01       	movw	r18, r22
    3fa4:	ac 01       	movw	r20, r24
    3fa6:	20 50       	subi	r18, 0x00	; 0
    3fa8:	30 40       	sbci	r19, 0x00	; 0
    3faa:	40 40       	sbci	r20, 0x00	; 0
    3fac:	50 48       	sbci	r21, 0x80	; 128
    3fae:	06 c0       	rjmp	.+12     	; 0x3fbc <__fixunssfsi+0x4a>
    3fb0:	c8 01       	movw	r24, r16
    3fb2:	b7 01       	movw	r22, r14
    3fb4:	0e 94 88 34 	call	0x6910	; 0x6910 <__fixsfsi>
    3fb8:	9b 01       	movw	r18, r22
    3fba:	ac 01       	movw	r20, r24
    3fbc:	b9 01       	movw	r22, r18
    3fbe:	ca 01       	movw	r24, r20
    3fc0:	1f 91       	pop	r17
    3fc2:	0f 91       	pop	r16
    3fc4:	ff 90       	pop	r15
    3fc6:	ef 90       	pop	r14
    3fc8:	08 95       	ret

00003fca <__divdi3>:
    3fca:	a2 e7       	ldi	r26, 0x72	; 114
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	eb ee       	ldi	r30, 0xEB	; 235
    3fd0:	ff e1       	ldi	r31, 0x1F	; 31
    3fd2:	0c 94 30 39 	jmp	0x7260	; 0x7260 <__prologue_saves__>
    3fd6:	98 2e       	mov	r9, r24
    3fd8:	89 2e       	mov	r8, r25
    3fda:	71 2e       	mov	r7, r17
    3fdc:	88 e0       	ldi	r24, 0x08	; 8
    3fde:	fe 01       	movw	r30, r28
    3fe0:	31 96       	adiw	r30, 0x01	; 1
    3fe2:	df 01       	movw	r26, r30
    3fe4:	68 2e       	mov	r6, r24
    3fe6:	1d 92       	st	X+, r1
    3fe8:	6a 94       	dec	r6
    3fea:	e9 f7       	brne	.-6      	; 0x3fe6 <__divdi3+0x1c>
    3fec:	29 83       	std	Y+1, r18	; 0x01
    3fee:	3a 83       	std	Y+2, r19	; 0x02
    3ff0:	4b 83       	std	Y+3, r20	; 0x03
    3ff2:	5c 83       	std	Y+4, r21	; 0x04
    3ff4:	6d 83       	std	Y+5, r22	; 0x05
    3ff6:	7e 83       	std	Y+6, r23	; 0x06
    3ff8:	9f 82       	std	Y+7, r9	; 0x07
    3ffa:	98 87       	std	Y+8, r25	; 0x08
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	39 96       	adiw	r30, 0x09	; 9
    4000:	df 01       	movw	r26, r30
    4002:	1d 92       	st	X+, r1
    4004:	8a 95       	dec	r24
    4006:	e9 f7       	brne	.-6      	; 0x4002 <__divdi3+0x38>
    4008:	a9 86       	std	Y+9, r10	; 0x09
    400a:	ba 86       	std	Y+10, r11	; 0x0a
    400c:	cb 86       	std	Y+11, r12	; 0x0b
    400e:	dc 86       	std	Y+12, r13	; 0x0c
    4010:	ed 86       	std	Y+13, r14	; 0x0d
    4012:	fe 86       	std	Y+14, r15	; 0x0e
    4014:	0f 87       	std	Y+15, r16	; 0x0f
    4016:	18 8b       	std	Y+16, r17	; 0x10
    4018:	8d 81       	ldd	r24, Y+5	; 0x05
    401a:	9e 81       	ldd	r25, Y+6	; 0x06
    401c:	af 81       	ldd	r26, Y+7	; 0x07
    401e:	b8 85       	ldd	r27, Y+8	; 0x08
    4020:	b7 fd       	sbrc	r27, 7
    4022:	07 c0       	rjmp	.+14     	; 0x4032 <__divdi3+0x68>
    4024:	e1 96       	adiw	r28, 0x31	; 49
    4026:	1c ae       	std	Y+60, r1	; 0x3c
    4028:	1d ae       	std	Y+61, r1	; 0x3d
    402a:	1e ae       	std	Y+62, r1	; 0x3e
    402c:	1f ae       	std	Y+63, r1	; 0x3f
    402e:	e1 97       	sbiw	r28, 0x31	; 49
    4030:	64 c0       	rjmp	.+200    	; 0x40fa <__divdi3+0x130>
    4032:	21 95       	neg	r18
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	12 16       	cp	r1, r18
    4038:	08 f0       	brcs	.+2      	; 0x403c <__divdi3+0x72>
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	31 95       	neg	r19
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	13 16       	cp	r1, r19
    4042:	08 f0       	brcs	.+2      	; 0x4046 <__divdi3+0x7c>
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	b3 2f       	mov	r27, r19
    4048:	b8 1b       	sub	r27, r24
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	3b 17       	cp	r19, r27
    404e:	08 f0       	brcs	.+2      	; 0x4052 <__divdi3+0x88>
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	98 2b       	or	r25, r24
    4054:	41 95       	neg	r20
    4056:	31 e0       	ldi	r19, 0x01	; 1
    4058:	14 16       	cp	r1, r20
    405a:	08 f0       	brcs	.+2      	; 0x405e <__divdi3+0x94>
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	a4 2f       	mov	r26, r20
    4060:	a9 1b       	sub	r26, r25
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	4a 17       	cp	r20, r26
    4066:	08 f0       	brcs	.+2      	; 0x406a <__divdi3+0xa0>
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	38 2b       	or	r19, r24
    406c:	51 95       	neg	r21
    406e:	91 e0       	ldi	r25, 0x01	; 1
    4070:	15 16       	cp	r1, r21
    4072:	08 f0       	brcs	.+2      	; 0x4076 <__divdi3+0xac>
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	f5 2f       	mov	r31, r21
    4078:	f3 1b       	sub	r31, r19
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	5f 17       	cp	r21, r31
    407e:	08 f0       	brcs	.+2      	; 0x4082 <__divdi3+0xb8>
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	98 2b       	or	r25, r24
    4084:	61 95       	neg	r22
    4086:	31 e0       	ldi	r19, 0x01	; 1
    4088:	16 16       	cp	r1, r22
    408a:	08 f0       	brcs	.+2      	; 0x408e <__divdi3+0xc4>
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	e6 2f       	mov	r30, r22
    4090:	e9 1b       	sub	r30, r25
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	6e 17       	cp	r22, r30
    4096:	08 f0       	brcs	.+2      	; 0x409a <__divdi3+0xd0>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	38 2b       	or	r19, r24
    409c:	71 95       	neg	r23
    409e:	41 e0       	ldi	r20, 0x01	; 1
    40a0:	17 16       	cp	r1, r23
    40a2:	08 f0       	brcs	.+2      	; 0x40a6 <__divdi3+0xdc>
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	57 2f       	mov	r21, r23
    40a8:	53 1b       	sub	r21, r19
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	75 17       	cp	r23, r21
    40ae:	08 f0       	brcs	.+2      	; 0x40b2 <__divdi3+0xe8>
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	48 2b       	or	r20, r24
    40b4:	89 2d       	mov	r24, r9
    40b6:	81 95       	neg	r24
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	18 16       	cp	r1, r24
    40bc:	08 f0       	brcs	.+2      	; 0x40c0 <__divdi3+0xf6>
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	68 2e       	mov	r6, r24
    40c2:	64 1a       	sub	r6, r20
    40c4:	46 2d       	mov	r20, r6
    40c6:	31 e0       	ldi	r19, 0x01	; 1
    40c8:	86 15       	cp	r24, r6
    40ca:	08 f0       	brcs	.+2      	; 0x40ce <__divdi3+0x104>
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	93 2b       	or	r25, r19
    40d0:	88 2d       	mov	r24, r8
    40d2:	81 95       	neg	r24
    40d4:	89 1b       	sub	r24, r25
    40d6:	29 83       	std	Y+1, r18	; 0x01
    40d8:	ba 83       	std	Y+2, r27	; 0x02
    40da:	ab 83       	std	Y+3, r26	; 0x03
    40dc:	fc 83       	std	Y+4, r31	; 0x04
    40de:	ed 83       	std	Y+5, r30	; 0x05
    40e0:	5e 83       	std	Y+6, r21	; 0x06
    40e2:	4f 83       	std	Y+7, r20	; 0x07
    40e4:	88 87       	std	Y+8, r24	; 0x08
    40e6:	2f ef       	ldi	r18, 0xFF	; 255
    40e8:	3f ef       	ldi	r19, 0xFF	; 255
    40ea:	4f ef       	ldi	r20, 0xFF	; 255
    40ec:	5f ef       	ldi	r21, 0xFF	; 255
    40ee:	e1 96       	adiw	r28, 0x31	; 49
    40f0:	2c af       	std	Y+60, r18	; 0x3c
    40f2:	3d af       	std	Y+61, r19	; 0x3d
    40f4:	4e af       	std	Y+62, r20	; 0x3e
    40f6:	5f af       	std	Y+63, r21	; 0x3f
    40f8:	e1 97       	sbiw	r28, 0x31	; 49
    40fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fe:	af 85       	ldd	r26, Y+15	; 0x0f
    4100:	b8 89       	ldd	r27, Y+16	; 0x10
    4102:	b7 ff       	sbrs	r27, 7
    4104:	6a c0       	rjmp	.+212    	; 0x41da <__divdi3+0x210>
    4106:	e1 96       	adiw	r28, 0x31	; 49
    4108:	4c ad       	ldd	r20, Y+60	; 0x3c
    410a:	5d ad       	ldd	r21, Y+61	; 0x3d
    410c:	6e ad       	ldd	r22, Y+62	; 0x3e
    410e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4110:	e1 97       	sbiw	r28, 0x31	; 49
    4112:	40 95       	com	r20
    4114:	50 95       	com	r21
    4116:	60 95       	com	r22
    4118:	70 95       	com	r23
    411a:	e1 96       	adiw	r28, 0x31	; 49
    411c:	4c af       	std	Y+60, r20	; 0x3c
    411e:	5d af       	std	Y+61, r21	; 0x3d
    4120:	6e af       	std	Y+62, r22	; 0x3e
    4122:	7f af       	std	Y+63, r23	; 0x3f
    4124:	e1 97       	sbiw	r28, 0x31	; 49
    4126:	a1 94       	neg	r10
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	1a 14       	cp	r1, r10
    412c:	08 f0       	brcs	.+2      	; 0x4130 <__divdi3+0x166>
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	b1 94       	neg	r11
    4132:	91 e0       	ldi	r25, 0x01	; 1
    4134:	1b 14       	cp	r1, r11
    4136:	08 f0       	brcs	.+2      	; 0x413a <__divdi3+0x170>
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	6b 2d       	mov	r22, r11
    413c:	68 1b       	sub	r22, r24
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	b6 16       	cp	r11, r22
    4142:	08 f0       	brcs	.+2      	; 0x4146 <__divdi3+0x17c>
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	98 2b       	or	r25, r24
    4148:	c1 94       	neg	r12
    414a:	21 e0       	ldi	r18, 0x01	; 1
    414c:	1c 14       	cp	r1, r12
    414e:	08 f0       	brcs	.+2      	; 0x4152 <__divdi3+0x188>
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	5c 2d       	mov	r21, r12
    4154:	59 1b       	sub	r21, r25
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	c5 16       	cp	r12, r21
    415a:	08 f0       	brcs	.+2      	; 0x415e <__divdi3+0x194>
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	28 2b       	or	r18, r24
    4160:	d1 94       	neg	r13
    4162:	91 e0       	ldi	r25, 0x01	; 1
    4164:	1d 14       	cp	r1, r13
    4166:	08 f0       	brcs	.+2      	; 0x416a <__divdi3+0x1a0>
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	4d 2d       	mov	r20, r13
    416c:	42 1b       	sub	r20, r18
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	d4 16       	cp	r13, r20
    4172:	08 f0       	brcs	.+2      	; 0x4176 <__divdi3+0x1ac>
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	98 2b       	or	r25, r24
    4178:	e1 94       	neg	r14
    417a:	21 e0       	ldi	r18, 0x01	; 1
    417c:	1e 14       	cp	r1, r14
    417e:	08 f0       	brcs	.+2      	; 0x4182 <__divdi3+0x1b8>
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	3e 2d       	mov	r19, r14
    4184:	39 1b       	sub	r19, r25
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	e3 16       	cp	r14, r19
    418a:	08 f0       	brcs	.+2      	; 0x418e <__divdi3+0x1c4>
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	28 2b       	or	r18, r24
    4190:	f1 94       	neg	r15
    4192:	91 e0       	ldi	r25, 0x01	; 1
    4194:	1f 14       	cp	r1, r15
    4196:	08 f0       	brcs	.+2      	; 0x419a <__divdi3+0x1d0>
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	7f 2d       	mov	r23, r15
    419c:	72 1b       	sub	r23, r18
    419e:	27 2f       	mov	r18, r23
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	f7 16       	cp	r15, r23
    41a4:	08 f0       	brcs	.+2      	; 0x41a8 <__divdi3+0x1de>
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	98 2b       	or	r25, r24
    41aa:	01 95       	neg	r16
    41ac:	11 e0       	ldi	r17, 0x01	; 1
    41ae:	10 16       	cp	r1, r16
    41b0:	08 f0       	brcs	.+2      	; 0x41b4 <__divdi3+0x1ea>
    41b2:	10 e0       	ldi	r17, 0x00	; 0
    41b4:	80 2f       	mov	r24, r16
    41b6:	89 1b       	sub	r24, r25
    41b8:	98 2f       	mov	r25, r24
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	09 17       	cp	r16, r25
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <__divdi3+0x1f8>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	18 2b       	or	r17, r24
    41c4:	87 2d       	mov	r24, r7
    41c6:	81 95       	neg	r24
    41c8:	81 1b       	sub	r24, r17
    41ca:	a9 86       	std	Y+9, r10	; 0x09
    41cc:	6a 87       	std	Y+10, r22	; 0x0a
    41ce:	5b 87       	std	Y+11, r21	; 0x0b
    41d0:	4c 87       	std	Y+12, r20	; 0x0c
    41d2:	3d 87       	std	Y+13, r19	; 0x0d
    41d4:	2e 87       	std	Y+14, r18	; 0x0e
    41d6:	9f 87       	std	Y+15, r25	; 0x0f
    41d8:	88 8b       	std	Y+16, r24	; 0x10
    41da:	99 81       	ldd	r25, Y+1	; 0x01
    41dc:	2a 81       	ldd	r18, Y+2	; 0x02
    41de:	3b 81       	ldd	r19, Y+3	; 0x03
    41e0:	4c 81       	ldd	r20, Y+4	; 0x04
    41e2:	5d 81       	ldd	r21, Y+5	; 0x05
    41e4:	6e 81       	ldd	r22, Y+6	; 0x06
    41e6:	7f 81       	ldd	r23, Y+7	; 0x07
    41e8:	a8 85       	ldd	r26, Y+8	; 0x08
    41ea:	b9 85       	ldd	r27, Y+9	; 0x09
    41ec:	1a 85       	ldd	r17, Y+10	; 0x0a
    41ee:	0b 85       	ldd	r16, Y+11	; 0x0b
    41f0:	fc 84       	ldd	r15, Y+12	; 0x0c
    41f2:	ed 84       	ldd	r14, Y+13	; 0x0d
    41f4:	de 84       	ldd	r13, Y+14	; 0x0e
    41f6:	cf 84       	ldd	r12, Y+15	; 0x0f
    41f8:	b8 88       	ldd	r11, Y+16	; 0x10
    41fa:	88 e0       	ldi	r24, 0x08	; 8
    41fc:	e1 e1       	ldi	r30, 0x11	; 17
    41fe:	8e 2e       	mov	r8, r30
    4200:	91 2c       	mov	r9, r1
    4202:	8c 0e       	add	r8, r28
    4204:	9d 1e       	adc	r9, r29
    4206:	f4 01       	movw	r30, r8
    4208:	68 2e       	mov	r6, r24
    420a:	11 92       	st	Z+, r1
    420c:	6a 94       	dec	r6
    420e:	e9 f7       	brne	.-6      	; 0x420a <__divdi3+0x240>
    4210:	99 8b       	std	Y+17, r25	; 0x11
    4212:	2a 8b       	std	Y+18, r18	; 0x12
    4214:	3b 8b       	std	Y+19, r19	; 0x13
    4216:	4c 8b       	std	Y+20, r20	; 0x14
    4218:	5d 8b       	std	Y+21, r21	; 0x15
    421a:	6e 8b       	std	Y+22, r22	; 0x16
    421c:	7f 8b       	std	Y+23, r23	; 0x17
    421e:	a8 8f       	std	Y+24, r26	; 0x18
    4220:	9e 01       	movw	r18, r28
    4222:	27 5e       	subi	r18, 0xE7	; 231
    4224:	3f 4f       	sbci	r19, 0xFF	; 255
    4226:	f9 01       	movw	r30, r18
    4228:	11 92       	st	Z+, r1
    422a:	8a 95       	dec	r24
    422c:	e9 f7       	brne	.-6      	; 0x4228 <__divdi3+0x25e>
    422e:	b9 8f       	std	Y+25, r27	; 0x19
    4230:	1a 8f       	std	Y+26, r17	; 0x1a
    4232:	0b 8f       	std	Y+27, r16	; 0x1b
    4234:	fc 8e       	std	Y+28, r15	; 0x1c
    4236:	ed 8e       	std	Y+29, r14	; 0x1d
    4238:	de 8e       	std	Y+30, r13	; 0x1e
    423a:	cf 8e       	std	Y+31, r12	; 0x1f
    423c:	b8 a2       	std	Y+32, r11	; 0x20
    423e:	29 8c       	ldd	r2, Y+25	; 0x19
    4240:	3a 8c       	ldd	r3, Y+26	; 0x1a
    4242:	4b 8c       	ldd	r4, Y+27	; 0x1b
    4244:	5c 8c       	ldd	r5, Y+28	; 0x1c
    4246:	ed 8c       	ldd	r14, Y+29	; 0x1d
    4248:	fe 8c       	ldd	r15, Y+30	; 0x1e
    424a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    424c:	18 a1       	ldd	r17, Y+32	; 0x20
    424e:	69 88       	ldd	r6, Y+17	; 0x11
    4250:	7a 88       	ldd	r7, Y+18	; 0x12
    4252:	8b 88       	ldd	r8, Y+19	; 0x13
    4254:	9c 88       	ldd	r9, Y+20	; 0x14
    4256:	21 96       	adiw	r28, 0x01	; 1
    4258:	6c ae       	std	Y+60, r6	; 0x3c
    425a:	7d ae       	std	Y+61, r7	; 0x3d
    425c:	8e ae       	std	Y+62, r8	; 0x3e
    425e:	9f ae       	std	Y+63, r9	; 0x3f
    4260:	21 97       	sbiw	r28, 0x01	; 1
    4262:	6d 88       	ldd	r6, Y+21	; 0x15
    4264:	7e 88       	ldd	r7, Y+22	; 0x16
    4266:	8f 88       	ldd	r8, Y+23	; 0x17
    4268:	98 8c       	ldd	r9, Y+24	; 0x18
    426a:	e1 14       	cp	r14, r1
    426c:	f1 04       	cpc	r15, r1
    426e:	01 05       	cpc	r16, r1
    4270:	11 05       	cpc	r17, r1
    4272:	09 f0       	breq	.+2      	; 0x4276 <__divdi3+0x2ac>
    4274:	d9 c3       	rjmp	.+1970   	; 0x4a28 <__divdi3+0xa5e>
    4276:	62 14       	cp	r6, r2
    4278:	73 04       	cpc	r7, r3
    427a:	84 04       	cpc	r8, r4
    427c:	95 04       	cpc	r9, r5
    427e:	08 f0       	brcs	.+2      	; 0x4282 <__divdi3+0x2b8>
    4280:	57 c1       	rjmp	.+686    	; 0x4530 <__divdi3+0x566>
    4282:	00 e0       	ldi	r16, 0x00	; 0
    4284:	20 16       	cp	r2, r16
    4286:	00 e0       	ldi	r16, 0x00	; 0
    4288:	30 06       	cpc	r3, r16
    428a:	01 e0       	ldi	r16, 0x01	; 1
    428c:	40 06       	cpc	r4, r16
    428e:	00 e0       	ldi	r16, 0x00	; 0
    4290:	50 06       	cpc	r5, r16
    4292:	88 f4       	brcc	.+34     	; 0x42b6 <__divdi3+0x2ec>
    4294:	1f ef       	ldi	r17, 0xFF	; 255
    4296:	21 16       	cp	r2, r17
    4298:	31 04       	cpc	r3, r1
    429a:	41 04       	cpc	r4, r1
    429c:	51 04       	cpc	r5, r1
    429e:	39 f0       	breq	.+14     	; 0x42ae <__divdi3+0x2e4>
    42a0:	30 f0       	brcs	.+12     	; 0x42ae <__divdi3+0x2e4>
    42a2:	48 e0       	ldi	r20, 0x08	; 8
    42a4:	e4 2e       	mov	r14, r20
    42a6:	f1 2c       	mov	r15, r1
    42a8:	01 2d       	mov	r16, r1
    42aa:	11 2d       	mov	r17, r1
    42ac:	18 c0       	rjmp	.+48     	; 0x42de <__divdi3+0x314>
    42ae:	ee 24       	eor	r14, r14
    42b0:	ff 24       	eor	r15, r15
    42b2:	87 01       	movw	r16, r14
    42b4:	14 c0       	rjmp	.+40     	; 0x42de <__divdi3+0x314>
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	22 16       	cp	r2, r18
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	32 06       	cpc	r3, r18
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	42 06       	cpc	r4, r18
    42c2:	21 e0       	ldi	r18, 0x01	; 1
    42c4:	52 06       	cpc	r5, r18
    42c6:	30 f0       	brcs	.+12     	; 0x42d4 <__divdi3+0x30a>
    42c8:	38 e1       	ldi	r19, 0x18	; 24
    42ca:	e3 2e       	mov	r14, r19
    42cc:	f1 2c       	mov	r15, r1
    42ce:	01 2d       	mov	r16, r1
    42d0:	11 2d       	mov	r17, r1
    42d2:	05 c0       	rjmp	.+10     	; 0x42de <__divdi3+0x314>
    42d4:	20 e1       	ldi	r18, 0x10	; 16
    42d6:	e2 2e       	mov	r14, r18
    42d8:	f1 2c       	mov	r15, r1
    42da:	01 2d       	mov	r16, r1
    42dc:	11 2d       	mov	r17, r1
    42de:	d2 01       	movw	r26, r4
    42e0:	c1 01       	movw	r24, r2
    42e2:	0e 2c       	mov	r0, r14
    42e4:	04 c0       	rjmp	.+8      	; 0x42ee <__divdi3+0x324>
    42e6:	b6 95       	lsr	r27
    42e8:	a7 95       	ror	r26
    42ea:	97 95       	ror	r25
    42ec:	87 95       	ror	r24
    42ee:	0a 94       	dec	r0
    42f0:	d2 f7       	brpl	.-12     	; 0x42e6 <__divdi3+0x31c>
    42f2:	87 53       	subi	r24, 0x37	; 55
    42f4:	9c 4f       	sbci	r25, 0xFC	; 252
    42f6:	dc 01       	movw	r26, r24
    42f8:	2c 91       	ld	r18, X
    42fa:	80 e2       	ldi	r24, 0x20	; 32
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	a0 e0       	ldi	r26, 0x00	; 0
    4300:	b0 e0       	ldi	r27, 0x00	; 0
    4302:	8e 19       	sub	r24, r14
    4304:	9f 09       	sbc	r25, r15
    4306:	a0 0b       	sbc	r26, r16
    4308:	b1 0b       	sbc	r27, r17
    430a:	7c 01       	movw	r14, r24
    430c:	8d 01       	movw	r16, r26
    430e:	e2 1a       	sub	r14, r18
    4310:	f1 08       	sbc	r15, r1
    4312:	01 09       	sbc	r16, r1
    4314:	11 09       	sbc	r17, r1
    4316:	e1 14       	cp	r14, r1
    4318:	f1 04       	cpc	r15, r1
    431a:	01 05       	cpc	r16, r1
    431c:	11 05       	cpc	r17, r1
    431e:	d1 f1       	breq	.+116    	; 0x4394 <__divdi3+0x3ca>
    4320:	0e 2c       	mov	r0, r14
    4322:	04 c0       	rjmp	.+8      	; 0x432c <__divdi3+0x362>
    4324:	22 0c       	add	r2, r2
    4326:	33 1c       	adc	r3, r3
    4328:	44 1c       	adc	r4, r4
    432a:	55 1c       	adc	r5, r5
    432c:	0a 94       	dec	r0
    432e:	d2 f7       	brpl	.-12     	; 0x4324 <__divdi3+0x35a>
    4330:	a4 01       	movw	r20, r8
    4332:	93 01       	movw	r18, r6
    4334:	0e 2c       	mov	r0, r14
    4336:	04 c0       	rjmp	.+8      	; 0x4340 <__divdi3+0x376>
    4338:	22 0f       	add	r18, r18
    433a:	33 1f       	adc	r19, r19
    433c:	44 1f       	adc	r20, r20
    433e:	55 1f       	adc	r21, r21
    4340:	0a 94       	dec	r0
    4342:	d2 f7       	brpl	.-12     	; 0x4338 <__divdi3+0x36e>
    4344:	80 e2       	ldi	r24, 0x20	; 32
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	8e 19       	sub	r24, r14
    434a:	9f 09       	sbc	r25, r15
    434c:	21 96       	adiw	r28, 0x01	; 1
    434e:	6c ac       	ldd	r6, Y+60	; 0x3c
    4350:	7d ac       	ldd	r7, Y+61	; 0x3d
    4352:	8e ac       	ldd	r8, Y+62	; 0x3e
    4354:	9f ac       	ldd	r9, Y+63	; 0x3f
    4356:	21 97       	sbiw	r28, 0x01	; 1
    4358:	04 c0       	rjmp	.+8      	; 0x4362 <__divdi3+0x398>
    435a:	96 94       	lsr	r9
    435c:	87 94       	ror	r8
    435e:	77 94       	ror	r7
    4360:	67 94       	ror	r6
    4362:	8a 95       	dec	r24
    4364:	d2 f7       	brpl	.-12     	; 0x435a <__divdi3+0x390>
    4366:	62 2a       	or	r6, r18
    4368:	73 2a       	or	r7, r19
    436a:	84 2a       	or	r8, r20
    436c:	95 2a       	or	r9, r21
    436e:	21 96       	adiw	r28, 0x01	; 1
    4370:	ac ac       	ldd	r10, Y+60	; 0x3c
    4372:	bd ac       	ldd	r11, Y+61	; 0x3d
    4374:	ce ac       	ldd	r12, Y+62	; 0x3e
    4376:	df ac       	ldd	r13, Y+63	; 0x3f
    4378:	21 97       	sbiw	r28, 0x01	; 1
    437a:	04 c0       	rjmp	.+8      	; 0x4384 <__divdi3+0x3ba>
    437c:	aa 0c       	add	r10, r10
    437e:	bb 1c       	adc	r11, r11
    4380:	cc 1c       	adc	r12, r12
    4382:	dd 1c       	adc	r13, r13
    4384:	ea 94       	dec	r14
    4386:	d2 f7       	brpl	.-12     	; 0x437c <__divdi3+0x3b2>
    4388:	21 96       	adiw	r28, 0x01	; 1
    438a:	ac ae       	std	Y+60, r10	; 0x3c
    438c:	bd ae       	std	Y+61, r11	; 0x3d
    438e:	ce ae       	std	Y+62, r12	; 0x3e
    4390:	df ae       	std	Y+63, r13	; 0x3f
    4392:	21 97       	sbiw	r28, 0x01	; 1
    4394:	62 01       	movw	r12, r4
    4396:	ee 24       	eor	r14, r14
    4398:	ff 24       	eor	r15, r15
    439a:	29 96       	adiw	r28, 0x09	; 9
    439c:	cc ae       	std	Y+60, r12	; 0x3c
    439e:	dd ae       	std	Y+61, r13	; 0x3d
    43a0:	ee ae       	std	Y+62, r14	; 0x3e
    43a2:	ff ae       	std	Y+63, r15	; 0x3f
    43a4:	29 97       	sbiw	r28, 0x09	; 9
    43a6:	92 01       	movw	r18, r4
    43a8:	81 01       	movw	r16, r2
    43aa:	20 70       	andi	r18, 0x00	; 0
    43ac:	30 70       	andi	r19, 0x00	; 0
    43ae:	2d 96       	adiw	r28, 0x0d	; 13
    43b0:	0c af       	std	Y+60, r16	; 0x3c
    43b2:	1d af       	std	Y+61, r17	; 0x3d
    43b4:	2e af       	std	Y+62, r18	; 0x3e
    43b6:	3f af       	std	Y+63, r19	; 0x3f
    43b8:	2d 97       	sbiw	r28, 0x0d	; 13
    43ba:	c4 01       	movw	r24, r8
    43bc:	b3 01       	movw	r22, r6
    43be:	a7 01       	movw	r20, r14
    43c0:	96 01       	movw	r18, r12
    43c2:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    43c6:	7b 01       	movw	r14, r22
    43c8:	8c 01       	movw	r16, r24
    43ca:	c4 01       	movw	r24, r8
    43cc:	b3 01       	movw	r22, r6
    43ce:	29 96       	adiw	r28, 0x09	; 9
    43d0:	2c ad       	ldd	r18, Y+60	; 0x3c
    43d2:	3d ad       	ldd	r19, Y+61	; 0x3d
    43d4:	4e ad       	ldd	r20, Y+62	; 0x3e
    43d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    43d8:	29 97       	sbiw	r28, 0x09	; 9
    43da:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    43de:	c9 01       	movw	r24, r18
    43e0:	da 01       	movw	r26, r20
    43e2:	3c 01       	movw	r6, r24
    43e4:	4d 01       	movw	r8, r26
    43e6:	c4 01       	movw	r24, r8
    43e8:	b3 01       	movw	r22, r6
    43ea:	2d 96       	adiw	r28, 0x0d	; 13
    43ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    43ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    43f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    43f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    43f4:	2d 97       	sbiw	r28, 0x0d	; 13
    43f6:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    43fa:	9b 01       	movw	r18, r22
    43fc:	ac 01       	movw	r20, r24
    43fe:	87 01       	movw	r16, r14
    4400:	ff 24       	eor	r15, r15
    4402:	ee 24       	eor	r14, r14
    4404:	21 96       	adiw	r28, 0x01	; 1
    4406:	ac ac       	ldd	r10, Y+60	; 0x3c
    4408:	bd ac       	ldd	r11, Y+61	; 0x3d
    440a:	ce ac       	ldd	r12, Y+62	; 0x3e
    440c:	df ac       	ldd	r13, Y+63	; 0x3f
    440e:	21 97       	sbiw	r28, 0x01	; 1
    4410:	c6 01       	movw	r24, r12
    4412:	aa 27       	eor	r26, r26
    4414:	bb 27       	eor	r27, r27
    4416:	57 01       	movw	r10, r14
    4418:	68 01       	movw	r12, r16
    441a:	a8 2a       	or	r10, r24
    441c:	b9 2a       	or	r11, r25
    441e:	ca 2a       	or	r12, r26
    4420:	db 2a       	or	r13, r27
    4422:	a2 16       	cp	r10, r18
    4424:	b3 06       	cpc	r11, r19
    4426:	c4 06       	cpc	r12, r20
    4428:	d5 06       	cpc	r13, r21
    442a:	e0 f4       	brcc	.+56     	; 0x4464 <__divdi3+0x49a>
    442c:	08 94       	sec
    442e:	61 08       	sbc	r6, r1
    4430:	71 08       	sbc	r7, r1
    4432:	81 08       	sbc	r8, r1
    4434:	91 08       	sbc	r9, r1
    4436:	a2 0c       	add	r10, r2
    4438:	b3 1c       	adc	r11, r3
    443a:	c4 1c       	adc	r12, r4
    443c:	d5 1c       	adc	r13, r5
    443e:	a2 14       	cp	r10, r2
    4440:	b3 04       	cpc	r11, r3
    4442:	c4 04       	cpc	r12, r4
    4444:	d5 04       	cpc	r13, r5
    4446:	70 f0       	brcs	.+28     	; 0x4464 <__divdi3+0x49a>
    4448:	a2 16       	cp	r10, r18
    444a:	b3 06       	cpc	r11, r19
    444c:	c4 06       	cpc	r12, r20
    444e:	d5 06       	cpc	r13, r21
    4450:	48 f4       	brcc	.+18     	; 0x4464 <__divdi3+0x49a>
    4452:	08 94       	sec
    4454:	61 08       	sbc	r6, r1
    4456:	71 08       	sbc	r7, r1
    4458:	81 08       	sbc	r8, r1
    445a:	91 08       	sbc	r9, r1
    445c:	a2 0c       	add	r10, r2
    445e:	b3 1c       	adc	r11, r3
    4460:	c4 1c       	adc	r12, r4
    4462:	d5 1c       	adc	r13, r5
    4464:	a2 1a       	sub	r10, r18
    4466:	b3 0a       	sbc	r11, r19
    4468:	c4 0a       	sbc	r12, r20
    446a:	d5 0a       	sbc	r13, r21
    446c:	c6 01       	movw	r24, r12
    446e:	b5 01       	movw	r22, r10
    4470:	29 96       	adiw	r28, 0x09	; 9
    4472:	2c ad       	ldd	r18, Y+60	; 0x3c
    4474:	3d ad       	ldd	r19, Y+61	; 0x3d
    4476:	4e ad       	ldd	r20, Y+62	; 0x3e
    4478:	5f ad       	ldd	r21, Y+63	; 0x3f
    447a:	29 97       	sbiw	r28, 0x09	; 9
    447c:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4480:	7b 01       	movw	r14, r22
    4482:	8c 01       	movw	r16, r24
    4484:	c6 01       	movw	r24, r12
    4486:	b5 01       	movw	r22, r10
    4488:	29 96       	adiw	r28, 0x09	; 9
    448a:	2c ad       	ldd	r18, Y+60	; 0x3c
    448c:	3d ad       	ldd	r19, Y+61	; 0x3d
    448e:	4e ad       	ldd	r20, Y+62	; 0x3e
    4490:	5f ad       	ldd	r21, Y+63	; 0x3f
    4492:	29 97       	sbiw	r28, 0x09	; 9
    4494:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4498:	c9 01       	movw	r24, r18
    449a:	da 01       	movw	r26, r20
    449c:	5c 01       	movw	r10, r24
    449e:	6d 01       	movw	r12, r26
    44a0:	c6 01       	movw	r24, r12
    44a2:	b5 01       	movw	r22, r10
    44a4:	2d 96       	adiw	r28, 0x0d	; 13
    44a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    44a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    44aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    44ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    44ae:	2d 97       	sbiw	r28, 0x0d	; 13
    44b0:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    44b4:	9b 01       	movw	r18, r22
    44b6:	ac 01       	movw	r20, r24
    44b8:	87 01       	movw	r16, r14
    44ba:	ff 24       	eor	r15, r15
    44bc:	ee 24       	eor	r14, r14
    44be:	21 96       	adiw	r28, 0x01	; 1
    44c0:	8c ad       	ldd	r24, Y+60	; 0x3c
    44c2:	9d ad       	ldd	r25, Y+61	; 0x3d
    44c4:	ae ad       	ldd	r26, Y+62	; 0x3e
    44c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    44c8:	21 97       	sbiw	r28, 0x01	; 1
    44ca:	a0 70       	andi	r26, 0x00	; 0
    44cc:	b0 70       	andi	r27, 0x00	; 0
    44ce:	e8 2a       	or	r14, r24
    44d0:	f9 2a       	or	r15, r25
    44d2:	0a 2b       	or	r16, r26
    44d4:	1b 2b       	or	r17, r27
    44d6:	e2 16       	cp	r14, r18
    44d8:	f3 06       	cpc	r15, r19
    44da:	04 07       	cpc	r16, r20
    44dc:	15 07       	cpc	r17, r21
    44de:	c0 f4       	brcc	.+48     	; 0x4510 <__divdi3+0x546>
    44e0:	08 94       	sec
    44e2:	a1 08       	sbc	r10, r1
    44e4:	b1 08       	sbc	r11, r1
    44e6:	c1 08       	sbc	r12, r1
    44e8:	d1 08       	sbc	r13, r1
    44ea:	e2 0c       	add	r14, r2
    44ec:	f3 1c       	adc	r15, r3
    44ee:	04 1d       	adc	r16, r4
    44f0:	15 1d       	adc	r17, r5
    44f2:	e2 14       	cp	r14, r2
    44f4:	f3 04       	cpc	r15, r3
    44f6:	04 05       	cpc	r16, r4
    44f8:	15 05       	cpc	r17, r5
    44fa:	50 f0       	brcs	.+20     	; 0x4510 <__divdi3+0x546>
    44fc:	e2 16       	cp	r14, r18
    44fe:	f3 06       	cpc	r15, r19
    4500:	04 07       	cpc	r16, r20
    4502:	15 07       	cpc	r17, r21
    4504:	28 f4       	brcc	.+10     	; 0x4510 <__divdi3+0x546>
    4506:	08 94       	sec
    4508:	a1 08       	sbc	r10, r1
    450a:	b1 08       	sbc	r11, r1
    450c:	c1 08       	sbc	r12, r1
    450e:	d1 08       	sbc	r13, r1
    4510:	d3 01       	movw	r26, r6
    4512:	99 27       	eor	r25, r25
    4514:	88 27       	eor	r24, r24
    4516:	86 01       	movw	r16, r12
    4518:	75 01       	movw	r14, r10
    451a:	e8 2a       	or	r14, r24
    451c:	f9 2a       	or	r15, r25
    451e:	0a 2b       	or	r16, r26
    4520:	1b 2b       	or	r17, r27
    4522:	25 96       	adiw	r28, 0x05	; 5
    4524:	ec ae       	std	Y+60, r14	; 0x3c
    4526:	fd ae       	std	Y+61, r15	; 0x3d
    4528:	0e af       	std	Y+62, r16	; 0x3e
    452a:	1f af       	std	Y+63, r17	; 0x3f
    452c:	25 97       	sbiw	r28, 0x05	; 5
    452e:	eb c4       	rjmp	.+2518   	; 0x4f06 <__divdi3+0xf3c>
    4530:	21 14       	cp	r2, r1
    4532:	31 04       	cpc	r3, r1
    4534:	41 04       	cpc	r4, r1
    4536:	51 04       	cpc	r5, r1
    4538:	71 f4       	brne	.+28     	; 0x4556 <__divdi3+0x58c>
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	70 e0       	ldi	r23, 0x00	; 0
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e0       	ldi	r20, 0x00	; 0
    4548:	50 e0       	ldi	r21, 0x00	; 0
    454a:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    454e:	c9 01       	movw	r24, r18
    4550:	da 01       	movw	r26, r20
    4552:	1c 01       	movw	r2, r24
    4554:	2d 01       	movw	r4, r26
    4556:	00 e0       	ldi	r16, 0x00	; 0
    4558:	20 16       	cp	r2, r16
    455a:	00 e0       	ldi	r16, 0x00	; 0
    455c:	30 06       	cpc	r3, r16
    455e:	01 e0       	ldi	r16, 0x01	; 1
    4560:	40 06       	cpc	r4, r16
    4562:	00 e0       	ldi	r16, 0x00	; 0
    4564:	50 06       	cpc	r5, r16
    4566:	88 f4       	brcc	.+34     	; 0x458a <__divdi3+0x5c0>
    4568:	1f ef       	ldi	r17, 0xFF	; 255
    456a:	21 16       	cp	r2, r17
    456c:	31 04       	cpc	r3, r1
    456e:	41 04       	cpc	r4, r1
    4570:	51 04       	cpc	r5, r1
    4572:	31 f0       	breq	.+12     	; 0x4580 <__divdi3+0x5b6>
    4574:	28 f0       	brcs	.+10     	; 0x4580 <__divdi3+0x5b6>
    4576:	48 e0       	ldi	r20, 0x08	; 8
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	60 e0       	ldi	r22, 0x00	; 0
    457c:	70 e0       	ldi	r23, 0x00	; 0
    457e:	17 c0       	rjmp	.+46     	; 0x45ae <__divdi3+0x5e4>
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	12 c0       	rjmp	.+36     	; 0x45ae <__divdi3+0x5e4>
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	22 16       	cp	r2, r18
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	32 06       	cpc	r3, r18
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	42 06       	cpc	r4, r18
    4596:	21 e0       	ldi	r18, 0x01	; 1
    4598:	52 06       	cpc	r5, r18
    459a:	28 f0       	brcs	.+10     	; 0x45a6 <__divdi3+0x5dc>
    459c:	48 e1       	ldi	r20, 0x18	; 24
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	70 e0       	ldi	r23, 0x00	; 0
    45a4:	04 c0       	rjmp	.+8      	; 0x45ae <__divdi3+0x5e4>
    45a6:	40 e1       	ldi	r20, 0x10	; 16
    45a8:	50 e0       	ldi	r21, 0x00	; 0
    45aa:	60 e0       	ldi	r22, 0x00	; 0
    45ac:	70 e0       	ldi	r23, 0x00	; 0
    45ae:	d2 01       	movw	r26, r4
    45b0:	c1 01       	movw	r24, r2
    45b2:	04 2e       	mov	r0, r20
    45b4:	04 c0       	rjmp	.+8      	; 0x45be <__divdi3+0x5f4>
    45b6:	b6 95       	lsr	r27
    45b8:	a7 95       	ror	r26
    45ba:	97 95       	ror	r25
    45bc:	87 95       	ror	r24
    45be:	0a 94       	dec	r0
    45c0:	d2 f7       	brpl	.-12     	; 0x45b6 <__divdi3+0x5ec>
    45c2:	87 53       	subi	r24, 0x37	; 55
    45c4:	9c 4f       	sbci	r25, 0xFC	; 252
    45c6:	dc 01       	movw	r26, r24
    45c8:	2c 91       	ld	r18, X
    45ca:	e0 e2       	ldi	r30, 0x20	; 32
    45cc:	ee 2e       	mov	r14, r30
    45ce:	f1 2c       	mov	r15, r1
    45d0:	01 2d       	mov	r16, r1
    45d2:	11 2d       	mov	r17, r1
    45d4:	d8 01       	movw	r26, r16
    45d6:	c7 01       	movw	r24, r14
    45d8:	84 1b       	sub	r24, r20
    45da:	95 0b       	sbc	r25, r21
    45dc:	a6 0b       	sbc	r26, r22
    45de:	b7 0b       	sbc	r27, r23
    45e0:	82 1b       	sub	r24, r18
    45e2:	91 09       	sbc	r25, r1
    45e4:	a1 09       	sbc	r26, r1
    45e6:	b1 09       	sbc	r27, r1
    45e8:	00 97       	sbiw	r24, 0x00	; 0
    45ea:	a1 05       	cpc	r26, r1
    45ec:	b1 05       	cpc	r27, r1
    45ee:	61 f4       	brne	.+24     	; 0x4608 <__divdi3+0x63e>
    45f0:	64 01       	movw	r12, r8
    45f2:	53 01       	movw	r10, r6
    45f4:	a2 18       	sub	r10, r2
    45f6:	b3 08       	sbc	r11, r3
    45f8:	c4 08       	sbc	r12, r4
    45fa:	d5 08       	sbc	r13, r5
    45fc:	31 e0       	ldi	r19, 0x01	; 1
    45fe:	63 2e       	mov	r6, r19
    4600:	71 2c       	mov	r7, r1
    4602:	81 2c       	mov	r8, r1
    4604:	91 2c       	mov	r9, r1
    4606:	24 c1       	rjmp	.+584    	; 0x4850 <__divdi3+0x886>
    4608:	e3 96       	adiw	r28, 0x33	; 51
    460a:	8f af       	std	Y+63, r24	; 0x3f
    460c:	e3 97       	sbiw	r28, 0x33	; 51
    460e:	08 2e       	mov	r0, r24
    4610:	04 c0       	rjmp	.+8      	; 0x461a <__divdi3+0x650>
    4612:	22 0c       	add	r2, r2
    4614:	33 1c       	adc	r3, r3
    4616:	44 1c       	adc	r4, r4
    4618:	55 1c       	adc	r5, r5
    461a:	0a 94       	dec	r0
    461c:	d2 f7       	brpl	.-12     	; 0x4612 <__divdi3+0x648>
    461e:	ee 2d       	mov	r30, r14
    4620:	e8 1b       	sub	r30, r24
    4622:	64 01       	movw	r12, r8
    4624:	53 01       	movw	r10, r6
    4626:	0e 2e       	mov	r0, r30
    4628:	04 c0       	rjmp	.+8      	; 0x4632 <__divdi3+0x668>
    462a:	d6 94       	lsr	r13
    462c:	c7 94       	ror	r12
    462e:	b7 94       	ror	r11
    4630:	a7 94       	ror	r10
    4632:	0a 94       	dec	r0
    4634:	d2 f7       	brpl	.-12     	; 0x462a <__divdi3+0x660>
    4636:	a4 01       	movw	r20, r8
    4638:	93 01       	movw	r18, r6
    463a:	e3 96       	adiw	r28, 0x33	; 51
    463c:	0f ac       	ldd	r0, Y+63	; 0x3f
    463e:	e3 97       	sbiw	r28, 0x33	; 51
    4640:	04 c0       	rjmp	.+8      	; 0x464a <__divdi3+0x680>
    4642:	22 0f       	add	r18, r18
    4644:	33 1f       	adc	r19, r19
    4646:	44 1f       	adc	r20, r20
    4648:	55 1f       	adc	r21, r21
    464a:	0a 94       	dec	r0
    464c:	d2 f7       	brpl	.-12     	; 0x4642 <__divdi3+0x678>
    464e:	21 96       	adiw	r28, 0x01	; 1
    4650:	6c ac       	ldd	r6, Y+60	; 0x3c
    4652:	7d ac       	ldd	r7, Y+61	; 0x3d
    4654:	8e ac       	ldd	r8, Y+62	; 0x3e
    4656:	9f ac       	ldd	r9, Y+63	; 0x3f
    4658:	21 97       	sbiw	r28, 0x01	; 1
    465a:	0e 2e       	mov	r0, r30
    465c:	04 c0       	rjmp	.+8      	; 0x4666 <__divdi3+0x69c>
    465e:	96 94       	lsr	r9
    4660:	87 94       	ror	r8
    4662:	77 94       	ror	r7
    4664:	67 94       	ror	r6
    4666:	0a 94       	dec	r0
    4668:	d2 f7       	brpl	.-12     	; 0x465e <__divdi3+0x694>
    466a:	84 01       	movw	r16, r8
    466c:	73 01       	movw	r14, r6
    466e:	e2 2a       	or	r14, r18
    4670:	f3 2a       	or	r15, r19
    4672:	04 2b       	or	r16, r20
    4674:	15 2b       	or	r17, r21
    4676:	e9 ae       	std	Y+57, r14	; 0x39
    4678:	fa ae       	std	Y+58, r15	; 0x3a
    467a:	0b af       	std	Y+59, r16	; 0x3b
    467c:	1c af       	std	Y+60, r17	; 0x3c
    467e:	32 01       	movw	r6, r4
    4680:	88 24       	eor	r8, r8
    4682:	99 24       	eor	r9, r9
    4684:	92 01       	movw	r18, r4
    4686:	81 01       	movw	r16, r2
    4688:	20 70       	andi	r18, 0x00	; 0
    468a:	30 70       	andi	r19, 0x00	; 0
    468c:	61 96       	adiw	r28, 0x11	; 17
    468e:	0c af       	std	Y+60, r16	; 0x3c
    4690:	1d af       	std	Y+61, r17	; 0x3d
    4692:	2e af       	std	Y+62, r18	; 0x3e
    4694:	3f af       	std	Y+63, r19	; 0x3f
    4696:	61 97       	sbiw	r28, 0x11	; 17
    4698:	c6 01       	movw	r24, r12
    469a:	b5 01       	movw	r22, r10
    469c:	a4 01       	movw	r20, r8
    469e:	93 01       	movw	r18, r6
    46a0:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    46a4:	7b 01       	movw	r14, r22
    46a6:	8c 01       	movw	r16, r24
    46a8:	c6 01       	movw	r24, r12
    46aa:	b5 01       	movw	r22, r10
    46ac:	a4 01       	movw	r20, r8
    46ae:	93 01       	movw	r18, r6
    46b0:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    46b4:	c9 01       	movw	r24, r18
    46b6:	da 01       	movw	r26, r20
    46b8:	65 96       	adiw	r28, 0x15	; 21
    46ba:	8c af       	std	Y+60, r24	; 0x3c
    46bc:	9d af       	std	Y+61, r25	; 0x3d
    46be:	ae af       	std	Y+62, r26	; 0x3e
    46c0:	bf af       	std	Y+63, r27	; 0x3f
    46c2:	65 97       	sbiw	r28, 0x15	; 21
    46c4:	bc 01       	movw	r22, r24
    46c6:	cd 01       	movw	r24, r26
    46c8:	61 96       	adiw	r28, 0x11	; 17
    46ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    46cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    46ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    46d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    46d2:	61 97       	sbiw	r28, 0x11	; 17
    46d4:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    46d8:	9b 01       	movw	r18, r22
    46da:	ac 01       	movw	r20, r24
    46dc:	87 01       	movw	r16, r14
    46de:	ff 24       	eor	r15, r15
    46e0:	ee 24       	eor	r14, r14
    46e2:	a9 ac       	ldd	r10, Y+57	; 0x39
    46e4:	ba ac       	ldd	r11, Y+58	; 0x3a
    46e6:	cb ac       	ldd	r12, Y+59	; 0x3b
    46e8:	dc ac       	ldd	r13, Y+60	; 0x3c
    46ea:	c6 01       	movw	r24, r12
    46ec:	aa 27       	eor	r26, r26
    46ee:	bb 27       	eor	r27, r27
    46f0:	5c 01       	movw	r10, r24
    46f2:	6d 01       	movw	r12, r26
    46f4:	ae 28       	or	r10, r14
    46f6:	bf 28       	or	r11, r15
    46f8:	c0 2a       	or	r12, r16
    46fa:	d1 2a       	or	r13, r17
    46fc:	a2 16       	cp	r10, r18
    46fe:	b3 06       	cpc	r11, r19
    4700:	c4 06       	cpc	r12, r20
    4702:	d5 06       	cpc	r13, r21
    4704:	60 f5       	brcc	.+88     	; 0x475e <__divdi3+0x794>
    4706:	65 96       	adiw	r28, 0x15	; 21
    4708:	6c ad       	ldd	r22, Y+60	; 0x3c
    470a:	7d ad       	ldd	r23, Y+61	; 0x3d
    470c:	8e ad       	ldd	r24, Y+62	; 0x3e
    470e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4710:	65 97       	sbiw	r28, 0x15	; 21
    4712:	61 50       	subi	r22, 0x01	; 1
    4714:	70 40       	sbci	r23, 0x00	; 0
    4716:	80 40       	sbci	r24, 0x00	; 0
    4718:	90 40       	sbci	r25, 0x00	; 0
    471a:	65 96       	adiw	r28, 0x15	; 21
    471c:	6c af       	std	Y+60, r22	; 0x3c
    471e:	7d af       	std	Y+61, r23	; 0x3d
    4720:	8e af       	std	Y+62, r24	; 0x3e
    4722:	9f af       	std	Y+63, r25	; 0x3f
    4724:	65 97       	sbiw	r28, 0x15	; 21
    4726:	a2 0c       	add	r10, r2
    4728:	b3 1c       	adc	r11, r3
    472a:	c4 1c       	adc	r12, r4
    472c:	d5 1c       	adc	r13, r5
    472e:	a2 14       	cp	r10, r2
    4730:	b3 04       	cpc	r11, r3
    4732:	c4 04       	cpc	r12, r4
    4734:	d5 04       	cpc	r13, r5
    4736:	98 f0       	brcs	.+38     	; 0x475e <__divdi3+0x794>
    4738:	a2 16       	cp	r10, r18
    473a:	b3 06       	cpc	r11, r19
    473c:	c4 06       	cpc	r12, r20
    473e:	d5 06       	cpc	r13, r21
    4740:	70 f4       	brcc	.+28     	; 0x475e <__divdi3+0x794>
    4742:	61 50       	subi	r22, 0x01	; 1
    4744:	70 40       	sbci	r23, 0x00	; 0
    4746:	80 40       	sbci	r24, 0x00	; 0
    4748:	90 40       	sbci	r25, 0x00	; 0
    474a:	65 96       	adiw	r28, 0x15	; 21
    474c:	6c af       	std	Y+60, r22	; 0x3c
    474e:	7d af       	std	Y+61, r23	; 0x3d
    4750:	8e af       	std	Y+62, r24	; 0x3e
    4752:	9f af       	std	Y+63, r25	; 0x3f
    4754:	65 97       	sbiw	r28, 0x15	; 21
    4756:	a2 0c       	add	r10, r2
    4758:	b3 1c       	adc	r11, r3
    475a:	c4 1c       	adc	r12, r4
    475c:	d5 1c       	adc	r13, r5
    475e:	a2 1a       	sub	r10, r18
    4760:	b3 0a       	sbc	r11, r19
    4762:	c4 0a       	sbc	r12, r20
    4764:	d5 0a       	sbc	r13, r21
    4766:	c6 01       	movw	r24, r12
    4768:	b5 01       	movw	r22, r10
    476a:	a4 01       	movw	r20, r8
    476c:	93 01       	movw	r18, r6
    476e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4772:	7b 01       	movw	r14, r22
    4774:	8c 01       	movw	r16, r24
    4776:	c6 01       	movw	r24, r12
    4778:	b5 01       	movw	r22, r10
    477a:	a4 01       	movw	r20, r8
    477c:	93 01       	movw	r18, r6
    477e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4782:	c9 01       	movw	r24, r18
    4784:	da 01       	movw	r26, r20
    4786:	3c 01       	movw	r6, r24
    4788:	4d 01       	movw	r8, r26
    478a:	c4 01       	movw	r24, r8
    478c:	b3 01       	movw	r22, r6
    478e:	61 96       	adiw	r28, 0x11	; 17
    4790:	2c ad       	ldd	r18, Y+60	; 0x3c
    4792:	3d ad       	ldd	r19, Y+61	; 0x3d
    4794:	4e ad       	ldd	r20, Y+62	; 0x3e
    4796:	5f ad       	ldd	r21, Y+63	; 0x3f
    4798:	61 97       	sbiw	r28, 0x11	; 17
    479a:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    479e:	9b 01       	movw	r18, r22
    47a0:	ac 01       	movw	r20, r24
    47a2:	87 01       	movw	r16, r14
    47a4:	ff 24       	eor	r15, r15
    47a6:	ee 24       	eor	r14, r14
    47a8:	89 ad       	ldd	r24, Y+57	; 0x39
    47aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    47ac:	ab ad       	ldd	r26, Y+59	; 0x3b
    47ae:	bc ad       	ldd	r27, Y+60	; 0x3c
    47b0:	a0 70       	andi	r26, 0x00	; 0
    47b2:	b0 70       	andi	r27, 0x00	; 0
    47b4:	57 01       	movw	r10, r14
    47b6:	68 01       	movw	r12, r16
    47b8:	a8 2a       	or	r10, r24
    47ba:	b9 2a       	or	r11, r25
    47bc:	ca 2a       	or	r12, r26
    47be:	db 2a       	or	r13, r27
    47c0:	a2 16       	cp	r10, r18
    47c2:	b3 06       	cpc	r11, r19
    47c4:	c4 06       	cpc	r12, r20
    47c6:	d5 06       	cpc	r13, r21
    47c8:	e0 f4       	brcc	.+56     	; 0x4802 <__divdi3+0x838>
    47ca:	08 94       	sec
    47cc:	61 08       	sbc	r6, r1
    47ce:	71 08       	sbc	r7, r1
    47d0:	81 08       	sbc	r8, r1
    47d2:	91 08       	sbc	r9, r1
    47d4:	a2 0c       	add	r10, r2
    47d6:	b3 1c       	adc	r11, r3
    47d8:	c4 1c       	adc	r12, r4
    47da:	d5 1c       	adc	r13, r5
    47dc:	a2 14       	cp	r10, r2
    47de:	b3 04       	cpc	r11, r3
    47e0:	c4 04       	cpc	r12, r4
    47e2:	d5 04       	cpc	r13, r5
    47e4:	70 f0       	brcs	.+28     	; 0x4802 <__divdi3+0x838>
    47e6:	a2 16       	cp	r10, r18
    47e8:	b3 06       	cpc	r11, r19
    47ea:	c4 06       	cpc	r12, r20
    47ec:	d5 06       	cpc	r13, r21
    47ee:	48 f4       	brcc	.+18     	; 0x4802 <__divdi3+0x838>
    47f0:	08 94       	sec
    47f2:	61 08       	sbc	r6, r1
    47f4:	71 08       	sbc	r7, r1
    47f6:	81 08       	sbc	r8, r1
    47f8:	91 08       	sbc	r9, r1
    47fa:	a2 0c       	add	r10, r2
    47fc:	b3 1c       	adc	r11, r3
    47fe:	c4 1c       	adc	r12, r4
    4800:	d5 1c       	adc	r13, r5
    4802:	21 96       	adiw	r28, 0x01	; 1
    4804:	8c ad       	ldd	r24, Y+60	; 0x3c
    4806:	9d ad       	ldd	r25, Y+61	; 0x3d
    4808:	ae ad       	ldd	r26, Y+62	; 0x3e
    480a:	bf ad       	ldd	r27, Y+63	; 0x3f
    480c:	21 97       	sbiw	r28, 0x01	; 1
    480e:	e3 96       	adiw	r28, 0x33	; 51
    4810:	0f ac       	ldd	r0, Y+63	; 0x3f
    4812:	e3 97       	sbiw	r28, 0x33	; 51
    4814:	04 c0       	rjmp	.+8      	; 0x481e <__divdi3+0x854>
    4816:	88 0f       	add	r24, r24
    4818:	99 1f       	adc	r25, r25
    481a:	aa 1f       	adc	r26, r26
    481c:	bb 1f       	adc	r27, r27
    481e:	0a 94       	dec	r0
    4820:	d2 f7       	brpl	.-12     	; 0x4816 <__divdi3+0x84c>
    4822:	21 96       	adiw	r28, 0x01	; 1
    4824:	8c af       	std	Y+60, r24	; 0x3c
    4826:	9d af       	std	Y+61, r25	; 0x3d
    4828:	ae af       	std	Y+62, r26	; 0x3e
    482a:	bf af       	std	Y+63, r27	; 0x3f
    482c:	21 97       	sbiw	r28, 0x01	; 1
    482e:	a2 1a       	sub	r10, r18
    4830:	b3 0a       	sbc	r11, r19
    4832:	c4 0a       	sbc	r12, r20
    4834:	d5 0a       	sbc	r13, r21
    4836:	65 96       	adiw	r28, 0x15	; 21
    4838:	ec ac       	ldd	r14, Y+60	; 0x3c
    483a:	fd ac       	ldd	r15, Y+61	; 0x3d
    483c:	0e ad       	ldd	r16, Y+62	; 0x3e
    483e:	1f ad       	ldd	r17, Y+63	; 0x3f
    4840:	65 97       	sbiw	r28, 0x15	; 21
    4842:	d7 01       	movw	r26, r14
    4844:	99 27       	eor	r25, r25
    4846:	88 27       	eor	r24, r24
    4848:	68 2a       	or	r6, r24
    484a:	79 2a       	or	r7, r25
    484c:	8a 2a       	or	r8, r26
    484e:	9b 2a       	or	r9, r27
    4850:	82 01       	movw	r16, r4
    4852:	22 27       	eor	r18, r18
    4854:	33 27       	eor	r19, r19
    4856:	69 96       	adiw	r28, 0x19	; 25
    4858:	0c af       	std	Y+60, r16	; 0x3c
    485a:	1d af       	std	Y+61, r17	; 0x3d
    485c:	2e af       	std	Y+62, r18	; 0x3e
    485e:	3f af       	std	Y+63, r19	; 0x3f
    4860:	69 97       	sbiw	r28, 0x19	; 25
    4862:	a2 01       	movw	r20, r4
    4864:	91 01       	movw	r18, r2
    4866:	40 70       	andi	r20, 0x00	; 0
    4868:	50 70       	andi	r21, 0x00	; 0
    486a:	6d 96       	adiw	r28, 0x1d	; 29
    486c:	2c af       	std	Y+60, r18	; 0x3c
    486e:	3d af       	std	Y+61, r19	; 0x3d
    4870:	4e af       	std	Y+62, r20	; 0x3e
    4872:	5f af       	std	Y+63, r21	; 0x3f
    4874:	6d 97       	sbiw	r28, 0x1d	; 29
    4876:	c6 01       	movw	r24, r12
    4878:	b5 01       	movw	r22, r10
    487a:	69 96       	adiw	r28, 0x19	; 25
    487c:	2c ad       	ldd	r18, Y+60	; 0x3c
    487e:	3d ad       	ldd	r19, Y+61	; 0x3d
    4880:	4e ad       	ldd	r20, Y+62	; 0x3e
    4882:	5f ad       	ldd	r21, Y+63	; 0x3f
    4884:	69 97       	sbiw	r28, 0x19	; 25
    4886:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    488a:	7b 01       	movw	r14, r22
    488c:	8c 01       	movw	r16, r24
    488e:	c6 01       	movw	r24, r12
    4890:	b5 01       	movw	r22, r10
    4892:	69 96       	adiw	r28, 0x19	; 25
    4894:	2c ad       	ldd	r18, Y+60	; 0x3c
    4896:	3d ad       	ldd	r19, Y+61	; 0x3d
    4898:	4e ad       	ldd	r20, Y+62	; 0x3e
    489a:	5f ad       	ldd	r21, Y+63	; 0x3f
    489c:	69 97       	sbiw	r28, 0x19	; 25
    489e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    48a2:	c9 01       	movw	r24, r18
    48a4:	da 01       	movw	r26, r20
    48a6:	a1 96       	adiw	r28, 0x21	; 33
    48a8:	8c af       	std	Y+60, r24	; 0x3c
    48aa:	9d af       	std	Y+61, r25	; 0x3d
    48ac:	ae af       	std	Y+62, r26	; 0x3e
    48ae:	bf af       	std	Y+63, r27	; 0x3f
    48b0:	a1 97       	sbiw	r28, 0x21	; 33
    48b2:	bc 01       	movw	r22, r24
    48b4:	cd 01       	movw	r24, r26
    48b6:	6d 96       	adiw	r28, 0x1d	; 29
    48b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    48ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    48bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    48be:	5f ad       	ldd	r21, Y+63	; 0x3f
    48c0:	6d 97       	sbiw	r28, 0x1d	; 29
    48c2:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    48c6:	9b 01       	movw	r18, r22
    48c8:	ac 01       	movw	r20, r24
    48ca:	87 01       	movw	r16, r14
    48cc:	ff 24       	eor	r15, r15
    48ce:	ee 24       	eor	r14, r14
    48d0:	21 96       	adiw	r28, 0x01	; 1
    48d2:	ac ac       	ldd	r10, Y+60	; 0x3c
    48d4:	bd ac       	ldd	r11, Y+61	; 0x3d
    48d6:	ce ac       	ldd	r12, Y+62	; 0x3e
    48d8:	df ac       	ldd	r13, Y+63	; 0x3f
    48da:	21 97       	sbiw	r28, 0x01	; 1
    48dc:	c6 01       	movw	r24, r12
    48de:	aa 27       	eor	r26, r26
    48e0:	bb 27       	eor	r27, r27
    48e2:	57 01       	movw	r10, r14
    48e4:	68 01       	movw	r12, r16
    48e6:	a8 2a       	or	r10, r24
    48e8:	b9 2a       	or	r11, r25
    48ea:	ca 2a       	or	r12, r26
    48ec:	db 2a       	or	r13, r27
    48ee:	a2 16       	cp	r10, r18
    48f0:	b3 06       	cpc	r11, r19
    48f2:	c4 06       	cpc	r12, r20
    48f4:	d5 06       	cpc	r13, r21
    48f6:	60 f5       	brcc	.+88     	; 0x4950 <__divdi3+0x986>
    48f8:	a1 96       	adiw	r28, 0x21	; 33
    48fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    48fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    48fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    4900:	9f ad       	ldd	r25, Y+63	; 0x3f
    4902:	a1 97       	sbiw	r28, 0x21	; 33
    4904:	61 50       	subi	r22, 0x01	; 1
    4906:	70 40       	sbci	r23, 0x00	; 0
    4908:	80 40       	sbci	r24, 0x00	; 0
    490a:	90 40       	sbci	r25, 0x00	; 0
    490c:	a1 96       	adiw	r28, 0x21	; 33
    490e:	6c af       	std	Y+60, r22	; 0x3c
    4910:	7d af       	std	Y+61, r23	; 0x3d
    4912:	8e af       	std	Y+62, r24	; 0x3e
    4914:	9f af       	std	Y+63, r25	; 0x3f
    4916:	a1 97       	sbiw	r28, 0x21	; 33
    4918:	a2 0c       	add	r10, r2
    491a:	b3 1c       	adc	r11, r3
    491c:	c4 1c       	adc	r12, r4
    491e:	d5 1c       	adc	r13, r5
    4920:	a2 14       	cp	r10, r2
    4922:	b3 04       	cpc	r11, r3
    4924:	c4 04       	cpc	r12, r4
    4926:	d5 04       	cpc	r13, r5
    4928:	98 f0       	brcs	.+38     	; 0x4950 <__divdi3+0x986>
    492a:	a2 16       	cp	r10, r18
    492c:	b3 06       	cpc	r11, r19
    492e:	c4 06       	cpc	r12, r20
    4930:	d5 06       	cpc	r13, r21
    4932:	70 f4       	brcc	.+28     	; 0x4950 <__divdi3+0x986>
    4934:	61 50       	subi	r22, 0x01	; 1
    4936:	70 40       	sbci	r23, 0x00	; 0
    4938:	80 40       	sbci	r24, 0x00	; 0
    493a:	90 40       	sbci	r25, 0x00	; 0
    493c:	a1 96       	adiw	r28, 0x21	; 33
    493e:	6c af       	std	Y+60, r22	; 0x3c
    4940:	7d af       	std	Y+61, r23	; 0x3d
    4942:	8e af       	std	Y+62, r24	; 0x3e
    4944:	9f af       	std	Y+63, r25	; 0x3f
    4946:	a1 97       	sbiw	r28, 0x21	; 33
    4948:	a2 0c       	add	r10, r2
    494a:	b3 1c       	adc	r11, r3
    494c:	c4 1c       	adc	r12, r4
    494e:	d5 1c       	adc	r13, r5
    4950:	a2 1a       	sub	r10, r18
    4952:	b3 0a       	sbc	r11, r19
    4954:	c4 0a       	sbc	r12, r20
    4956:	d5 0a       	sbc	r13, r21
    4958:	c6 01       	movw	r24, r12
    495a:	b5 01       	movw	r22, r10
    495c:	69 96       	adiw	r28, 0x19	; 25
    495e:	2c ad       	ldd	r18, Y+60	; 0x3c
    4960:	3d ad       	ldd	r19, Y+61	; 0x3d
    4962:	4e ad       	ldd	r20, Y+62	; 0x3e
    4964:	5f ad       	ldd	r21, Y+63	; 0x3f
    4966:	69 97       	sbiw	r28, 0x19	; 25
    4968:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    496c:	7b 01       	movw	r14, r22
    496e:	8c 01       	movw	r16, r24
    4970:	c6 01       	movw	r24, r12
    4972:	b5 01       	movw	r22, r10
    4974:	69 96       	adiw	r28, 0x19	; 25
    4976:	2c ad       	ldd	r18, Y+60	; 0x3c
    4978:	3d ad       	ldd	r19, Y+61	; 0x3d
    497a:	4e ad       	ldd	r20, Y+62	; 0x3e
    497c:	5f ad       	ldd	r21, Y+63	; 0x3f
    497e:	69 97       	sbiw	r28, 0x19	; 25
    4980:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4984:	c9 01       	movw	r24, r18
    4986:	da 01       	movw	r26, r20
    4988:	5c 01       	movw	r10, r24
    498a:	6d 01       	movw	r12, r26
    498c:	c6 01       	movw	r24, r12
    498e:	b5 01       	movw	r22, r10
    4990:	6d 96       	adiw	r28, 0x1d	; 29
    4992:	2c ad       	ldd	r18, Y+60	; 0x3c
    4994:	3d ad       	ldd	r19, Y+61	; 0x3d
    4996:	4e ad       	ldd	r20, Y+62	; 0x3e
    4998:	5f ad       	ldd	r21, Y+63	; 0x3f
    499a:	6d 97       	sbiw	r28, 0x1d	; 29
    499c:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    49a0:	9b 01       	movw	r18, r22
    49a2:	ac 01       	movw	r20, r24
    49a4:	87 01       	movw	r16, r14
    49a6:	ff 24       	eor	r15, r15
    49a8:	ee 24       	eor	r14, r14
    49aa:	21 96       	adiw	r28, 0x01	; 1
    49ac:	8c ad       	ldd	r24, Y+60	; 0x3c
    49ae:	9d ad       	ldd	r25, Y+61	; 0x3d
    49b0:	ae ad       	ldd	r26, Y+62	; 0x3e
    49b2:	bf ad       	ldd	r27, Y+63	; 0x3f
    49b4:	21 97       	sbiw	r28, 0x01	; 1
    49b6:	a0 70       	andi	r26, 0x00	; 0
    49b8:	b0 70       	andi	r27, 0x00	; 0
    49ba:	e8 2a       	or	r14, r24
    49bc:	f9 2a       	or	r15, r25
    49be:	0a 2b       	or	r16, r26
    49c0:	1b 2b       	or	r17, r27
    49c2:	e2 16       	cp	r14, r18
    49c4:	f3 06       	cpc	r15, r19
    49c6:	04 07       	cpc	r16, r20
    49c8:	15 07       	cpc	r17, r21
    49ca:	c0 f4       	brcc	.+48     	; 0x49fc <__divdi3+0xa32>
    49cc:	08 94       	sec
    49ce:	a1 08       	sbc	r10, r1
    49d0:	b1 08       	sbc	r11, r1
    49d2:	c1 08       	sbc	r12, r1
    49d4:	d1 08       	sbc	r13, r1
    49d6:	e2 0c       	add	r14, r2
    49d8:	f3 1c       	adc	r15, r3
    49da:	04 1d       	adc	r16, r4
    49dc:	15 1d       	adc	r17, r5
    49de:	e2 14       	cp	r14, r2
    49e0:	f3 04       	cpc	r15, r3
    49e2:	04 05       	cpc	r16, r4
    49e4:	15 05       	cpc	r17, r5
    49e6:	50 f0       	brcs	.+20     	; 0x49fc <__divdi3+0xa32>
    49e8:	e2 16       	cp	r14, r18
    49ea:	f3 06       	cpc	r15, r19
    49ec:	04 07       	cpc	r16, r20
    49ee:	15 07       	cpc	r17, r21
    49f0:	28 f4       	brcc	.+10     	; 0x49fc <__divdi3+0xa32>
    49f2:	08 94       	sec
    49f4:	a1 08       	sbc	r10, r1
    49f6:	b1 08       	sbc	r11, r1
    49f8:	c1 08       	sbc	r12, r1
    49fa:	d1 08       	sbc	r13, r1
    49fc:	a1 96       	adiw	r28, 0x21	; 33
    49fe:	ec ac       	ldd	r14, Y+60	; 0x3c
    4a00:	fd ac       	ldd	r15, Y+61	; 0x3d
    4a02:	0e ad       	ldd	r16, Y+62	; 0x3e
    4a04:	1f ad       	ldd	r17, Y+63	; 0x3f
    4a06:	a1 97       	sbiw	r28, 0x21	; 33
    4a08:	d7 01       	movw	r26, r14
    4a0a:	99 27       	eor	r25, r25
    4a0c:	88 27       	eor	r24, r24
    4a0e:	96 01       	movw	r18, r12
    4a10:	85 01       	movw	r16, r10
    4a12:	08 2b       	or	r16, r24
    4a14:	19 2b       	or	r17, r25
    4a16:	2a 2b       	or	r18, r26
    4a18:	3b 2b       	or	r19, r27
    4a1a:	25 96       	adiw	r28, 0x05	; 5
    4a1c:	0c af       	std	Y+60, r16	; 0x3c
    4a1e:	1d af       	std	Y+61, r17	; 0x3d
    4a20:	2e af       	std	Y+62, r18	; 0x3e
    4a22:	3f af       	std	Y+63, r19	; 0x3f
    4a24:	25 97       	sbiw	r28, 0x05	; 5
    4a26:	72 c2       	rjmp	.+1252   	; 0x4f0c <__divdi3+0xf42>
    4a28:	6e 14       	cp	r6, r14
    4a2a:	7f 04       	cpc	r7, r15
    4a2c:	80 06       	cpc	r8, r16
    4a2e:	91 06       	cpc	r9, r17
    4a30:	08 f4       	brcc	.+2      	; 0x4a34 <__divdi3+0xa6a>
    4a32:	5f c2       	rjmp	.+1214   	; 0x4ef2 <__divdi3+0xf28>
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	e2 16       	cp	r14, r18
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	f2 06       	cpc	r15, r18
    4a3c:	21 e0       	ldi	r18, 0x01	; 1
    4a3e:	02 07       	cpc	r16, r18
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	12 07       	cpc	r17, r18
    4a44:	88 f4       	brcc	.+34     	; 0x4a68 <__divdi3+0xa9e>
    4a46:	3f ef       	ldi	r19, 0xFF	; 255
    4a48:	e3 16       	cp	r14, r19
    4a4a:	f1 04       	cpc	r15, r1
    4a4c:	01 05       	cpc	r16, r1
    4a4e:	11 05       	cpc	r17, r1
    4a50:	31 f0       	breq	.+12     	; 0x4a5e <__divdi3+0xa94>
    4a52:	28 f0       	brcs	.+10     	; 0x4a5e <__divdi3+0xa94>
    4a54:	48 e0       	ldi	r20, 0x08	; 8
    4a56:	50 e0       	ldi	r21, 0x00	; 0
    4a58:	60 e0       	ldi	r22, 0x00	; 0
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	17 c0       	rjmp	.+46     	; 0x4a8c <__divdi3+0xac2>
    4a5e:	40 e0       	ldi	r20, 0x00	; 0
    4a60:	50 e0       	ldi	r21, 0x00	; 0
    4a62:	60 e0       	ldi	r22, 0x00	; 0
    4a64:	70 e0       	ldi	r23, 0x00	; 0
    4a66:	12 c0       	rjmp	.+36     	; 0x4a8c <__divdi3+0xac2>
    4a68:	40 e0       	ldi	r20, 0x00	; 0
    4a6a:	e4 16       	cp	r14, r20
    4a6c:	40 e0       	ldi	r20, 0x00	; 0
    4a6e:	f4 06       	cpc	r15, r20
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	04 07       	cpc	r16, r20
    4a74:	41 e0       	ldi	r20, 0x01	; 1
    4a76:	14 07       	cpc	r17, r20
    4a78:	28 f0       	brcs	.+10     	; 0x4a84 <__divdi3+0xaba>
    4a7a:	48 e1       	ldi	r20, 0x18	; 24
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	70 e0       	ldi	r23, 0x00	; 0
    4a82:	04 c0       	rjmp	.+8      	; 0x4a8c <__divdi3+0xac2>
    4a84:	40 e1       	ldi	r20, 0x10	; 16
    4a86:	50 e0       	ldi	r21, 0x00	; 0
    4a88:	60 e0       	ldi	r22, 0x00	; 0
    4a8a:	70 e0       	ldi	r23, 0x00	; 0
    4a8c:	d8 01       	movw	r26, r16
    4a8e:	c7 01       	movw	r24, r14
    4a90:	04 2e       	mov	r0, r20
    4a92:	04 c0       	rjmp	.+8      	; 0x4a9c <__divdi3+0xad2>
    4a94:	b6 95       	lsr	r27
    4a96:	a7 95       	ror	r26
    4a98:	97 95       	ror	r25
    4a9a:	87 95       	ror	r24
    4a9c:	0a 94       	dec	r0
    4a9e:	d2 f7       	brpl	.-12     	; 0x4a94 <__divdi3+0xaca>
    4aa0:	87 53       	subi	r24, 0x37	; 55
    4aa2:	9c 4f       	sbci	r25, 0xFC	; 252
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	2c 91       	ld	r18, X
    4aa8:	30 e2       	ldi	r19, 0x20	; 32
    4aaa:	a3 2e       	mov	r10, r19
    4aac:	b1 2c       	mov	r11, r1
    4aae:	c1 2c       	mov	r12, r1
    4ab0:	d1 2c       	mov	r13, r1
    4ab2:	d6 01       	movw	r26, r12
    4ab4:	c5 01       	movw	r24, r10
    4ab6:	84 1b       	sub	r24, r20
    4ab8:	95 0b       	sbc	r25, r21
    4aba:	a6 0b       	sbc	r26, r22
    4abc:	b7 0b       	sbc	r27, r23
    4abe:	82 1b       	sub	r24, r18
    4ac0:	91 09       	sbc	r25, r1
    4ac2:	a1 09       	sbc	r26, r1
    4ac4:	b1 09       	sbc	r27, r1
    4ac6:	00 97       	sbiw	r24, 0x00	; 0
    4ac8:	a1 05       	cpc	r26, r1
    4aca:	b1 05       	cpc	r27, r1
    4acc:	99 f4       	brne	.+38     	; 0x4af4 <__divdi3+0xb2a>
    4ace:	e6 14       	cp	r14, r6
    4ad0:	f7 04       	cpc	r15, r7
    4ad2:	08 05       	cpc	r16, r8
    4ad4:	19 05       	cpc	r17, r9
    4ad6:	08 f4       	brcc	.+2      	; 0x4ada <__divdi3+0xb10>
    4ad8:	fe c1       	rjmp	.+1020   	; 0x4ed6 <__divdi3+0xf0c>
    4ada:	21 96       	adiw	r28, 0x01	; 1
    4adc:	6c ac       	ldd	r6, Y+60	; 0x3c
    4ade:	7d ac       	ldd	r7, Y+61	; 0x3d
    4ae0:	8e ac       	ldd	r8, Y+62	; 0x3e
    4ae2:	9f ac       	ldd	r9, Y+63	; 0x3f
    4ae4:	21 97       	sbiw	r28, 0x01	; 1
    4ae6:	62 14       	cp	r6, r2
    4ae8:	73 04       	cpc	r7, r3
    4aea:	84 04       	cpc	r8, r4
    4aec:	95 04       	cpc	r9, r5
    4aee:	08 f0       	brcs	.+2      	; 0x4af2 <__divdi3+0xb28>
    4af0:	f2 c1       	rjmp	.+996    	; 0x4ed6 <__divdi3+0xf0c>
    4af2:	ff c1       	rjmp	.+1022   	; 0x4ef2 <__divdi3+0xf28>
    4af4:	e2 96       	adiw	r28, 0x32	; 50
    4af6:	8f af       	std	Y+63, r24	; 0x3f
    4af8:	e2 97       	sbiw	r28, 0x32	; 50
    4afa:	08 2e       	mov	r0, r24
    4afc:	04 c0       	rjmp	.+8      	; 0x4b06 <__divdi3+0xb3c>
    4afe:	ee 0c       	add	r14, r14
    4b00:	ff 1c       	adc	r15, r15
    4b02:	00 1f       	adc	r16, r16
    4b04:	11 1f       	adc	r17, r17
    4b06:	0a 94       	dec	r0
    4b08:	d2 f7       	brpl	.-12     	; 0x4afe <__divdi3+0xb34>
    4b0a:	6a 2d       	mov	r22, r10
    4b0c:	68 1b       	sub	r22, r24
    4b0e:	d2 01       	movw	r26, r4
    4b10:	c1 01       	movw	r24, r2
    4b12:	06 2e       	mov	r0, r22
    4b14:	04 c0       	rjmp	.+8      	; 0x4b1e <__divdi3+0xb54>
    4b16:	b6 95       	lsr	r27
    4b18:	a7 95       	ror	r26
    4b1a:	97 95       	ror	r25
    4b1c:	87 95       	ror	r24
    4b1e:	0a 94       	dec	r0
    4b20:	d2 f7       	brpl	.-12     	; 0x4b16 <__divdi3+0xb4c>
    4b22:	5c 01       	movw	r10, r24
    4b24:	6d 01       	movw	r12, r26
    4b26:	ae 28       	or	r10, r14
    4b28:	bf 28       	or	r11, r15
    4b2a:	c0 2a       	or	r12, r16
    4b2c:	d1 2a       	or	r13, r17
    4b2e:	ad aa       	std	Y+53, r10	; 0x35
    4b30:	be aa       	std	Y+54, r11	; 0x36
    4b32:	cf aa       	std	Y+55, r12	; 0x37
    4b34:	d8 ae       	std	Y+56, r13	; 0x38
    4b36:	72 01       	movw	r14, r4
    4b38:	61 01       	movw	r12, r2
    4b3a:	e2 96       	adiw	r28, 0x32	; 50
    4b3c:	0f ac       	ldd	r0, Y+63	; 0x3f
    4b3e:	e2 97       	sbiw	r28, 0x32	; 50
    4b40:	04 c0       	rjmp	.+8      	; 0x4b4a <__divdi3+0xb80>
    4b42:	cc 0c       	add	r12, r12
    4b44:	dd 1c       	adc	r13, r13
    4b46:	ee 1c       	adc	r14, r14
    4b48:	ff 1c       	adc	r15, r15
    4b4a:	0a 94       	dec	r0
    4b4c:	d2 f7       	brpl	.-12     	; 0x4b42 <__divdi3+0xb78>
    4b4e:	c9 aa       	std	Y+49, r12	; 0x31
    4b50:	da aa       	std	Y+50, r13	; 0x32
    4b52:	eb aa       	std	Y+51, r14	; 0x33
    4b54:	fc aa       	std	Y+52, r15	; 0x34
    4b56:	64 01       	movw	r12, r8
    4b58:	53 01       	movw	r10, r6
    4b5a:	06 2e       	mov	r0, r22
    4b5c:	04 c0       	rjmp	.+8      	; 0x4b66 <__divdi3+0xb9c>
    4b5e:	d6 94       	lsr	r13
    4b60:	c7 94       	ror	r12
    4b62:	b7 94       	ror	r11
    4b64:	a7 94       	ror	r10
    4b66:	0a 94       	dec	r0
    4b68:	d2 f7       	brpl	.-12     	; 0x4b5e <__divdi3+0xb94>
    4b6a:	d4 01       	movw	r26, r8
    4b6c:	c3 01       	movw	r24, r6
    4b6e:	e2 96       	adiw	r28, 0x32	; 50
    4b70:	0f ac       	ldd	r0, Y+63	; 0x3f
    4b72:	e2 97       	sbiw	r28, 0x32	; 50
    4b74:	04 c0       	rjmp	.+8      	; 0x4b7e <__divdi3+0xbb4>
    4b76:	88 0f       	add	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	aa 1f       	adc	r26, r26
    4b7c:	bb 1f       	adc	r27, r27
    4b7e:	0a 94       	dec	r0
    4b80:	d2 f7       	brpl	.-12     	; 0x4b76 <__divdi3+0xbac>
    4b82:	21 96       	adiw	r28, 0x01	; 1
    4b84:	ec ac       	ldd	r14, Y+60	; 0x3c
    4b86:	fd ac       	ldd	r15, Y+61	; 0x3d
    4b88:	0e ad       	ldd	r16, Y+62	; 0x3e
    4b8a:	1f ad       	ldd	r17, Y+63	; 0x3f
    4b8c:	21 97       	sbiw	r28, 0x01	; 1
    4b8e:	04 c0       	rjmp	.+8      	; 0x4b98 <__divdi3+0xbce>
    4b90:	16 95       	lsr	r17
    4b92:	07 95       	ror	r16
    4b94:	f7 94       	ror	r15
    4b96:	e7 94       	ror	r14
    4b98:	6a 95       	dec	r22
    4b9a:	d2 f7       	brpl	.-12     	; 0x4b90 <__divdi3+0xbc6>
    4b9c:	37 01       	movw	r6, r14
    4b9e:	48 01       	movw	r8, r16
    4ba0:	68 2a       	or	r6, r24
    4ba2:	79 2a       	or	r7, r25
    4ba4:	8a 2a       	or	r8, r26
    4ba6:	9b 2a       	or	r9, r27
    4ba8:	6d a6       	std	Y+45, r6	; 0x2d
    4baa:	7e a6       	std	Y+46, r7	; 0x2e
    4bac:	8f a6       	std	Y+47, r8	; 0x2f
    4bae:	98 aa       	std	Y+48, r9	; 0x30
    4bb0:	ed a8       	ldd	r14, Y+53	; 0x35
    4bb2:	fe a8       	ldd	r15, Y+54	; 0x36
    4bb4:	0f a9       	ldd	r16, Y+55	; 0x37
    4bb6:	18 ad       	ldd	r17, Y+56	; 0x38
    4bb8:	38 01       	movw	r6, r16
    4bba:	88 24       	eor	r8, r8
    4bbc:	99 24       	eor	r9, r9
    4bbe:	98 01       	movw	r18, r16
    4bc0:	87 01       	movw	r16, r14
    4bc2:	20 70       	andi	r18, 0x00	; 0
    4bc4:	30 70       	andi	r19, 0x00	; 0
    4bc6:	a5 96       	adiw	r28, 0x25	; 37
    4bc8:	0c af       	std	Y+60, r16	; 0x3c
    4bca:	1d af       	std	Y+61, r17	; 0x3d
    4bcc:	2e af       	std	Y+62, r18	; 0x3e
    4bce:	3f af       	std	Y+63, r19	; 0x3f
    4bd0:	a5 97       	sbiw	r28, 0x25	; 37
    4bd2:	c6 01       	movw	r24, r12
    4bd4:	b5 01       	movw	r22, r10
    4bd6:	a4 01       	movw	r20, r8
    4bd8:	93 01       	movw	r18, r6
    4bda:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4bde:	7b 01       	movw	r14, r22
    4be0:	8c 01       	movw	r16, r24
    4be2:	c6 01       	movw	r24, r12
    4be4:	b5 01       	movw	r22, r10
    4be6:	a4 01       	movw	r20, r8
    4be8:	93 01       	movw	r18, r6
    4bea:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4bee:	c9 01       	movw	r24, r18
    4bf0:	da 01       	movw	r26, r20
    4bf2:	1c 01       	movw	r2, r24
    4bf4:	2d 01       	movw	r4, r26
    4bf6:	c2 01       	movw	r24, r4
    4bf8:	b1 01       	movw	r22, r2
    4bfa:	a5 96       	adiw	r28, 0x25	; 37
    4bfc:	2c ad       	ldd	r18, Y+60	; 0x3c
    4bfe:	3d ad       	ldd	r19, Y+61	; 0x3d
    4c00:	4e ad       	ldd	r20, Y+62	; 0x3e
    4c02:	5f ad       	ldd	r21, Y+63	; 0x3f
    4c04:	a5 97       	sbiw	r28, 0x25	; 37
    4c06:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    4c0a:	9b 01       	movw	r18, r22
    4c0c:	ac 01       	movw	r20, r24
    4c0e:	87 01       	movw	r16, r14
    4c10:	ff 24       	eor	r15, r15
    4c12:	ee 24       	eor	r14, r14
    4c14:	ad a4       	ldd	r10, Y+45	; 0x2d
    4c16:	be a4       	ldd	r11, Y+46	; 0x2e
    4c18:	cf a4       	ldd	r12, Y+47	; 0x2f
    4c1a:	d8 a8       	ldd	r13, Y+48	; 0x30
    4c1c:	c6 01       	movw	r24, r12
    4c1e:	aa 27       	eor	r26, r26
    4c20:	bb 27       	eor	r27, r27
    4c22:	57 01       	movw	r10, r14
    4c24:	68 01       	movw	r12, r16
    4c26:	a8 2a       	or	r10, r24
    4c28:	b9 2a       	or	r11, r25
    4c2a:	ca 2a       	or	r12, r26
    4c2c:	db 2a       	or	r13, r27
    4c2e:	a2 16       	cp	r10, r18
    4c30:	b3 06       	cpc	r11, r19
    4c32:	c4 06       	cpc	r12, r20
    4c34:	d5 06       	cpc	r13, r21
    4c36:	00 f5       	brcc	.+64     	; 0x4c78 <__divdi3+0xcae>
    4c38:	08 94       	sec
    4c3a:	21 08       	sbc	r2, r1
    4c3c:	31 08       	sbc	r3, r1
    4c3e:	41 08       	sbc	r4, r1
    4c40:	51 08       	sbc	r5, r1
    4c42:	ed a8       	ldd	r14, Y+53	; 0x35
    4c44:	fe a8       	ldd	r15, Y+54	; 0x36
    4c46:	0f a9       	ldd	r16, Y+55	; 0x37
    4c48:	18 ad       	ldd	r17, Y+56	; 0x38
    4c4a:	ae 0c       	add	r10, r14
    4c4c:	bf 1c       	adc	r11, r15
    4c4e:	c0 1e       	adc	r12, r16
    4c50:	d1 1e       	adc	r13, r17
    4c52:	ae 14       	cp	r10, r14
    4c54:	bf 04       	cpc	r11, r15
    4c56:	c0 06       	cpc	r12, r16
    4c58:	d1 06       	cpc	r13, r17
    4c5a:	70 f0       	brcs	.+28     	; 0x4c78 <__divdi3+0xcae>
    4c5c:	a2 16       	cp	r10, r18
    4c5e:	b3 06       	cpc	r11, r19
    4c60:	c4 06       	cpc	r12, r20
    4c62:	d5 06       	cpc	r13, r21
    4c64:	48 f4       	brcc	.+18     	; 0x4c78 <__divdi3+0xcae>
    4c66:	08 94       	sec
    4c68:	21 08       	sbc	r2, r1
    4c6a:	31 08       	sbc	r3, r1
    4c6c:	41 08       	sbc	r4, r1
    4c6e:	51 08       	sbc	r5, r1
    4c70:	ae 0c       	add	r10, r14
    4c72:	bf 1c       	adc	r11, r15
    4c74:	c0 1e       	adc	r12, r16
    4c76:	d1 1e       	adc	r13, r17
    4c78:	a2 1a       	sub	r10, r18
    4c7a:	b3 0a       	sbc	r11, r19
    4c7c:	c4 0a       	sbc	r12, r20
    4c7e:	d5 0a       	sbc	r13, r21
    4c80:	c6 01       	movw	r24, r12
    4c82:	b5 01       	movw	r22, r10
    4c84:	a4 01       	movw	r20, r8
    4c86:	93 01       	movw	r18, r6
    4c88:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4c8c:	7b 01       	movw	r14, r22
    4c8e:	8c 01       	movw	r16, r24
    4c90:	c6 01       	movw	r24, r12
    4c92:	b5 01       	movw	r22, r10
    4c94:	a4 01       	movw	r20, r8
    4c96:	93 01       	movw	r18, r6
    4c98:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    4c9c:	c9 01       	movw	r24, r18
    4c9e:	da 01       	movw	r26, r20
    4ca0:	3c 01       	movw	r6, r24
    4ca2:	4d 01       	movw	r8, r26
    4ca4:	c4 01       	movw	r24, r8
    4ca6:	b3 01       	movw	r22, r6
    4ca8:	a5 96       	adiw	r28, 0x25	; 37
    4caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    4cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    4cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    4cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    4cb2:	a5 97       	sbiw	r28, 0x25	; 37
    4cb4:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    4cb8:	9b 01       	movw	r18, r22
    4cba:	ac 01       	movw	r20, r24
    4cbc:	87 01       	movw	r16, r14
    4cbe:	ff 24       	eor	r15, r15
    4cc0:	ee 24       	eor	r14, r14
    4cc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cc6:	af a5       	ldd	r26, Y+47	; 0x2f
    4cc8:	b8 a9       	ldd	r27, Y+48	; 0x30
    4cca:	a0 70       	andi	r26, 0x00	; 0
    4ccc:	b0 70       	andi	r27, 0x00	; 0
    4cce:	57 01       	movw	r10, r14
    4cd0:	68 01       	movw	r12, r16
    4cd2:	a8 2a       	or	r10, r24
    4cd4:	b9 2a       	or	r11, r25
    4cd6:	ca 2a       	or	r12, r26
    4cd8:	db 2a       	or	r13, r27
    4cda:	a2 16       	cp	r10, r18
    4cdc:	b3 06       	cpc	r11, r19
    4cde:	c4 06       	cpc	r12, r20
    4ce0:	d5 06       	cpc	r13, r21
    4ce2:	00 f5       	brcc	.+64     	; 0x4d24 <__divdi3+0xd5a>
    4ce4:	08 94       	sec
    4ce6:	61 08       	sbc	r6, r1
    4ce8:	71 08       	sbc	r7, r1
    4cea:	81 08       	sbc	r8, r1
    4cec:	91 08       	sbc	r9, r1
    4cee:	6d a9       	ldd	r22, Y+53	; 0x35
    4cf0:	7e a9       	ldd	r23, Y+54	; 0x36
    4cf2:	8f a9       	ldd	r24, Y+55	; 0x37
    4cf4:	98 ad       	ldd	r25, Y+56	; 0x38
    4cf6:	a6 0e       	add	r10, r22
    4cf8:	b7 1e       	adc	r11, r23
    4cfa:	c8 1e       	adc	r12, r24
    4cfc:	d9 1e       	adc	r13, r25
    4cfe:	a6 16       	cp	r10, r22
    4d00:	b7 06       	cpc	r11, r23
    4d02:	c8 06       	cpc	r12, r24
    4d04:	d9 06       	cpc	r13, r25
    4d06:	70 f0       	brcs	.+28     	; 0x4d24 <__divdi3+0xd5a>
    4d08:	a2 16       	cp	r10, r18
    4d0a:	b3 06       	cpc	r11, r19
    4d0c:	c4 06       	cpc	r12, r20
    4d0e:	d5 06       	cpc	r13, r21
    4d10:	48 f4       	brcc	.+18     	; 0x4d24 <__divdi3+0xd5a>
    4d12:	08 94       	sec
    4d14:	61 08       	sbc	r6, r1
    4d16:	71 08       	sbc	r7, r1
    4d18:	81 08       	sbc	r8, r1
    4d1a:	91 08       	sbc	r9, r1
    4d1c:	a6 0e       	add	r10, r22
    4d1e:	b7 1e       	adc	r11, r23
    4d20:	c8 1e       	adc	r12, r24
    4d22:	d9 1e       	adc	r13, r25
    4d24:	d6 01       	movw	r26, r12
    4d26:	c5 01       	movw	r24, r10
    4d28:	82 1b       	sub	r24, r18
    4d2a:	93 0b       	sbc	r25, r19
    4d2c:	a4 0b       	sbc	r26, r20
    4d2e:	b5 0b       	sbc	r27, r21
    4d30:	89 a7       	std	Y+41, r24	; 0x29
    4d32:	9a a7       	std	Y+42, r25	; 0x2a
    4d34:	ab a7       	std	Y+43, r26	; 0x2b
    4d36:	bc a7       	std	Y+44, r27	; 0x2c
    4d38:	d1 01       	movw	r26, r2
    4d3a:	99 27       	eor	r25, r25
    4d3c:	88 27       	eor	r24, r24
    4d3e:	64 01       	movw	r12, r8
    4d40:	53 01       	movw	r10, r6
    4d42:	a8 2a       	or	r10, r24
    4d44:	b9 2a       	or	r11, r25
    4d46:	ca 2a       	or	r12, r26
    4d48:	db 2a       	or	r13, r27
    4d4a:	25 96       	adiw	r28, 0x05	; 5
    4d4c:	ac ae       	std	Y+60, r10	; 0x3c
    4d4e:	bd ae       	std	Y+61, r11	; 0x3d
    4d50:	ce ae       	std	Y+62, r12	; 0x3e
    4d52:	df ae       	std	Y+63, r13	; 0x3f
    4d54:	25 97       	sbiw	r28, 0x05	; 5
    4d56:	86 01       	movw	r16, r12
    4d58:	75 01       	movw	r14, r10
    4d5a:	2f ef       	ldi	r18, 0xFF	; 255
    4d5c:	3f ef       	ldi	r19, 0xFF	; 255
    4d5e:	40 e0       	ldi	r20, 0x00	; 0
    4d60:	50 e0       	ldi	r21, 0x00	; 0
    4d62:	e2 22       	and	r14, r18
    4d64:	f3 22       	and	r15, r19
    4d66:	04 23       	and	r16, r20
    4d68:	15 23       	and	r17, r21
    4d6a:	a6 01       	movw	r20, r12
    4d6c:	66 27       	eor	r22, r22
    4d6e:	77 27       	eor	r23, r23
    4d70:	ad 96       	adiw	r28, 0x2d	; 45
    4d72:	4c af       	std	Y+60, r20	; 0x3c
    4d74:	5d af       	std	Y+61, r21	; 0x3d
    4d76:	6e af       	std	Y+62, r22	; 0x3e
    4d78:	7f af       	std	Y+63, r23	; 0x3f
    4d7a:	ad 97       	sbiw	r28, 0x2d	; 45
    4d7c:	a9 a8       	ldd	r10, Y+49	; 0x31
    4d7e:	ba a8       	ldd	r11, Y+50	; 0x32
    4d80:	cb a8       	ldd	r12, Y+51	; 0x33
    4d82:	dc a8       	ldd	r13, Y+52	; 0x34
    4d84:	6f ef       	ldi	r22, 0xFF	; 255
    4d86:	7f ef       	ldi	r23, 0xFF	; 255
    4d88:	80 e0       	ldi	r24, 0x00	; 0
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	a6 22       	and	r10, r22
    4d8e:	b7 22       	and	r11, r23
    4d90:	c8 22       	and	r12, r24
    4d92:	d9 22       	and	r13, r25
    4d94:	89 a9       	ldd	r24, Y+49	; 0x31
    4d96:	9a a9       	ldd	r25, Y+50	; 0x32
    4d98:	ab a9       	ldd	r26, Y+51	; 0x33
    4d9a:	bc a9       	ldd	r27, Y+52	; 0x34
    4d9c:	1d 01       	movw	r2, r26
    4d9e:	44 24       	eor	r4, r4
    4da0:	55 24       	eor	r5, r5
    4da2:	c8 01       	movw	r24, r16
    4da4:	b7 01       	movw	r22, r14
    4da6:	a6 01       	movw	r20, r12
    4da8:	95 01       	movw	r18, r10
    4daa:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    4dae:	a9 96       	adiw	r28, 0x29	; 41
    4db0:	6c af       	std	Y+60, r22	; 0x3c
    4db2:	7d af       	std	Y+61, r23	; 0x3d
    4db4:	8e af       	std	Y+62, r24	; 0x3e
    4db6:	9f af       	std	Y+63, r25	; 0x3f
    4db8:	a9 97       	sbiw	r28, 0x29	; 41
    4dba:	c8 01       	movw	r24, r16
    4dbc:	b7 01       	movw	r22, r14
    4dbe:	a2 01       	movw	r20, r4
    4dc0:	91 01       	movw	r18, r2
    4dc2:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    4dc6:	3b 01       	movw	r6, r22
    4dc8:	4c 01       	movw	r8, r24
    4dca:	ad 96       	adiw	r28, 0x2d	; 45
    4dcc:	6c ad       	ldd	r22, Y+60	; 0x3c
    4dce:	7d ad       	ldd	r23, Y+61	; 0x3d
    4dd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dd4:	ad 97       	sbiw	r28, 0x2d	; 45
    4dd6:	a6 01       	movw	r20, r12
    4dd8:	95 01       	movw	r18, r10
    4dda:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    4dde:	7b 01       	movw	r14, r22
    4de0:	8c 01       	movw	r16, r24
    4de2:	ad 96       	adiw	r28, 0x2d	; 45
    4de4:	6c ad       	ldd	r22, Y+60	; 0x3c
    4de6:	7d ad       	ldd	r23, Y+61	; 0x3d
    4de8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dec:	ad 97       	sbiw	r28, 0x2d	; 45
    4dee:	a2 01       	movw	r20, r4
    4df0:	91 01       	movw	r18, r2
    4df2:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    4df6:	5b 01       	movw	r10, r22
    4df8:	6c 01       	movw	r12, r24
    4dfa:	a8 01       	movw	r20, r16
    4dfc:	97 01       	movw	r18, r14
    4dfe:	26 0d       	add	r18, r6
    4e00:	37 1d       	adc	r19, r7
    4e02:	48 1d       	adc	r20, r8
    4e04:	59 1d       	adc	r21, r9
    4e06:	a9 96       	adiw	r28, 0x29	; 41
    4e08:	6c ac       	ldd	r6, Y+60	; 0x3c
    4e0a:	7d ac       	ldd	r7, Y+61	; 0x3d
    4e0c:	8e ac       	ldd	r8, Y+62	; 0x3e
    4e0e:	9f ac       	ldd	r9, Y+63	; 0x3f
    4e10:	a9 97       	sbiw	r28, 0x29	; 41
    4e12:	c4 01       	movw	r24, r8
    4e14:	aa 27       	eor	r26, r26
    4e16:	bb 27       	eor	r27, r27
    4e18:	28 0f       	add	r18, r24
    4e1a:	39 1f       	adc	r19, r25
    4e1c:	4a 1f       	adc	r20, r26
    4e1e:	5b 1f       	adc	r21, r27
    4e20:	2e 15       	cp	r18, r14
    4e22:	3f 05       	cpc	r19, r15
    4e24:	40 07       	cpc	r20, r16
    4e26:	51 07       	cpc	r21, r17
    4e28:	48 f4       	brcc	.+18     	; 0x4e3c <__divdi3+0xe72>
    4e2a:	e1 2c       	mov	r14, r1
    4e2c:	f1 2c       	mov	r15, r1
    4e2e:	61 e0       	ldi	r22, 0x01	; 1
    4e30:	06 2f       	mov	r16, r22
    4e32:	11 2d       	mov	r17, r1
    4e34:	ae 0c       	add	r10, r14
    4e36:	bf 1c       	adc	r11, r15
    4e38:	c0 1e       	adc	r12, r16
    4e3a:	d1 1e       	adc	r13, r17
    4e3c:	ca 01       	movw	r24, r20
    4e3e:	aa 27       	eor	r26, r26
    4e40:	bb 27       	eor	r27, r27
    4e42:	bc 01       	movw	r22, r24
    4e44:	cd 01       	movw	r24, r26
    4e46:	6a 0d       	add	r22, r10
    4e48:	7b 1d       	adc	r23, r11
    4e4a:	8c 1d       	adc	r24, r12
    4e4c:	9d 1d       	adc	r25, r13
    4e4e:	69 a4       	ldd	r6, Y+41	; 0x29
    4e50:	7a a4       	ldd	r7, Y+42	; 0x2a
    4e52:	8b a4       	ldd	r8, Y+43	; 0x2b
    4e54:	9c a4       	ldd	r9, Y+44	; 0x2c
    4e56:	66 16       	cp	r6, r22
    4e58:	77 06       	cpc	r7, r23
    4e5a:	88 06       	cpc	r8, r24
    4e5c:	99 06       	cpc	r9, r25
    4e5e:	50 f1       	brcs	.+84     	; 0x4eb4 <__divdi3+0xeea>
    4e60:	66 15       	cp	r22, r6
    4e62:	77 05       	cpc	r23, r7
    4e64:	88 05       	cpc	r24, r8
    4e66:	99 05       	cpc	r25, r9
    4e68:	09 f0       	breq	.+2      	; 0x4e6c <__divdi3+0xea2>
    4e6a:	4d c0       	rjmp	.+154    	; 0x4f06 <__divdi3+0xf3c>
    4e6c:	d9 01       	movw	r26, r18
    4e6e:	99 27       	eor	r25, r25
    4e70:	88 27       	eor	r24, r24
    4e72:	a9 96       	adiw	r28, 0x29	; 41
    4e74:	2c ad       	ldd	r18, Y+60	; 0x3c
    4e76:	3d ad       	ldd	r19, Y+61	; 0x3d
    4e78:	4e ad       	ldd	r20, Y+62	; 0x3e
    4e7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    4e7c:	a9 97       	sbiw	r28, 0x29	; 41
    4e7e:	40 70       	andi	r20, 0x00	; 0
    4e80:	50 70       	andi	r21, 0x00	; 0
    4e82:	82 0f       	add	r24, r18
    4e84:	93 1f       	adc	r25, r19
    4e86:	a4 1f       	adc	r26, r20
    4e88:	b5 1f       	adc	r27, r21
    4e8a:	21 96       	adiw	r28, 0x01	; 1
    4e8c:	2c ad       	ldd	r18, Y+60	; 0x3c
    4e8e:	3d ad       	ldd	r19, Y+61	; 0x3d
    4e90:	4e ad       	ldd	r20, Y+62	; 0x3e
    4e92:	5f ad       	ldd	r21, Y+63	; 0x3f
    4e94:	21 97       	sbiw	r28, 0x01	; 1
    4e96:	e2 96       	adiw	r28, 0x32	; 50
    4e98:	0f ac       	ldd	r0, Y+63	; 0x3f
    4e9a:	e2 97       	sbiw	r28, 0x32	; 50
    4e9c:	04 c0       	rjmp	.+8      	; 0x4ea6 <__divdi3+0xedc>
    4e9e:	22 0f       	add	r18, r18
    4ea0:	33 1f       	adc	r19, r19
    4ea2:	44 1f       	adc	r20, r20
    4ea4:	55 1f       	adc	r21, r21
    4ea6:	0a 94       	dec	r0
    4ea8:	d2 f7       	brpl	.-12     	; 0x4e9e <__divdi3+0xed4>
    4eaa:	28 17       	cp	r18, r24
    4eac:	39 07       	cpc	r19, r25
    4eae:	4a 07       	cpc	r20, r26
    4eb0:	5b 07       	cpc	r21, r27
    4eb2:	48 f5       	brcc	.+82     	; 0x4f06 <__divdi3+0xf3c>
    4eb4:	25 96       	adiw	r28, 0x05	; 5
    4eb6:	0c ad       	ldd	r16, Y+60	; 0x3c
    4eb8:	1d ad       	ldd	r17, Y+61	; 0x3d
    4eba:	2e ad       	ldd	r18, Y+62	; 0x3e
    4ebc:	3f ad       	ldd	r19, Y+63	; 0x3f
    4ebe:	25 97       	sbiw	r28, 0x05	; 5
    4ec0:	01 50       	subi	r16, 0x01	; 1
    4ec2:	10 40       	sbci	r17, 0x00	; 0
    4ec4:	20 40       	sbci	r18, 0x00	; 0
    4ec6:	30 40       	sbci	r19, 0x00	; 0
    4ec8:	25 96       	adiw	r28, 0x05	; 5
    4eca:	0c af       	std	Y+60, r16	; 0x3c
    4ecc:	1d af       	std	Y+61, r17	; 0x3d
    4ece:	2e af       	std	Y+62, r18	; 0x3e
    4ed0:	3f af       	std	Y+63, r19	; 0x3f
    4ed2:	25 97       	sbiw	r28, 0x05	; 5
    4ed4:	18 c0       	rjmp	.+48     	; 0x4f06 <__divdi3+0xf3c>
    4ed6:	66 24       	eor	r6, r6
    4ed8:	77 24       	eor	r7, r7
    4eda:	43 01       	movw	r8, r6
    4edc:	21 e0       	ldi	r18, 0x01	; 1
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	40 e0       	ldi	r20, 0x00	; 0
    4ee2:	50 e0       	ldi	r21, 0x00	; 0
    4ee4:	25 96       	adiw	r28, 0x05	; 5
    4ee6:	2c af       	std	Y+60, r18	; 0x3c
    4ee8:	3d af       	std	Y+61, r19	; 0x3d
    4eea:	4e af       	std	Y+62, r20	; 0x3e
    4eec:	5f af       	std	Y+63, r21	; 0x3f
    4eee:	25 97       	sbiw	r28, 0x05	; 5
    4ef0:	0d c0       	rjmp	.+26     	; 0x4f0c <__divdi3+0xf42>
    4ef2:	66 24       	eor	r6, r6
    4ef4:	77 24       	eor	r7, r7
    4ef6:	43 01       	movw	r8, r6
    4ef8:	25 96       	adiw	r28, 0x05	; 5
    4efa:	1c ae       	std	Y+60, r1	; 0x3c
    4efc:	1d ae       	std	Y+61, r1	; 0x3d
    4efe:	1e ae       	std	Y+62, r1	; 0x3e
    4f00:	1f ae       	std	Y+63, r1	; 0x3f
    4f02:	25 97       	sbiw	r28, 0x05	; 5
    4f04:	03 c0       	rjmp	.+6      	; 0x4f0c <__divdi3+0xf42>
    4f06:	66 24       	eor	r6, r6
    4f08:	77 24       	eor	r7, r7
    4f0a:	43 01       	movw	r8, r6
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	b1 96       	adiw	r30, 0x21	; 33
    4f10:	88 e0       	ldi	r24, 0x08	; 8
    4f12:	df 01       	movw	r26, r30
    4f14:	1d 92       	st	X+, r1
    4f16:	8a 95       	dec	r24
    4f18:	e9 f7       	brne	.-6      	; 0x4f14 <__divdi3+0xf4a>
    4f1a:	25 96       	adiw	r28, 0x05	; 5
    4f1c:	ac ac       	ldd	r10, Y+60	; 0x3c
    4f1e:	bd ac       	ldd	r11, Y+61	; 0x3d
    4f20:	ce ac       	ldd	r12, Y+62	; 0x3e
    4f22:	df ac       	ldd	r13, Y+63	; 0x3f
    4f24:	25 97       	sbiw	r28, 0x05	; 5
    4f26:	a9 a2       	std	Y+33, r10	; 0x21
    4f28:	ba a2       	std	Y+34, r11	; 0x22
    4f2a:	cb a2       	std	Y+35, r12	; 0x23
    4f2c:	dc a2       	std	Y+36, r13	; 0x24
    4f2e:	6d a2       	std	Y+37, r6	; 0x25
    4f30:	7e a2       	std	Y+38, r7	; 0x26
    4f32:	8f a2       	std	Y+39, r8	; 0x27
    4f34:	98 a6       	std	Y+40, r9	; 0x28
    4f36:	22 96       	adiw	r28, 0x02	; 2
    4f38:	2f ad       	ldd	r18, Y+63	; 0x3f
    4f3a:	22 97       	sbiw	r28, 0x02	; 2
    4f3c:	3a a1       	ldd	r19, Y+34	; 0x22
    4f3e:	4b a1       	ldd	r20, Y+35	; 0x23
    4f40:	5c a1       	ldd	r21, Y+36	; 0x24
    4f42:	66 2d       	mov	r22, r6
    4f44:	7e a1       	ldd	r23, Y+38	; 0x26
    4f46:	df a0       	ldd	r13, Y+39	; 0x27
    4f48:	98 a5       	ldd	r25, Y+40	; 0x28
    4f4a:	e1 96       	adiw	r28, 0x31	; 49
    4f4c:	ec ac       	ldd	r14, Y+60	; 0x3c
    4f4e:	fd ac       	ldd	r15, Y+61	; 0x3d
    4f50:	0e ad       	ldd	r16, Y+62	; 0x3e
    4f52:	1f ad       	ldd	r17, Y+63	; 0x3f
    4f54:	e1 97       	sbiw	r28, 0x31	; 49
    4f56:	e1 14       	cp	r14, r1
    4f58:	f1 04       	cpc	r15, r1
    4f5a:	01 05       	cpc	r16, r1
    4f5c:	11 05       	cpc	r17, r1
    4f5e:	09 f4       	brne	.+2      	; 0x4f62 <__divdi3+0xf98>
    4f60:	56 c0       	rjmp	.+172    	; 0x500e <__divdi3+0x1044>
    4f62:	21 95       	neg	r18
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	12 16       	cp	r1, r18
    4f68:	08 f0       	brcs	.+2      	; 0x4f6c <__divdi3+0xfa2>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	31 95       	neg	r19
    4f6e:	e1 e0       	ldi	r30, 0x01	; 1
    4f70:	13 16       	cp	r1, r19
    4f72:	08 f0       	brcs	.+2      	; 0x4f76 <__divdi3+0xfac>
    4f74:	e0 e0       	ldi	r30, 0x00	; 0
    4f76:	93 2e       	mov	r9, r19
    4f78:	98 1a       	sub	r9, r24
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	39 15       	cp	r19, r9
    4f7e:	08 f0       	brcs	.+2      	; 0x4f82 <__divdi3+0xfb8>
    4f80:	80 e0       	ldi	r24, 0x00	; 0
    4f82:	e8 2b       	or	r30, r24
    4f84:	41 95       	neg	r20
    4f86:	f1 e0       	ldi	r31, 0x01	; 1
    4f88:	14 16       	cp	r1, r20
    4f8a:	08 f0       	brcs	.+2      	; 0x4f8e <__divdi3+0xfc4>
    4f8c:	f0 e0       	ldi	r31, 0x00	; 0
    4f8e:	a4 2e       	mov	r10, r20
    4f90:	ae 1a       	sub	r10, r30
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	4a 15       	cp	r20, r10
    4f96:	08 f0       	brcs	.+2      	; 0x4f9a <__divdi3+0xfd0>
    4f98:	80 e0       	ldi	r24, 0x00	; 0
    4f9a:	f8 2b       	or	r31, r24
    4f9c:	51 95       	neg	r21
    4f9e:	e1 e0       	ldi	r30, 0x01	; 1
    4fa0:	15 16       	cp	r1, r21
    4fa2:	08 f0       	brcs	.+2      	; 0x4fa6 <__divdi3+0xfdc>
    4fa4:	e0 e0       	ldi	r30, 0x00	; 0
    4fa6:	b5 2e       	mov	r11, r21
    4fa8:	bf 1a       	sub	r11, r31
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	5b 15       	cp	r21, r11
    4fae:	08 f0       	brcs	.+2      	; 0x4fb2 <__divdi3+0xfe8>
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	e8 2b       	or	r30, r24
    4fb4:	61 95       	neg	r22
    4fb6:	f1 e0       	ldi	r31, 0x01	; 1
    4fb8:	16 16       	cp	r1, r22
    4fba:	08 f0       	brcs	.+2      	; 0x4fbe <__divdi3+0xff4>
    4fbc:	f0 e0       	ldi	r31, 0x00	; 0
    4fbe:	a6 2f       	mov	r26, r22
    4fc0:	ae 1b       	sub	r26, r30
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	6a 17       	cp	r22, r26
    4fc6:	08 f0       	brcs	.+2      	; 0x4fca <__divdi3+0x1000>
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	f8 2b       	or	r31, r24
    4fcc:	71 95       	neg	r23
    4fce:	e1 e0       	ldi	r30, 0x01	; 1
    4fd0:	17 16       	cp	r1, r23
    4fd2:	08 f0       	brcs	.+2      	; 0x4fd6 <__divdi3+0x100c>
    4fd4:	e0 e0       	ldi	r30, 0x00	; 0
    4fd6:	c7 2e       	mov	r12, r23
    4fd8:	cf 1a       	sub	r12, r31
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	7c 15       	cp	r23, r12
    4fde:	08 f0       	brcs	.+2      	; 0x4fe2 <__divdi3+0x1018>
    4fe0:	80 e0       	ldi	r24, 0x00	; 0
    4fe2:	e8 2b       	or	r30, r24
    4fe4:	8d 2d       	mov	r24, r13
    4fe6:	81 95       	neg	r24
    4fe8:	f1 e0       	ldi	r31, 0x01	; 1
    4fea:	18 16       	cp	r1, r24
    4fec:	08 f0       	brcs	.+2      	; 0x4ff0 <__divdi3+0x1026>
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	d8 2e       	mov	r13, r24
    4ff2:	de 1a       	sub	r13, r30
    4ff4:	e1 e0       	ldi	r30, 0x01	; 1
    4ff6:	8d 15       	cp	r24, r13
    4ff8:	08 f0       	brcs	.+2      	; 0x4ffc <__divdi3+0x1032>
    4ffa:	e0 e0       	ldi	r30, 0x00	; 0
    4ffc:	fe 2b       	or	r31, r30
    4ffe:	89 2f       	mov	r24, r25
    5000:	81 95       	neg	r24
    5002:	39 2d       	mov	r19, r9
    5004:	a5 01       	movw	r20, r10
    5006:	6a 2f       	mov	r22, r26
    5008:	7c 2d       	mov	r23, r12
    500a:	98 2f       	mov	r25, r24
    500c:	9f 1b       	sub	r25, r31
    500e:	8d 2d       	mov	r24, r13
    5010:	ce 58       	subi	r28, 0x8E	; 142
    5012:	df 4f       	sbci	r29, 0xFF	; 255
    5014:	e2 e1       	ldi	r30, 0x12	; 18
    5016:	0c 94 4c 39 	jmp	0x7298	; 0x7298 <__epilogue_restores__>

0000501a <__moddi3>:
    501a:	a7 e7       	ldi	r26, 0x77	; 119
    501c:	b0 e0       	ldi	r27, 0x00	; 0
    501e:	e3 e1       	ldi	r30, 0x13	; 19
    5020:	f8 e2       	ldi	r31, 0x28	; 40
    5022:	0c 94 30 39 	jmp	0x7260	; 0x7260 <__prologue_saves__>
    5026:	98 2e       	mov	r9, r24
    5028:	89 2e       	mov	r8, r25
    502a:	71 2e       	mov	r7, r17
    502c:	88 e0       	ldi	r24, 0x08	; 8
    502e:	fe 01       	movw	r30, r28
    5030:	31 96       	adiw	r30, 0x01	; 1
    5032:	df 01       	movw	r26, r30
    5034:	68 2e       	mov	r6, r24
    5036:	1d 92       	st	X+, r1
    5038:	6a 94       	dec	r6
    503a:	e9 f7       	brne	.-6      	; 0x5036 <__moddi3+0x1c>
    503c:	29 83       	std	Y+1, r18	; 0x01
    503e:	3a 83       	std	Y+2, r19	; 0x02
    5040:	4b 83       	std	Y+3, r20	; 0x03
    5042:	5c 83       	std	Y+4, r21	; 0x04
    5044:	6d 83       	std	Y+5, r22	; 0x05
    5046:	7e 83       	std	Y+6, r23	; 0x06
    5048:	9f 82       	std	Y+7, r9	; 0x07
    504a:	98 87       	std	Y+8, r25	; 0x08
    504c:	fe 01       	movw	r30, r28
    504e:	39 96       	adiw	r30, 0x09	; 9
    5050:	df 01       	movw	r26, r30
    5052:	1d 92       	st	X+, r1
    5054:	8a 95       	dec	r24
    5056:	e9 f7       	brne	.-6      	; 0x5052 <__moddi3+0x38>
    5058:	a9 86       	std	Y+9, r10	; 0x09
    505a:	ba 86       	std	Y+10, r11	; 0x0a
    505c:	cb 86       	std	Y+11, r12	; 0x0b
    505e:	dc 86       	std	Y+12, r13	; 0x0c
    5060:	ed 86       	std	Y+13, r14	; 0x0d
    5062:	fe 86       	std	Y+14, r15	; 0x0e
    5064:	0f 87       	std	Y+15, r16	; 0x0f
    5066:	18 8b       	std	Y+16, r17	; 0x10
    5068:	8d 81       	ldd	r24, Y+5	; 0x05
    506a:	9e 81       	ldd	r25, Y+6	; 0x06
    506c:	af 81       	ldd	r26, Y+7	; 0x07
    506e:	b8 85       	ldd	r27, Y+8	; 0x08
    5070:	b7 fd       	sbrc	r27, 7
    5072:	07 c0       	rjmp	.+14     	; 0x5082 <__moddi3+0x68>
    5074:	e1 96       	adiw	r28, 0x31	; 49
    5076:	1c ae       	std	Y+60, r1	; 0x3c
    5078:	1d ae       	std	Y+61, r1	; 0x3d
    507a:	1e ae       	std	Y+62, r1	; 0x3e
    507c:	1f ae       	std	Y+63, r1	; 0x3f
    507e:	e1 97       	sbiw	r28, 0x31	; 49
    5080:	64 c0       	rjmp	.+200    	; 0x514a <__moddi3+0x130>
    5082:	21 95       	neg	r18
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	12 16       	cp	r1, r18
    5088:	08 f0       	brcs	.+2      	; 0x508c <__moddi3+0x72>
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	31 95       	neg	r19
    508e:	91 e0       	ldi	r25, 0x01	; 1
    5090:	13 16       	cp	r1, r19
    5092:	08 f0       	brcs	.+2      	; 0x5096 <__moddi3+0x7c>
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	b3 2f       	mov	r27, r19
    5098:	b8 1b       	sub	r27, r24
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	3b 17       	cp	r19, r27
    509e:	08 f0       	brcs	.+2      	; 0x50a2 <__moddi3+0x88>
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	98 2b       	or	r25, r24
    50a4:	41 95       	neg	r20
    50a6:	31 e0       	ldi	r19, 0x01	; 1
    50a8:	14 16       	cp	r1, r20
    50aa:	08 f0       	brcs	.+2      	; 0x50ae <__moddi3+0x94>
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	a4 2f       	mov	r26, r20
    50b0:	a9 1b       	sub	r26, r25
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	4a 17       	cp	r20, r26
    50b6:	08 f0       	brcs	.+2      	; 0x50ba <__moddi3+0xa0>
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	38 2b       	or	r19, r24
    50bc:	51 95       	neg	r21
    50be:	91 e0       	ldi	r25, 0x01	; 1
    50c0:	15 16       	cp	r1, r21
    50c2:	08 f0       	brcs	.+2      	; 0x50c6 <__moddi3+0xac>
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	f5 2f       	mov	r31, r21
    50c8:	f3 1b       	sub	r31, r19
    50ca:	81 e0       	ldi	r24, 0x01	; 1
    50cc:	5f 17       	cp	r21, r31
    50ce:	08 f0       	brcs	.+2      	; 0x50d2 <__moddi3+0xb8>
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	98 2b       	or	r25, r24
    50d4:	61 95       	neg	r22
    50d6:	31 e0       	ldi	r19, 0x01	; 1
    50d8:	16 16       	cp	r1, r22
    50da:	08 f0       	brcs	.+2      	; 0x50de <__moddi3+0xc4>
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	e6 2f       	mov	r30, r22
    50e0:	e9 1b       	sub	r30, r25
    50e2:	81 e0       	ldi	r24, 0x01	; 1
    50e4:	6e 17       	cp	r22, r30
    50e6:	08 f0       	brcs	.+2      	; 0x50ea <__moddi3+0xd0>
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	38 2b       	or	r19, r24
    50ec:	71 95       	neg	r23
    50ee:	41 e0       	ldi	r20, 0x01	; 1
    50f0:	17 16       	cp	r1, r23
    50f2:	08 f0       	brcs	.+2      	; 0x50f6 <__moddi3+0xdc>
    50f4:	40 e0       	ldi	r20, 0x00	; 0
    50f6:	57 2f       	mov	r21, r23
    50f8:	53 1b       	sub	r21, r19
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	75 17       	cp	r23, r21
    50fe:	08 f0       	brcs	.+2      	; 0x5102 <__moddi3+0xe8>
    5100:	80 e0       	ldi	r24, 0x00	; 0
    5102:	48 2b       	or	r20, r24
    5104:	89 2d       	mov	r24, r9
    5106:	81 95       	neg	r24
    5108:	91 e0       	ldi	r25, 0x01	; 1
    510a:	18 16       	cp	r1, r24
    510c:	08 f0       	brcs	.+2      	; 0x5110 <__moddi3+0xf6>
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	68 2e       	mov	r6, r24
    5112:	64 1a       	sub	r6, r20
    5114:	46 2d       	mov	r20, r6
    5116:	31 e0       	ldi	r19, 0x01	; 1
    5118:	86 15       	cp	r24, r6
    511a:	08 f0       	brcs	.+2      	; 0x511e <__moddi3+0x104>
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	93 2b       	or	r25, r19
    5120:	88 2d       	mov	r24, r8
    5122:	81 95       	neg	r24
    5124:	89 1b       	sub	r24, r25
    5126:	29 83       	std	Y+1, r18	; 0x01
    5128:	ba 83       	std	Y+2, r27	; 0x02
    512a:	ab 83       	std	Y+3, r26	; 0x03
    512c:	fc 83       	std	Y+4, r31	; 0x04
    512e:	ed 83       	std	Y+5, r30	; 0x05
    5130:	5e 83       	std	Y+6, r21	; 0x06
    5132:	4f 83       	std	Y+7, r20	; 0x07
    5134:	88 87       	std	Y+8, r24	; 0x08
    5136:	2f ef       	ldi	r18, 0xFF	; 255
    5138:	3f ef       	ldi	r19, 0xFF	; 255
    513a:	4f ef       	ldi	r20, 0xFF	; 255
    513c:	5f ef       	ldi	r21, 0xFF	; 255
    513e:	e1 96       	adiw	r28, 0x31	; 49
    5140:	2c af       	std	Y+60, r18	; 0x3c
    5142:	3d af       	std	Y+61, r19	; 0x3d
    5144:	4e af       	std	Y+62, r20	; 0x3e
    5146:	5f af       	std	Y+63, r21	; 0x3f
    5148:	e1 97       	sbiw	r28, 0x31	; 49
    514a:	8d 85       	ldd	r24, Y+13	; 0x0d
    514c:	9e 85       	ldd	r25, Y+14	; 0x0e
    514e:	af 85       	ldd	r26, Y+15	; 0x0f
    5150:	b8 89       	ldd	r27, Y+16	; 0x10
    5152:	b7 ff       	sbrs	r27, 7
    5154:	5a c0       	rjmp	.+180    	; 0x520a <__moddi3+0x1f0>
    5156:	a1 94       	neg	r10
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	1a 14       	cp	r1, r10
    515c:	08 f0       	brcs	.+2      	; 0x5160 <__moddi3+0x146>
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	b1 94       	neg	r11
    5162:	91 e0       	ldi	r25, 0x01	; 1
    5164:	1b 14       	cp	r1, r11
    5166:	08 f0       	brcs	.+2      	; 0x516a <__moddi3+0x150>
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	6b 2d       	mov	r22, r11
    516c:	68 1b       	sub	r22, r24
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	b6 16       	cp	r11, r22
    5172:	08 f0       	brcs	.+2      	; 0x5176 <__moddi3+0x15c>
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	98 2b       	or	r25, r24
    5178:	c1 94       	neg	r12
    517a:	21 e0       	ldi	r18, 0x01	; 1
    517c:	1c 14       	cp	r1, r12
    517e:	08 f0       	brcs	.+2      	; 0x5182 <__moddi3+0x168>
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	5c 2d       	mov	r21, r12
    5184:	59 1b       	sub	r21, r25
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	c5 16       	cp	r12, r21
    518a:	08 f0       	brcs	.+2      	; 0x518e <__moddi3+0x174>
    518c:	80 e0       	ldi	r24, 0x00	; 0
    518e:	28 2b       	or	r18, r24
    5190:	d1 94       	neg	r13
    5192:	91 e0       	ldi	r25, 0x01	; 1
    5194:	1d 14       	cp	r1, r13
    5196:	08 f0       	brcs	.+2      	; 0x519a <__moddi3+0x180>
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	4d 2d       	mov	r20, r13
    519c:	42 1b       	sub	r20, r18
    519e:	81 e0       	ldi	r24, 0x01	; 1
    51a0:	d4 16       	cp	r13, r20
    51a2:	08 f0       	brcs	.+2      	; 0x51a6 <__moddi3+0x18c>
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	98 2b       	or	r25, r24
    51a8:	e1 94       	neg	r14
    51aa:	21 e0       	ldi	r18, 0x01	; 1
    51ac:	1e 14       	cp	r1, r14
    51ae:	08 f0       	brcs	.+2      	; 0x51b2 <__moddi3+0x198>
    51b0:	20 e0       	ldi	r18, 0x00	; 0
    51b2:	3e 2d       	mov	r19, r14
    51b4:	39 1b       	sub	r19, r25
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	e3 16       	cp	r14, r19
    51ba:	08 f0       	brcs	.+2      	; 0x51be <__moddi3+0x1a4>
    51bc:	80 e0       	ldi	r24, 0x00	; 0
    51be:	28 2b       	or	r18, r24
    51c0:	f1 94       	neg	r15
    51c2:	91 e0       	ldi	r25, 0x01	; 1
    51c4:	1f 14       	cp	r1, r15
    51c6:	08 f0       	brcs	.+2      	; 0x51ca <__moddi3+0x1b0>
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	7f 2d       	mov	r23, r15
    51cc:	72 1b       	sub	r23, r18
    51ce:	27 2f       	mov	r18, r23
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	f7 16       	cp	r15, r23
    51d4:	08 f0       	brcs	.+2      	; 0x51d8 <__moddi3+0x1be>
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	98 2b       	or	r25, r24
    51da:	01 95       	neg	r16
    51dc:	11 e0       	ldi	r17, 0x01	; 1
    51de:	10 16       	cp	r1, r16
    51e0:	08 f0       	brcs	.+2      	; 0x51e4 <__moddi3+0x1ca>
    51e2:	10 e0       	ldi	r17, 0x00	; 0
    51e4:	80 2f       	mov	r24, r16
    51e6:	89 1b       	sub	r24, r25
    51e8:	98 2f       	mov	r25, r24
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	09 17       	cp	r16, r25
    51ee:	08 f0       	brcs	.+2      	; 0x51f2 <__moddi3+0x1d8>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	18 2b       	or	r17, r24
    51f4:	87 2d       	mov	r24, r7
    51f6:	81 95       	neg	r24
    51f8:	81 1b       	sub	r24, r17
    51fa:	a9 86       	std	Y+9, r10	; 0x09
    51fc:	6a 87       	std	Y+10, r22	; 0x0a
    51fe:	5b 87       	std	Y+11, r21	; 0x0b
    5200:	4c 87       	std	Y+12, r20	; 0x0c
    5202:	3d 87       	std	Y+13, r19	; 0x0d
    5204:	2e 87       	std	Y+14, r18	; 0x0e
    5206:	9f 87       	std	Y+15, r25	; 0x0f
    5208:	88 8b       	std	Y+16, r24	; 0x10
    520a:	99 81       	ldd	r25, Y+1	; 0x01
    520c:	2a 81       	ldd	r18, Y+2	; 0x02
    520e:	3b 81       	ldd	r19, Y+3	; 0x03
    5210:	4c 81       	ldd	r20, Y+4	; 0x04
    5212:	5d 81       	ldd	r21, Y+5	; 0x05
    5214:	6e 81       	ldd	r22, Y+6	; 0x06
    5216:	7f 81       	ldd	r23, Y+7	; 0x07
    5218:	a8 85       	ldd	r26, Y+8	; 0x08
    521a:	b9 85       	ldd	r27, Y+9	; 0x09
    521c:	1a 85       	ldd	r17, Y+10	; 0x0a
    521e:	0b 85       	ldd	r16, Y+11	; 0x0b
    5220:	fc 84       	ldd	r15, Y+12	; 0x0c
    5222:	ed 84       	ldd	r14, Y+13	; 0x0d
    5224:	de 84       	ldd	r13, Y+14	; 0x0e
    5226:	cf 84       	ldd	r12, Y+15	; 0x0f
    5228:	b8 88       	ldd	r11, Y+16	; 0x10
    522a:	88 e0       	ldi	r24, 0x08	; 8
    522c:	e9 e1       	ldi	r30, 0x19	; 25
    522e:	8e 2e       	mov	r8, r30
    5230:	91 2c       	mov	r9, r1
    5232:	8c 0e       	add	r8, r28
    5234:	9d 1e       	adc	r9, r29
    5236:	f4 01       	movw	r30, r8
    5238:	68 2e       	mov	r6, r24
    523a:	11 92       	st	Z+, r1
    523c:	6a 94       	dec	r6
    523e:	e9 f7       	brne	.-6      	; 0x523a <__moddi3+0x220>
    5240:	99 8f       	std	Y+25, r25	; 0x19
    5242:	2a 8f       	std	Y+26, r18	; 0x1a
    5244:	3b 8f       	std	Y+27, r19	; 0x1b
    5246:	4c 8f       	std	Y+28, r20	; 0x1c
    5248:	5d 8f       	std	Y+29, r21	; 0x1d
    524a:	6e 8f       	std	Y+30, r22	; 0x1e
    524c:	7f 8f       	std	Y+31, r23	; 0x1f
    524e:	a8 a3       	std	Y+32, r26	; 0x20
    5250:	9e 01       	movw	r18, r28
    5252:	2f 5d       	subi	r18, 0xDF	; 223
    5254:	3f 4f       	sbci	r19, 0xFF	; 255
    5256:	f9 01       	movw	r30, r18
    5258:	11 92       	st	Z+, r1
    525a:	8a 95       	dec	r24
    525c:	e9 f7       	brne	.-6      	; 0x5258 <__moddi3+0x23e>
    525e:	b9 a3       	std	Y+33, r27	; 0x21
    5260:	1a a3       	std	Y+34, r17	; 0x22
    5262:	0b a3       	std	Y+35, r16	; 0x23
    5264:	fc a2       	std	Y+36, r15	; 0x24
    5266:	ed a2       	std	Y+37, r14	; 0x25
    5268:	de a2       	std	Y+38, r13	; 0x26
    526a:	cf a2       	std	Y+39, r12	; 0x27
    526c:	b8 a6       	std	Y+40, r11	; 0x28
    526e:	29 a0       	ldd	r2, Y+33	; 0x21
    5270:	3a a0       	ldd	r3, Y+34	; 0x22
    5272:	4b a0       	ldd	r4, Y+35	; 0x23
    5274:	5c a0       	ldd	r5, Y+36	; 0x24
    5276:	ad a0       	ldd	r10, Y+37	; 0x25
    5278:	be a0       	ldd	r11, Y+38	; 0x26
    527a:	cf a0       	ldd	r12, Y+39	; 0x27
    527c:	d8 a4       	ldd	r13, Y+40	; 0x28
    527e:	49 8d       	ldd	r20, Y+25	; 0x19
    5280:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5282:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5284:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5286:	e5 96       	adiw	r28, 0x35	; 53
    5288:	4f af       	std	Y+63, r20	; 0x3f
    528a:	e5 97       	sbiw	r28, 0x35	; 53
    528c:	e6 96       	adiw	r28, 0x36	; 54
    528e:	5f af       	std	Y+63, r21	; 0x3f
    5290:	e6 97       	sbiw	r28, 0x36	; 54
    5292:	e7 96       	adiw	r28, 0x37	; 55
    5294:	6f af       	std	Y+63, r22	; 0x3f
    5296:	e7 97       	sbiw	r28, 0x37	; 55
    5298:	e8 96       	adiw	r28, 0x38	; 56
    529a:	7f af       	std	Y+63, r23	; 0x3f
    529c:	e8 97       	sbiw	r28, 0x38	; 56
    529e:	e8 96       	adiw	r28, 0x38	; 56
    52a0:	6c ac       	ldd	r6, Y+60	; 0x3c
    52a2:	7d ac       	ldd	r7, Y+61	; 0x3d
    52a4:	8e ac       	ldd	r8, Y+62	; 0x3e
    52a6:	9f ac       	ldd	r9, Y+63	; 0x3f
    52a8:	e8 97       	sbiw	r28, 0x38	; 56
    52aa:	2d 96       	adiw	r28, 0x0d	; 13
    52ac:	6c ae       	std	Y+60, r6	; 0x3c
    52ae:	7d ae       	std	Y+61, r7	; 0x3d
    52b0:	8e ae       	std	Y+62, r8	; 0x3e
    52b2:	9f ae       	std	Y+63, r9	; 0x3f
    52b4:	2d 97       	sbiw	r28, 0x0d	; 13
    52b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    52bc:	38 a1       	ldd	r19, Y+32	; 0x20
    52be:	3c 01       	movw	r6, r24
    52c0:	49 01       	movw	r8, r18
    52c2:	61 96       	adiw	r28, 0x11	; 17
    52c4:	6c ae       	std	Y+60, r6	; 0x3c
    52c6:	7d ae       	std	Y+61, r7	; 0x3d
    52c8:	8e ae       	std	Y+62, r8	; 0x3e
    52ca:	9f ae       	std	Y+63, r9	; 0x3f
    52cc:	61 97       	sbiw	r28, 0x11	; 17
    52ce:	a1 14       	cp	r10, r1
    52d0:	b1 04       	cpc	r11, r1
    52d2:	c1 04       	cpc	r12, r1
    52d4:	d1 04       	cpc	r13, r1
    52d6:	09 f0       	breq	.+2      	; 0x52da <__moddi3+0x2c0>
    52d8:	28 c3       	rjmp	.+1616   	; 0x592a <__moddi3+0x910>
    52da:	62 14       	cp	r6, r2
    52dc:	73 04       	cpc	r7, r3
    52de:	84 04       	cpc	r8, r4
    52e0:	95 04       	cpc	r9, r5
    52e2:	08 f0       	brcs	.+2      	; 0x52e6 <__moddi3+0x2cc>
    52e4:	0e c1       	rjmp	.+540    	; 0x5502 <__moddi3+0x4e8>
    52e6:	00 e0       	ldi	r16, 0x00	; 0
    52e8:	20 16       	cp	r2, r16
    52ea:	00 e0       	ldi	r16, 0x00	; 0
    52ec:	30 06       	cpc	r3, r16
    52ee:	01 e0       	ldi	r16, 0x01	; 1
    52f0:	40 06       	cpc	r4, r16
    52f2:	00 e0       	ldi	r16, 0x00	; 0
    52f4:	50 06       	cpc	r5, r16
    52f6:	88 f4       	brcc	.+34     	; 0x531a <__moddi3+0x300>
    52f8:	1f ef       	ldi	r17, 0xFF	; 255
    52fa:	21 16       	cp	r2, r17
    52fc:	31 04       	cpc	r3, r1
    52fe:	41 04       	cpc	r4, r1
    5300:	51 04       	cpc	r5, r1
    5302:	39 f0       	breq	.+14     	; 0x5312 <__moddi3+0x2f8>
    5304:	30 f0       	brcs	.+12     	; 0x5312 <__moddi3+0x2f8>
    5306:	18 e0       	ldi	r17, 0x08	; 8
    5308:	e1 2e       	mov	r14, r17
    530a:	f1 2c       	mov	r15, r1
    530c:	01 2d       	mov	r16, r1
    530e:	11 2d       	mov	r17, r1
    5310:	18 c0       	rjmp	.+48     	; 0x5342 <__moddi3+0x328>
    5312:	ee 24       	eor	r14, r14
    5314:	ff 24       	eor	r15, r15
    5316:	87 01       	movw	r16, r14
    5318:	14 c0       	rjmp	.+40     	; 0x5342 <__moddi3+0x328>
    531a:	20 e0       	ldi	r18, 0x00	; 0
    531c:	22 16       	cp	r2, r18
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	32 06       	cpc	r3, r18
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	42 06       	cpc	r4, r18
    5326:	21 e0       	ldi	r18, 0x01	; 1
    5328:	52 06       	cpc	r5, r18
    532a:	30 f0       	brcs	.+12     	; 0x5338 <__moddi3+0x31e>
    532c:	b8 e1       	ldi	r27, 0x18	; 24
    532e:	eb 2e       	mov	r14, r27
    5330:	f1 2c       	mov	r15, r1
    5332:	01 2d       	mov	r16, r1
    5334:	11 2d       	mov	r17, r1
    5336:	05 c0       	rjmp	.+10     	; 0x5342 <__moddi3+0x328>
    5338:	a0 e1       	ldi	r26, 0x10	; 16
    533a:	ea 2e       	mov	r14, r26
    533c:	f1 2c       	mov	r15, r1
    533e:	01 2d       	mov	r16, r1
    5340:	11 2d       	mov	r17, r1
    5342:	d2 01       	movw	r26, r4
    5344:	c1 01       	movw	r24, r2
    5346:	0e 2c       	mov	r0, r14
    5348:	04 c0       	rjmp	.+8      	; 0x5352 <__moddi3+0x338>
    534a:	b6 95       	lsr	r27
    534c:	a7 95       	ror	r26
    534e:	97 95       	ror	r25
    5350:	87 95       	ror	r24
    5352:	0a 94       	dec	r0
    5354:	d2 f7       	brpl	.-12     	; 0x534a <__moddi3+0x330>
    5356:	87 53       	subi	r24, 0x37	; 55
    5358:	9c 4f       	sbci	r25, 0xFC	; 252
    535a:	dc 01       	movw	r26, r24
    535c:	2c 91       	ld	r18, X
    535e:	80 e2       	ldi	r24, 0x20	; 32
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	a0 e0       	ldi	r26, 0x00	; 0
    5364:	b0 e0       	ldi	r27, 0x00	; 0
    5366:	8e 19       	sub	r24, r14
    5368:	9f 09       	sbc	r25, r15
    536a:	a0 0b       	sbc	r26, r16
    536c:	b1 0b       	sbc	r27, r17
    536e:	5c 01       	movw	r10, r24
    5370:	6d 01       	movw	r12, r26
    5372:	a2 1a       	sub	r10, r18
    5374:	b1 08       	sbc	r11, r1
    5376:	c1 08       	sbc	r12, r1
    5378:	d1 08       	sbc	r13, r1
    537a:	65 96       	adiw	r28, 0x15	; 21
    537c:	ac ae       	std	Y+60, r10	; 0x3c
    537e:	bd ae       	std	Y+61, r11	; 0x3d
    5380:	ce ae       	std	Y+62, r12	; 0x3e
    5382:	df ae       	std	Y+63, r13	; 0x3f
    5384:	65 97       	sbiw	r28, 0x15	; 21
    5386:	a1 14       	cp	r10, r1
    5388:	b1 04       	cpc	r11, r1
    538a:	c1 04       	cpc	r12, r1
    538c:	d1 04       	cpc	r13, r1
    538e:	09 f4       	brne	.+2      	; 0x5392 <__moddi3+0x378>
    5390:	45 c0       	rjmp	.+138    	; 0x541c <__moddi3+0x402>
    5392:	62 96       	adiw	r28, 0x12	; 18
    5394:	6f ad       	ldd	r22, Y+63	; 0x3f
    5396:	62 97       	sbiw	r28, 0x12	; 18
    5398:	06 2e       	mov	r0, r22
    539a:	04 c0       	rjmp	.+8      	; 0x53a4 <__moddi3+0x38a>
    539c:	22 0c       	add	r2, r2
    539e:	33 1c       	adc	r3, r3
    53a0:	44 1c       	adc	r4, r4
    53a2:	55 1c       	adc	r5, r5
    53a4:	0a 94       	dec	r0
    53a6:	d2 f7       	brpl	.-12     	; 0x539c <__moddi3+0x382>
    53a8:	a4 01       	movw	r20, r8
    53aa:	93 01       	movw	r18, r6
    53ac:	06 2e       	mov	r0, r22
    53ae:	04 c0       	rjmp	.+8      	; 0x53b8 <__moddi3+0x39e>
    53b0:	22 0f       	add	r18, r18
    53b2:	33 1f       	adc	r19, r19
    53b4:	44 1f       	adc	r20, r20
    53b6:	55 1f       	adc	r21, r21
    53b8:	0a 94       	dec	r0
    53ba:	d2 f7       	brpl	.-12     	; 0x53b0 <__moddi3+0x396>
    53bc:	80 e2       	ldi	r24, 0x20	; 32
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	8a 19       	sub	r24, r10
    53c2:	9b 09       	sbc	r25, r11
    53c4:	e8 96       	adiw	r28, 0x38	; 56
    53c6:	cc ac       	ldd	r12, Y+60	; 0x3c
    53c8:	dd ac       	ldd	r13, Y+61	; 0x3d
    53ca:	ee ac       	ldd	r14, Y+62	; 0x3e
    53cc:	ff ac       	ldd	r15, Y+63	; 0x3f
    53ce:	e8 97       	sbiw	r28, 0x38	; 56
    53d0:	04 c0       	rjmp	.+8      	; 0x53da <__moddi3+0x3c0>
    53d2:	f6 94       	lsr	r15
    53d4:	e7 94       	ror	r14
    53d6:	d7 94       	ror	r13
    53d8:	c7 94       	ror	r12
    53da:	8a 95       	dec	r24
    53dc:	d2 f7       	brpl	.-12     	; 0x53d2 <__moddi3+0x3b8>
    53de:	87 01       	movw	r16, r14
    53e0:	76 01       	movw	r14, r12
    53e2:	e2 2a       	or	r14, r18
    53e4:	f3 2a       	or	r15, r19
    53e6:	04 2b       	or	r16, r20
    53e8:	15 2b       	or	r17, r21
    53ea:	61 96       	adiw	r28, 0x11	; 17
    53ec:	ec ae       	std	Y+60, r14	; 0x3c
    53ee:	fd ae       	std	Y+61, r15	; 0x3d
    53f0:	0e af       	std	Y+62, r16	; 0x3e
    53f2:	1f af       	std	Y+63, r17	; 0x3f
    53f4:	61 97       	sbiw	r28, 0x11	; 17
    53f6:	e8 96       	adiw	r28, 0x38	; 56
    53f8:	0c ad       	ldd	r16, Y+60	; 0x3c
    53fa:	1d ad       	ldd	r17, Y+61	; 0x3d
    53fc:	2e ad       	ldd	r18, Y+62	; 0x3e
    53fe:	3f ad       	ldd	r19, Y+63	; 0x3f
    5400:	e8 97       	sbiw	r28, 0x38	; 56
    5402:	04 c0       	rjmp	.+8      	; 0x540c <__moddi3+0x3f2>
    5404:	00 0f       	add	r16, r16
    5406:	11 1f       	adc	r17, r17
    5408:	22 1f       	adc	r18, r18
    540a:	33 1f       	adc	r19, r19
    540c:	6a 95       	dec	r22
    540e:	d2 f7       	brpl	.-12     	; 0x5404 <__moddi3+0x3ea>
    5410:	2d 96       	adiw	r28, 0x0d	; 13
    5412:	0c af       	std	Y+60, r16	; 0x3c
    5414:	1d af       	std	Y+61, r17	; 0x3d
    5416:	2e af       	std	Y+62, r18	; 0x3e
    5418:	3f af       	std	Y+63, r19	; 0x3f
    541a:	2d 97       	sbiw	r28, 0x0d	; 13
    541c:	32 01       	movw	r6, r4
    541e:	88 24       	eor	r8, r8
    5420:	99 24       	eor	r9, r9
    5422:	a2 01       	movw	r20, r4
    5424:	91 01       	movw	r18, r2
    5426:	40 70       	andi	r20, 0x00	; 0
    5428:	50 70       	andi	r21, 0x00	; 0
    542a:	69 96       	adiw	r28, 0x19	; 25
    542c:	2c af       	std	Y+60, r18	; 0x3c
    542e:	3d af       	std	Y+61, r19	; 0x3d
    5430:	4e af       	std	Y+62, r20	; 0x3e
    5432:	5f af       	std	Y+63, r21	; 0x3f
    5434:	69 97       	sbiw	r28, 0x19	; 25
    5436:	61 96       	adiw	r28, 0x11	; 17
    5438:	6c ad       	ldd	r22, Y+60	; 0x3c
    543a:	7d ad       	ldd	r23, Y+61	; 0x3d
    543c:	8e ad       	ldd	r24, Y+62	; 0x3e
    543e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5440:	61 97       	sbiw	r28, 0x11	; 17
    5442:	a4 01       	movw	r20, r8
    5444:	93 01       	movw	r18, r6
    5446:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    544a:	7b 01       	movw	r14, r22
    544c:	8c 01       	movw	r16, r24
    544e:	61 96       	adiw	r28, 0x11	; 17
    5450:	6c ad       	ldd	r22, Y+60	; 0x3c
    5452:	7d ad       	ldd	r23, Y+61	; 0x3d
    5454:	8e ad       	ldd	r24, Y+62	; 0x3e
    5456:	9f ad       	ldd	r25, Y+63	; 0x3f
    5458:	61 97       	sbiw	r28, 0x11	; 17
    545a:	a4 01       	movw	r20, r8
    545c:	93 01       	movw	r18, r6
    545e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5462:	ca 01       	movw	r24, r20
    5464:	b9 01       	movw	r22, r18
    5466:	69 96       	adiw	r28, 0x19	; 25
    5468:	2c ad       	ldd	r18, Y+60	; 0x3c
    546a:	3d ad       	ldd	r19, Y+61	; 0x3d
    546c:	4e ad       	ldd	r20, Y+62	; 0x3e
    546e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5470:	69 97       	sbiw	r28, 0x19	; 25
    5472:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5476:	9b 01       	movw	r18, r22
    5478:	ac 01       	movw	r20, r24
    547a:	87 01       	movw	r16, r14
    547c:	ff 24       	eor	r15, r15
    547e:	ee 24       	eor	r14, r14
    5480:	2d 96       	adiw	r28, 0x0d	; 13
    5482:	ac ac       	ldd	r10, Y+60	; 0x3c
    5484:	bd ac       	ldd	r11, Y+61	; 0x3d
    5486:	ce ac       	ldd	r12, Y+62	; 0x3e
    5488:	df ac       	ldd	r13, Y+63	; 0x3f
    548a:	2d 97       	sbiw	r28, 0x0d	; 13
    548c:	c6 01       	movw	r24, r12
    548e:	aa 27       	eor	r26, r26
    5490:	bb 27       	eor	r27, r27
    5492:	57 01       	movw	r10, r14
    5494:	68 01       	movw	r12, r16
    5496:	a8 2a       	or	r10, r24
    5498:	b9 2a       	or	r11, r25
    549a:	ca 2a       	or	r12, r26
    549c:	db 2a       	or	r13, r27
    549e:	a2 16       	cp	r10, r18
    54a0:	b3 06       	cpc	r11, r19
    54a2:	c4 06       	cpc	r12, r20
    54a4:	d5 06       	cpc	r13, r21
    54a6:	90 f4       	brcc	.+36     	; 0x54cc <__moddi3+0x4b2>
    54a8:	a2 0c       	add	r10, r2
    54aa:	b3 1c       	adc	r11, r3
    54ac:	c4 1c       	adc	r12, r4
    54ae:	d5 1c       	adc	r13, r5
    54b0:	a2 14       	cp	r10, r2
    54b2:	b3 04       	cpc	r11, r3
    54b4:	c4 04       	cpc	r12, r4
    54b6:	d5 04       	cpc	r13, r5
    54b8:	48 f0       	brcs	.+18     	; 0x54cc <__moddi3+0x4b2>
    54ba:	a2 16       	cp	r10, r18
    54bc:	b3 06       	cpc	r11, r19
    54be:	c4 06       	cpc	r12, r20
    54c0:	d5 06       	cpc	r13, r21
    54c2:	20 f4       	brcc	.+8      	; 0x54cc <__moddi3+0x4b2>
    54c4:	a2 0c       	add	r10, r2
    54c6:	b3 1c       	adc	r11, r3
    54c8:	c4 1c       	adc	r12, r4
    54ca:	d5 1c       	adc	r13, r5
    54cc:	a2 1a       	sub	r10, r18
    54ce:	b3 0a       	sbc	r11, r19
    54d0:	c4 0a       	sbc	r12, r20
    54d2:	d5 0a       	sbc	r13, r21
    54d4:	c6 01       	movw	r24, r12
    54d6:	b5 01       	movw	r22, r10
    54d8:	a4 01       	movw	r20, r8
    54da:	93 01       	movw	r18, r6
    54dc:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    54e0:	7b 01       	movw	r14, r22
    54e2:	8c 01       	movw	r16, r24
    54e4:	c6 01       	movw	r24, r12
    54e6:	b5 01       	movw	r22, r10
    54e8:	a4 01       	movw	r20, r8
    54ea:	93 01       	movw	r18, r6
    54ec:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    54f0:	ca 01       	movw	r24, r20
    54f2:	b9 01       	movw	r22, r18
    54f4:	69 96       	adiw	r28, 0x19	; 25
    54f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    54f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    54fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    54fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    54fe:	69 97       	sbiw	r28, 0x19	; 25
    5500:	c8 c1       	rjmp	.+912    	; 0x5892 <__moddi3+0x878>
    5502:	21 14       	cp	r2, r1
    5504:	31 04       	cpc	r3, r1
    5506:	41 04       	cpc	r4, r1
    5508:	51 04       	cpc	r5, r1
    550a:	71 f4       	brne	.+28     	; 0x5528 <__moddi3+0x50e>
    550c:	61 e0       	ldi	r22, 0x01	; 1
    550e:	70 e0       	ldi	r23, 0x00	; 0
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	40 e0       	ldi	r20, 0x00	; 0
    551a:	50 e0       	ldi	r21, 0x00	; 0
    551c:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5520:	c9 01       	movw	r24, r18
    5522:	da 01       	movw	r26, r20
    5524:	1c 01       	movw	r2, r24
    5526:	2d 01       	movw	r4, r26
    5528:	00 e0       	ldi	r16, 0x00	; 0
    552a:	20 16       	cp	r2, r16
    552c:	00 e0       	ldi	r16, 0x00	; 0
    552e:	30 06       	cpc	r3, r16
    5530:	01 e0       	ldi	r16, 0x01	; 1
    5532:	40 06       	cpc	r4, r16
    5534:	00 e0       	ldi	r16, 0x00	; 0
    5536:	50 06       	cpc	r5, r16
    5538:	88 f4       	brcc	.+34     	; 0x555c <__moddi3+0x542>
    553a:	1f ef       	ldi	r17, 0xFF	; 255
    553c:	21 16       	cp	r2, r17
    553e:	31 04       	cpc	r3, r1
    5540:	41 04       	cpc	r4, r1
    5542:	51 04       	cpc	r5, r1
    5544:	39 f0       	breq	.+14     	; 0x5554 <__moddi3+0x53a>
    5546:	30 f0       	brcs	.+12     	; 0x5554 <__moddi3+0x53a>
    5548:	68 e0       	ldi	r22, 0x08	; 8
    554a:	e6 2e       	mov	r14, r22
    554c:	f1 2c       	mov	r15, r1
    554e:	01 2d       	mov	r16, r1
    5550:	11 2d       	mov	r17, r1
    5552:	18 c0       	rjmp	.+48     	; 0x5584 <__moddi3+0x56a>
    5554:	ee 24       	eor	r14, r14
    5556:	ff 24       	eor	r15, r15
    5558:	87 01       	movw	r16, r14
    555a:	14 c0       	rjmp	.+40     	; 0x5584 <__moddi3+0x56a>
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	22 16       	cp	r2, r18
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	32 06       	cpc	r3, r18
    5564:	20 e0       	ldi	r18, 0x00	; 0
    5566:	42 06       	cpc	r4, r18
    5568:	21 e0       	ldi	r18, 0x01	; 1
    556a:	52 06       	cpc	r5, r18
    556c:	30 f0       	brcs	.+12     	; 0x557a <__moddi3+0x560>
    556e:	58 e1       	ldi	r21, 0x18	; 24
    5570:	e5 2e       	mov	r14, r21
    5572:	f1 2c       	mov	r15, r1
    5574:	01 2d       	mov	r16, r1
    5576:	11 2d       	mov	r17, r1
    5578:	05 c0       	rjmp	.+10     	; 0x5584 <__moddi3+0x56a>
    557a:	40 e1       	ldi	r20, 0x10	; 16
    557c:	e4 2e       	mov	r14, r20
    557e:	f1 2c       	mov	r15, r1
    5580:	01 2d       	mov	r16, r1
    5582:	11 2d       	mov	r17, r1
    5584:	d2 01       	movw	r26, r4
    5586:	c1 01       	movw	r24, r2
    5588:	0e 2c       	mov	r0, r14
    558a:	04 c0       	rjmp	.+8      	; 0x5594 <__moddi3+0x57a>
    558c:	b6 95       	lsr	r27
    558e:	a7 95       	ror	r26
    5590:	97 95       	ror	r25
    5592:	87 95       	ror	r24
    5594:	0a 94       	dec	r0
    5596:	d2 f7       	brpl	.-12     	; 0x558c <__moddi3+0x572>
    5598:	87 53       	subi	r24, 0x37	; 55
    559a:	9c 4f       	sbci	r25, 0xFC	; 252
    559c:	dc 01       	movw	r26, r24
    559e:	2c 91       	ld	r18, X
    55a0:	30 e2       	ldi	r19, 0x20	; 32
    55a2:	a3 2e       	mov	r10, r19
    55a4:	b1 2c       	mov	r11, r1
    55a6:	c1 2c       	mov	r12, r1
    55a8:	d1 2c       	mov	r13, r1
    55aa:	d6 01       	movw	r26, r12
    55ac:	c5 01       	movw	r24, r10
    55ae:	8e 19       	sub	r24, r14
    55b0:	9f 09       	sbc	r25, r15
    55b2:	a0 0b       	sbc	r26, r16
    55b4:	b1 0b       	sbc	r27, r17
    55b6:	7c 01       	movw	r14, r24
    55b8:	8d 01       	movw	r16, r26
    55ba:	e2 1a       	sub	r14, r18
    55bc:	f1 08       	sbc	r15, r1
    55be:	01 09       	sbc	r16, r1
    55c0:	11 09       	sbc	r17, r1
    55c2:	65 96       	adiw	r28, 0x15	; 21
    55c4:	ec ae       	std	Y+60, r14	; 0x3c
    55c6:	fd ae       	std	Y+61, r15	; 0x3d
    55c8:	0e af       	std	Y+62, r16	; 0x3e
    55ca:	1f af       	std	Y+63, r17	; 0x3f
    55cc:	65 97       	sbiw	r28, 0x15	; 21
    55ce:	e1 14       	cp	r14, r1
    55d0:	f1 04       	cpc	r15, r1
    55d2:	01 05       	cpc	r16, r1
    55d4:	11 05       	cpc	r17, r1
    55d6:	39 f4       	brne	.+14     	; 0x55e6 <__moddi3+0x5cc>
    55d8:	64 01       	movw	r12, r8
    55da:	53 01       	movw	r10, r6
    55dc:	a2 18       	sub	r10, r2
    55de:	b3 08       	sbc	r11, r3
    55e0:	c4 08       	sbc	r12, r4
    55e2:	d5 08       	sbc	r13, r5
    55e4:	ec c0       	rjmp	.+472    	; 0x57be <__moddi3+0x7a4>
    55e6:	62 96       	adiw	r28, 0x12	; 18
    55e8:	ff ac       	ldd	r15, Y+63	; 0x3f
    55ea:	62 97       	sbiw	r28, 0x12	; 18
    55ec:	e4 96       	adiw	r28, 0x34	; 52
    55ee:	ff ae       	std	Y+63, r15	; 0x3f
    55f0:	e4 97       	sbiw	r28, 0x34	; 52
    55f2:	0f 2c       	mov	r0, r15
    55f4:	04 c0       	rjmp	.+8      	; 0x55fe <__moddi3+0x5e4>
    55f6:	22 0c       	add	r2, r2
    55f8:	33 1c       	adc	r3, r3
    55fa:	44 1c       	adc	r4, r4
    55fc:	55 1c       	adc	r5, r5
    55fe:	0a 94       	dec	r0
    5600:	d2 f7       	brpl	.-12     	; 0x55f6 <__moddi3+0x5dc>
    5602:	8a 2d       	mov	r24, r10
    5604:	8f 19       	sub	r24, r15
    5606:	64 01       	movw	r12, r8
    5608:	53 01       	movw	r10, r6
    560a:	08 2e       	mov	r0, r24
    560c:	04 c0       	rjmp	.+8      	; 0x5616 <__moddi3+0x5fc>
    560e:	d6 94       	lsr	r13
    5610:	c7 94       	ror	r12
    5612:	b7 94       	ror	r11
    5614:	a7 94       	ror	r10
    5616:	0a 94       	dec	r0
    5618:	d2 f7       	brpl	.-12     	; 0x560e <__moddi3+0x5f4>
    561a:	a4 01       	movw	r20, r8
    561c:	93 01       	movw	r18, r6
    561e:	04 c0       	rjmp	.+8      	; 0x5628 <__moddi3+0x60e>
    5620:	22 0f       	add	r18, r18
    5622:	33 1f       	adc	r19, r19
    5624:	44 1f       	adc	r20, r20
    5626:	55 1f       	adc	r21, r21
    5628:	fa 94       	dec	r15
    562a:	d2 f7       	brpl	.-12     	; 0x5620 <__moddi3+0x606>
    562c:	e8 96       	adiw	r28, 0x38	; 56
    562e:	6c ac       	ldd	r6, Y+60	; 0x3c
    5630:	7d ac       	ldd	r7, Y+61	; 0x3d
    5632:	8e ac       	ldd	r8, Y+62	; 0x3e
    5634:	9f ac       	ldd	r9, Y+63	; 0x3f
    5636:	e8 97       	sbiw	r28, 0x38	; 56
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <__moddi3+0x628>
    563a:	96 94       	lsr	r9
    563c:	87 94       	ror	r8
    563e:	77 94       	ror	r7
    5640:	67 94       	ror	r6
    5642:	8a 95       	dec	r24
    5644:	d2 f7       	brpl	.-12     	; 0x563a <__moddi3+0x620>
    5646:	84 01       	movw	r16, r8
    5648:	73 01       	movw	r14, r6
    564a:	e2 2a       	or	r14, r18
    564c:	f3 2a       	or	r15, r19
    564e:	04 2b       	or	r16, r20
    5650:	15 2b       	or	r17, r21
    5652:	29 96       	adiw	r28, 0x09	; 9
    5654:	ec ae       	std	Y+60, r14	; 0x3c
    5656:	fd ae       	std	Y+61, r15	; 0x3d
    5658:	0e af       	std	Y+62, r16	; 0x3e
    565a:	1f af       	std	Y+63, r17	; 0x3f
    565c:	29 97       	sbiw	r28, 0x09	; 9
    565e:	32 01       	movw	r6, r4
    5660:	88 24       	eor	r8, r8
    5662:	99 24       	eor	r9, r9
    5664:	92 01       	movw	r18, r4
    5666:	81 01       	movw	r16, r2
    5668:	20 70       	andi	r18, 0x00	; 0
    566a:	30 70       	andi	r19, 0x00	; 0
    566c:	6d 96       	adiw	r28, 0x1d	; 29
    566e:	0c af       	std	Y+60, r16	; 0x3c
    5670:	1d af       	std	Y+61, r17	; 0x3d
    5672:	2e af       	std	Y+62, r18	; 0x3e
    5674:	3f af       	std	Y+63, r19	; 0x3f
    5676:	6d 97       	sbiw	r28, 0x1d	; 29
    5678:	c6 01       	movw	r24, r12
    567a:	b5 01       	movw	r22, r10
    567c:	a4 01       	movw	r20, r8
    567e:	93 01       	movw	r18, r6
    5680:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5684:	7b 01       	movw	r14, r22
    5686:	8c 01       	movw	r16, r24
    5688:	c6 01       	movw	r24, r12
    568a:	b5 01       	movw	r22, r10
    568c:	a4 01       	movw	r20, r8
    568e:	93 01       	movw	r18, r6
    5690:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5694:	ca 01       	movw	r24, r20
    5696:	b9 01       	movw	r22, r18
    5698:	6d 96       	adiw	r28, 0x1d	; 29
    569a:	2c ad       	ldd	r18, Y+60	; 0x3c
    569c:	3d ad       	ldd	r19, Y+61	; 0x3d
    569e:	4e ad       	ldd	r20, Y+62	; 0x3e
    56a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    56a2:	6d 97       	sbiw	r28, 0x1d	; 29
    56a4:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    56a8:	9b 01       	movw	r18, r22
    56aa:	ac 01       	movw	r20, r24
    56ac:	87 01       	movw	r16, r14
    56ae:	ff 24       	eor	r15, r15
    56b0:	ee 24       	eor	r14, r14
    56b2:	29 96       	adiw	r28, 0x09	; 9
    56b4:	ac ac       	ldd	r10, Y+60	; 0x3c
    56b6:	bd ac       	ldd	r11, Y+61	; 0x3d
    56b8:	ce ac       	ldd	r12, Y+62	; 0x3e
    56ba:	df ac       	ldd	r13, Y+63	; 0x3f
    56bc:	29 97       	sbiw	r28, 0x09	; 9
    56be:	c6 01       	movw	r24, r12
    56c0:	aa 27       	eor	r26, r26
    56c2:	bb 27       	eor	r27, r27
    56c4:	5c 01       	movw	r10, r24
    56c6:	6d 01       	movw	r12, r26
    56c8:	ae 28       	or	r10, r14
    56ca:	bf 28       	or	r11, r15
    56cc:	c0 2a       	or	r12, r16
    56ce:	d1 2a       	or	r13, r17
    56d0:	a2 16       	cp	r10, r18
    56d2:	b3 06       	cpc	r11, r19
    56d4:	c4 06       	cpc	r12, r20
    56d6:	d5 06       	cpc	r13, r21
    56d8:	90 f4       	brcc	.+36     	; 0x56fe <__moddi3+0x6e4>
    56da:	a2 0c       	add	r10, r2
    56dc:	b3 1c       	adc	r11, r3
    56de:	c4 1c       	adc	r12, r4
    56e0:	d5 1c       	adc	r13, r5
    56e2:	a2 14       	cp	r10, r2
    56e4:	b3 04       	cpc	r11, r3
    56e6:	c4 04       	cpc	r12, r4
    56e8:	d5 04       	cpc	r13, r5
    56ea:	48 f0       	brcs	.+18     	; 0x56fe <__moddi3+0x6e4>
    56ec:	a2 16       	cp	r10, r18
    56ee:	b3 06       	cpc	r11, r19
    56f0:	c4 06       	cpc	r12, r20
    56f2:	d5 06       	cpc	r13, r21
    56f4:	20 f4       	brcc	.+8      	; 0x56fe <__moddi3+0x6e4>
    56f6:	a2 0c       	add	r10, r2
    56f8:	b3 1c       	adc	r11, r3
    56fa:	c4 1c       	adc	r12, r4
    56fc:	d5 1c       	adc	r13, r5
    56fe:	a2 1a       	sub	r10, r18
    5700:	b3 0a       	sbc	r11, r19
    5702:	c4 0a       	sbc	r12, r20
    5704:	d5 0a       	sbc	r13, r21
    5706:	c6 01       	movw	r24, r12
    5708:	b5 01       	movw	r22, r10
    570a:	a4 01       	movw	r20, r8
    570c:	93 01       	movw	r18, r6
    570e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5712:	7b 01       	movw	r14, r22
    5714:	8c 01       	movw	r16, r24
    5716:	c6 01       	movw	r24, r12
    5718:	b5 01       	movw	r22, r10
    571a:	a4 01       	movw	r20, r8
    571c:	93 01       	movw	r18, r6
    571e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5722:	ca 01       	movw	r24, r20
    5724:	b9 01       	movw	r22, r18
    5726:	6d 96       	adiw	r28, 0x1d	; 29
    5728:	2c ad       	ldd	r18, Y+60	; 0x3c
    572a:	3d ad       	ldd	r19, Y+61	; 0x3d
    572c:	4e ad       	ldd	r20, Y+62	; 0x3e
    572e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5730:	6d 97       	sbiw	r28, 0x1d	; 29
    5732:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5736:	9b 01       	movw	r18, r22
    5738:	ac 01       	movw	r20, r24
    573a:	87 01       	movw	r16, r14
    573c:	ff 24       	eor	r15, r15
    573e:	ee 24       	eor	r14, r14
    5740:	29 96       	adiw	r28, 0x09	; 9
    5742:	8c ad       	ldd	r24, Y+60	; 0x3c
    5744:	9d ad       	ldd	r25, Y+61	; 0x3d
    5746:	ae ad       	ldd	r26, Y+62	; 0x3e
    5748:	bf ad       	ldd	r27, Y+63	; 0x3f
    574a:	29 97       	sbiw	r28, 0x09	; 9
    574c:	a0 70       	andi	r26, 0x00	; 0
    574e:	b0 70       	andi	r27, 0x00	; 0
    5750:	57 01       	movw	r10, r14
    5752:	68 01       	movw	r12, r16
    5754:	a8 2a       	or	r10, r24
    5756:	b9 2a       	or	r11, r25
    5758:	ca 2a       	or	r12, r26
    575a:	db 2a       	or	r13, r27
    575c:	a2 16       	cp	r10, r18
    575e:	b3 06       	cpc	r11, r19
    5760:	c4 06       	cpc	r12, r20
    5762:	d5 06       	cpc	r13, r21
    5764:	90 f4       	brcc	.+36     	; 0x578a <__moddi3+0x770>
    5766:	a2 0c       	add	r10, r2
    5768:	b3 1c       	adc	r11, r3
    576a:	c4 1c       	adc	r12, r4
    576c:	d5 1c       	adc	r13, r5
    576e:	a2 14       	cp	r10, r2
    5770:	b3 04       	cpc	r11, r3
    5772:	c4 04       	cpc	r12, r4
    5774:	d5 04       	cpc	r13, r5
    5776:	48 f0       	brcs	.+18     	; 0x578a <__moddi3+0x770>
    5778:	a2 16       	cp	r10, r18
    577a:	b3 06       	cpc	r11, r19
    577c:	c4 06       	cpc	r12, r20
    577e:	d5 06       	cpc	r13, r21
    5780:	20 f4       	brcc	.+8      	; 0x578a <__moddi3+0x770>
    5782:	a2 0c       	add	r10, r2
    5784:	b3 1c       	adc	r11, r3
    5786:	c4 1c       	adc	r12, r4
    5788:	d5 1c       	adc	r13, r5
    578a:	e8 96       	adiw	r28, 0x38	; 56
    578c:	ec ac       	ldd	r14, Y+60	; 0x3c
    578e:	fd ac       	ldd	r15, Y+61	; 0x3d
    5790:	0e ad       	ldd	r16, Y+62	; 0x3e
    5792:	1f ad       	ldd	r17, Y+63	; 0x3f
    5794:	e8 97       	sbiw	r28, 0x38	; 56
    5796:	e4 96       	adiw	r28, 0x34	; 52
    5798:	0f ac       	ldd	r0, Y+63	; 0x3f
    579a:	e4 97       	sbiw	r28, 0x34	; 52
    579c:	04 c0       	rjmp	.+8      	; 0x57a6 <__moddi3+0x78c>
    579e:	ee 0c       	add	r14, r14
    57a0:	ff 1c       	adc	r15, r15
    57a2:	00 1f       	adc	r16, r16
    57a4:	11 1f       	adc	r17, r17
    57a6:	0a 94       	dec	r0
    57a8:	d2 f7       	brpl	.-12     	; 0x579e <__moddi3+0x784>
    57aa:	2d 96       	adiw	r28, 0x0d	; 13
    57ac:	ec ae       	std	Y+60, r14	; 0x3c
    57ae:	fd ae       	std	Y+61, r15	; 0x3d
    57b0:	0e af       	std	Y+62, r16	; 0x3e
    57b2:	1f af       	std	Y+63, r17	; 0x3f
    57b4:	2d 97       	sbiw	r28, 0x0d	; 13
    57b6:	a2 1a       	sub	r10, r18
    57b8:	b3 0a       	sbc	r11, r19
    57ba:	c4 0a       	sbc	r12, r20
    57bc:	d5 0a       	sbc	r13, r21
    57be:	32 01       	movw	r6, r4
    57c0:	88 24       	eor	r8, r8
    57c2:	99 24       	eor	r9, r9
    57c4:	92 01       	movw	r18, r4
    57c6:	81 01       	movw	r16, r2
    57c8:	20 70       	andi	r18, 0x00	; 0
    57ca:	30 70       	andi	r19, 0x00	; 0
    57cc:	a1 96       	adiw	r28, 0x21	; 33
    57ce:	0c af       	std	Y+60, r16	; 0x3c
    57d0:	1d af       	std	Y+61, r17	; 0x3d
    57d2:	2e af       	std	Y+62, r18	; 0x3e
    57d4:	3f af       	std	Y+63, r19	; 0x3f
    57d6:	a1 97       	sbiw	r28, 0x21	; 33
    57d8:	c6 01       	movw	r24, r12
    57da:	b5 01       	movw	r22, r10
    57dc:	a4 01       	movw	r20, r8
    57de:	93 01       	movw	r18, r6
    57e0:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    57e4:	7b 01       	movw	r14, r22
    57e6:	8c 01       	movw	r16, r24
    57e8:	c6 01       	movw	r24, r12
    57ea:	b5 01       	movw	r22, r10
    57ec:	a4 01       	movw	r20, r8
    57ee:	93 01       	movw	r18, r6
    57f0:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    57f4:	ca 01       	movw	r24, r20
    57f6:	b9 01       	movw	r22, r18
    57f8:	a1 96       	adiw	r28, 0x21	; 33
    57fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    57fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    57fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    5800:	5f ad       	ldd	r21, Y+63	; 0x3f
    5802:	a1 97       	sbiw	r28, 0x21	; 33
    5804:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5808:	9b 01       	movw	r18, r22
    580a:	ac 01       	movw	r20, r24
    580c:	87 01       	movw	r16, r14
    580e:	ff 24       	eor	r15, r15
    5810:	ee 24       	eor	r14, r14
    5812:	2d 96       	adiw	r28, 0x0d	; 13
    5814:	ac ac       	ldd	r10, Y+60	; 0x3c
    5816:	bd ac       	ldd	r11, Y+61	; 0x3d
    5818:	ce ac       	ldd	r12, Y+62	; 0x3e
    581a:	df ac       	ldd	r13, Y+63	; 0x3f
    581c:	2d 97       	sbiw	r28, 0x0d	; 13
    581e:	c6 01       	movw	r24, r12
    5820:	aa 27       	eor	r26, r26
    5822:	bb 27       	eor	r27, r27
    5824:	57 01       	movw	r10, r14
    5826:	68 01       	movw	r12, r16
    5828:	a8 2a       	or	r10, r24
    582a:	b9 2a       	or	r11, r25
    582c:	ca 2a       	or	r12, r26
    582e:	db 2a       	or	r13, r27
    5830:	a2 16       	cp	r10, r18
    5832:	b3 06       	cpc	r11, r19
    5834:	c4 06       	cpc	r12, r20
    5836:	d5 06       	cpc	r13, r21
    5838:	90 f4       	brcc	.+36     	; 0x585e <__moddi3+0x844>
    583a:	a2 0c       	add	r10, r2
    583c:	b3 1c       	adc	r11, r3
    583e:	c4 1c       	adc	r12, r4
    5840:	d5 1c       	adc	r13, r5
    5842:	a2 14       	cp	r10, r2
    5844:	b3 04       	cpc	r11, r3
    5846:	c4 04       	cpc	r12, r4
    5848:	d5 04       	cpc	r13, r5
    584a:	48 f0       	brcs	.+18     	; 0x585e <__moddi3+0x844>
    584c:	a2 16       	cp	r10, r18
    584e:	b3 06       	cpc	r11, r19
    5850:	c4 06       	cpc	r12, r20
    5852:	d5 06       	cpc	r13, r21
    5854:	20 f4       	brcc	.+8      	; 0x585e <__moddi3+0x844>
    5856:	a2 0c       	add	r10, r2
    5858:	b3 1c       	adc	r11, r3
    585a:	c4 1c       	adc	r12, r4
    585c:	d5 1c       	adc	r13, r5
    585e:	a2 1a       	sub	r10, r18
    5860:	b3 0a       	sbc	r11, r19
    5862:	c4 0a       	sbc	r12, r20
    5864:	d5 0a       	sbc	r13, r21
    5866:	c6 01       	movw	r24, r12
    5868:	b5 01       	movw	r22, r10
    586a:	a4 01       	movw	r20, r8
    586c:	93 01       	movw	r18, r6
    586e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5872:	7b 01       	movw	r14, r22
    5874:	8c 01       	movw	r16, r24
    5876:	c6 01       	movw	r24, r12
    5878:	b5 01       	movw	r22, r10
    587a:	a4 01       	movw	r20, r8
    587c:	93 01       	movw	r18, r6
    587e:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5882:	ca 01       	movw	r24, r20
    5884:	b9 01       	movw	r22, r18
    5886:	a1 96       	adiw	r28, 0x21	; 33
    5888:	2c ad       	ldd	r18, Y+60	; 0x3c
    588a:	3d ad       	ldd	r19, Y+61	; 0x3d
    588c:	4e ad       	ldd	r20, Y+62	; 0x3e
    588e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5890:	a1 97       	sbiw	r28, 0x21	; 33
    5892:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5896:	9b 01       	movw	r18, r22
    5898:	ac 01       	movw	r20, r24
    589a:	87 01       	movw	r16, r14
    589c:	ff 24       	eor	r15, r15
    589e:	ee 24       	eor	r14, r14
    58a0:	2d 96       	adiw	r28, 0x0d	; 13
    58a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    58a4:	9d ad       	ldd	r25, Y+61	; 0x3d
    58a6:	ae ad       	ldd	r26, Y+62	; 0x3e
    58a8:	bf ad       	ldd	r27, Y+63	; 0x3f
    58aa:	2d 97       	sbiw	r28, 0x0d	; 13
    58ac:	a0 70       	andi	r26, 0x00	; 0
    58ae:	b0 70       	andi	r27, 0x00	; 0
    58b0:	e8 2a       	or	r14, r24
    58b2:	f9 2a       	or	r15, r25
    58b4:	0a 2b       	or	r16, r26
    58b6:	1b 2b       	or	r17, r27
    58b8:	e2 16       	cp	r14, r18
    58ba:	f3 06       	cpc	r15, r19
    58bc:	04 07       	cpc	r16, r20
    58be:	15 07       	cpc	r17, r21
    58c0:	90 f4       	brcc	.+36     	; 0x58e6 <__moddi3+0x8cc>
    58c2:	e2 0c       	add	r14, r2
    58c4:	f3 1c       	adc	r15, r3
    58c6:	04 1d       	adc	r16, r4
    58c8:	15 1d       	adc	r17, r5
    58ca:	e2 14       	cp	r14, r2
    58cc:	f3 04       	cpc	r15, r3
    58ce:	04 05       	cpc	r16, r4
    58d0:	15 05       	cpc	r17, r5
    58d2:	48 f0       	brcs	.+18     	; 0x58e6 <__moddi3+0x8cc>
    58d4:	e2 16       	cp	r14, r18
    58d6:	f3 06       	cpc	r15, r19
    58d8:	04 07       	cpc	r16, r20
    58da:	15 07       	cpc	r17, r21
    58dc:	20 f4       	brcc	.+8      	; 0x58e6 <__moddi3+0x8cc>
    58de:	e2 0c       	add	r14, r2
    58e0:	f3 1c       	adc	r15, r3
    58e2:	04 1d       	adc	r16, r4
    58e4:	15 1d       	adc	r17, r5
    58e6:	e2 1a       	sub	r14, r18
    58e8:	f3 0a       	sbc	r15, r19
    58ea:	04 0b       	sbc	r16, r20
    58ec:	15 0b       	sbc	r17, r21
    58ee:	d8 01       	movw	r26, r16
    58f0:	c7 01       	movw	r24, r14
    58f2:	62 96       	adiw	r28, 0x12	; 18
    58f4:	0f ac       	ldd	r0, Y+63	; 0x3f
    58f6:	62 97       	sbiw	r28, 0x12	; 18
    58f8:	04 c0       	rjmp	.+8      	; 0x5902 <__moddi3+0x8e8>
    58fa:	b6 95       	lsr	r27
    58fc:	a7 95       	ror	r26
    58fe:	97 95       	ror	r25
    5900:	87 95       	ror	r24
    5902:	0a 94       	dec	r0
    5904:	d2 f7       	brpl	.-12     	; 0x58fa <__moddi3+0x8e0>
    5906:	89 a7       	std	Y+41, r24	; 0x29
    5908:	9a a7       	std	Y+42, r25	; 0x2a
    590a:	ab a7       	std	Y+43, r26	; 0x2b
    590c:	bc a7       	std	Y+44, r27	; 0x2c
    590e:	1d a6       	std	Y+45, r1	; 0x2d
    5910:	1e a6       	std	Y+46, r1	; 0x2e
    5912:	1f a6       	std	Y+47, r1	; 0x2f
    5914:	18 aa       	std	Y+48, r1	; 0x30
    5916:	89 8b       	std	Y+17, r24	; 0x11
    5918:	8a a5       	ldd	r24, Y+42	; 0x2a
    591a:	8a 8b       	std	Y+18, r24	; 0x12
    591c:	8b a5       	ldd	r24, Y+43	; 0x2b
    591e:	8b 8b       	std	Y+19, r24	; 0x13
    5920:	8c a5       	ldd	r24, Y+44	; 0x2c
    5922:	8c 8b       	std	Y+20, r24	; 0x14
    5924:	8d a5       	ldd	r24, Y+45	; 0x2d
    5926:	8d 8b       	std	Y+21, r24	; 0x15
    5928:	2f c3       	rjmp	.+1630   	; 0x5f88 <__moddi3+0xf6e>
    592a:	6a 14       	cp	r6, r10
    592c:	7b 04       	cpc	r7, r11
    592e:	8c 04       	cpc	r8, r12
    5930:	9d 04       	cpc	r9, r13
    5932:	48 f4       	brcc	.+18     	; 0x5946 <__moddi3+0x92c>
    5934:	49 8b       	std	Y+17, r20	; 0x11
    5936:	5a 8b       	std	Y+18, r21	; 0x12
    5938:	6b 8b       	std	Y+19, r22	; 0x13
    593a:	7c 8b       	std	Y+20, r23	; 0x14
    593c:	8d 8b       	std	Y+21, r24	; 0x15
    593e:	9e 8b       	std	Y+22, r25	; 0x16
    5940:	2f 8b       	std	Y+23, r18	; 0x17
    5942:	38 8f       	std	Y+24, r19	; 0x18
    5944:	27 c3       	rjmp	.+1614   	; 0x5f94 <__moddi3+0xf7a>
    5946:	00 e0       	ldi	r16, 0x00	; 0
    5948:	a0 16       	cp	r10, r16
    594a:	00 e0       	ldi	r16, 0x00	; 0
    594c:	b0 06       	cpc	r11, r16
    594e:	01 e0       	ldi	r16, 0x01	; 1
    5950:	c0 06       	cpc	r12, r16
    5952:	00 e0       	ldi	r16, 0x00	; 0
    5954:	d0 06       	cpc	r13, r16
    5956:	88 f4       	brcc	.+34     	; 0x597a <__moddi3+0x960>
    5958:	1f ef       	ldi	r17, 0xFF	; 255
    595a:	a1 16       	cp	r10, r17
    595c:	b1 04       	cpc	r11, r1
    595e:	c1 04       	cpc	r12, r1
    5960:	d1 04       	cpc	r13, r1
    5962:	39 f0       	breq	.+14     	; 0x5972 <__moddi3+0x958>
    5964:	30 f0       	brcs	.+12     	; 0x5972 <__moddi3+0x958>
    5966:	98 e0       	ldi	r25, 0x08	; 8
    5968:	e9 2e       	mov	r14, r25
    596a:	f1 2c       	mov	r15, r1
    596c:	01 2d       	mov	r16, r1
    596e:	11 2d       	mov	r17, r1
    5970:	18 c0       	rjmp	.+48     	; 0x59a2 <__moddi3+0x988>
    5972:	ee 24       	eor	r14, r14
    5974:	ff 24       	eor	r15, r15
    5976:	87 01       	movw	r16, r14
    5978:	14 c0       	rjmp	.+40     	; 0x59a2 <__moddi3+0x988>
    597a:	20 e0       	ldi	r18, 0x00	; 0
    597c:	a2 16       	cp	r10, r18
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	b2 06       	cpc	r11, r18
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	c2 06       	cpc	r12, r18
    5986:	21 e0       	ldi	r18, 0x01	; 1
    5988:	d2 06       	cpc	r13, r18
    598a:	30 f0       	brcs	.+12     	; 0x5998 <__moddi3+0x97e>
    598c:	88 e1       	ldi	r24, 0x18	; 24
    598e:	e8 2e       	mov	r14, r24
    5990:	f1 2c       	mov	r15, r1
    5992:	01 2d       	mov	r16, r1
    5994:	11 2d       	mov	r17, r1
    5996:	05 c0       	rjmp	.+10     	; 0x59a2 <__moddi3+0x988>
    5998:	00 e1       	ldi	r16, 0x10	; 16
    599a:	e0 2e       	mov	r14, r16
    599c:	f1 2c       	mov	r15, r1
    599e:	01 2d       	mov	r16, r1
    59a0:	11 2d       	mov	r17, r1
    59a2:	d6 01       	movw	r26, r12
    59a4:	c5 01       	movw	r24, r10
    59a6:	0e 2c       	mov	r0, r14
    59a8:	04 c0       	rjmp	.+8      	; 0x59b2 <__moddi3+0x998>
    59aa:	b6 95       	lsr	r27
    59ac:	a7 95       	ror	r26
    59ae:	97 95       	ror	r25
    59b0:	87 95       	ror	r24
    59b2:	0a 94       	dec	r0
    59b4:	d2 f7       	brpl	.-12     	; 0x59aa <__moddi3+0x990>
    59b6:	87 53       	subi	r24, 0x37	; 55
    59b8:	9c 4f       	sbci	r25, 0xFC	; 252
    59ba:	dc 01       	movw	r26, r24
    59bc:	2c 91       	ld	r18, X
    59be:	80 e2       	ldi	r24, 0x20	; 32
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	a0 e0       	ldi	r26, 0x00	; 0
    59c4:	b0 e0       	ldi	r27, 0x00	; 0
    59c6:	8e 19       	sub	r24, r14
    59c8:	9f 09       	sbc	r25, r15
    59ca:	a0 0b       	sbc	r26, r16
    59cc:	b1 0b       	sbc	r27, r17
    59ce:	82 1b       	sub	r24, r18
    59d0:	91 09       	sbc	r25, r1
    59d2:	a1 09       	sbc	r26, r1
    59d4:	b1 09       	sbc	r27, r1
    59d6:	00 97       	sbiw	r24, 0x00	; 0
    59d8:	a1 05       	cpc	r26, r1
    59da:	b1 05       	cpc	r27, r1
    59dc:	09 f0       	breq	.+2      	; 0x59e0 <__moddi3+0x9c6>
    59de:	59 c0       	rjmp	.+178    	; 0x5a92 <__moddi3+0xa78>
    59e0:	a6 14       	cp	r10, r6
    59e2:	b7 04       	cpc	r11, r7
    59e4:	c8 04       	cpc	r12, r8
    59e6:	d9 04       	cpc	r13, r9
    59e8:	70 f0       	brcs	.+28     	; 0x5a06 <__moddi3+0x9ec>
    59ea:	e8 96       	adiw	r28, 0x38	; 56
    59ec:	ec ac       	ldd	r14, Y+60	; 0x3c
    59ee:	fd ac       	ldd	r15, Y+61	; 0x3d
    59f0:	0e ad       	ldd	r16, Y+62	; 0x3e
    59f2:	1f ad       	ldd	r17, Y+63	; 0x3f
    59f4:	e8 97       	sbiw	r28, 0x38	; 56
    59f6:	e2 14       	cp	r14, r2
    59f8:	f3 04       	cpc	r15, r3
    59fa:	04 05       	cpc	r16, r4
    59fc:	15 05       	cpc	r17, r5
    59fe:	18 f4       	brcc	.+6      	; 0x5a06 <__moddi3+0x9ec>
    5a00:	d8 01       	movw	r26, r16
    5a02:	c7 01       	movw	r24, r14
    5a04:	2f c0       	rjmp	.+94     	; 0x5a64 <__moddi3+0xa4a>
    5a06:	e8 96       	adiw	r28, 0x38	; 56
    5a08:	8c ad       	ldd	r24, Y+60	; 0x3c
    5a0a:	9d ad       	ldd	r25, Y+61	; 0x3d
    5a0c:	ae ad       	ldd	r26, Y+62	; 0x3e
    5a0e:	bf ad       	ldd	r27, Y+63	; 0x3f
    5a10:	e8 97       	sbiw	r28, 0x38	; 56
    5a12:	82 19       	sub	r24, r2
    5a14:	93 09       	sbc	r25, r3
    5a16:	a4 09       	sbc	r26, r4
    5a18:	b5 09       	sbc	r27, r5
    5a1a:	a4 01       	movw	r20, r8
    5a1c:	93 01       	movw	r18, r6
    5a1e:	2a 19       	sub	r18, r10
    5a20:	3b 09       	sbc	r19, r11
    5a22:	4c 09       	sbc	r20, r12
    5a24:	5d 09       	sbc	r21, r13
    5a26:	aa 24       	eor	r10, r10
    5a28:	bb 24       	eor	r11, r11
    5a2a:	65 01       	movw	r12, r10
    5a2c:	e8 96       	adiw	r28, 0x38	; 56
    5a2e:	6c ac       	ldd	r6, Y+60	; 0x3c
    5a30:	7d ac       	ldd	r7, Y+61	; 0x3d
    5a32:	8e ac       	ldd	r8, Y+62	; 0x3e
    5a34:	9f ac       	ldd	r9, Y+63	; 0x3f
    5a36:	e8 97       	sbiw	r28, 0x38	; 56
    5a38:	68 16       	cp	r6, r24
    5a3a:	79 06       	cpc	r7, r25
    5a3c:	8a 06       	cpc	r8, r26
    5a3e:	9b 06       	cpc	r9, r27
    5a40:	28 f4       	brcc	.+10     	; 0x5a4c <__moddi3+0xa32>
    5a42:	11 e0       	ldi	r17, 0x01	; 1
    5a44:	a1 2e       	mov	r10, r17
    5a46:	b1 2c       	mov	r11, r1
    5a48:	c1 2c       	mov	r12, r1
    5a4a:	d1 2c       	mov	r13, r1
    5a4c:	79 01       	movw	r14, r18
    5a4e:	8a 01       	movw	r16, r20
    5a50:	ea 18       	sub	r14, r10
    5a52:	fb 08       	sbc	r15, r11
    5a54:	0c 09       	sbc	r16, r12
    5a56:	1d 09       	sbc	r17, r13
    5a58:	61 96       	adiw	r28, 0x11	; 17
    5a5a:	ec ae       	std	Y+60, r14	; 0x3c
    5a5c:	fd ae       	std	Y+61, r15	; 0x3d
    5a5e:	0e af       	std	Y+62, r16	; 0x3e
    5a60:	1f af       	std	Y+63, r17	; 0x3f
    5a62:	61 97       	sbiw	r28, 0x11	; 17
    5a64:	89 a7       	std	Y+41, r24	; 0x29
    5a66:	9a a7       	std	Y+42, r25	; 0x2a
    5a68:	ab a7       	std	Y+43, r26	; 0x2b
    5a6a:	bc a7       	std	Y+44, r27	; 0x2c
    5a6c:	61 96       	adiw	r28, 0x11	; 17
    5a6e:	0c ad       	ldd	r16, Y+60	; 0x3c
    5a70:	1d ad       	ldd	r17, Y+61	; 0x3d
    5a72:	2e ad       	ldd	r18, Y+62	; 0x3e
    5a74:	3f ad       	ldd	r19, Y+63	; 0x3f
    5a76:	61 97       	sbiw	r28, 0x11	; 17
    5a78:	0d a7       	std	Y+45, r16	; 0x2d
    5a7a:	1e a7       	std	Y+46, r17	; 0x2e
    5a7c:	2f a7       	std	Y+47, r18	; 0x2f
    5a7e:	38 ab       	std	Y+48, r19	; 0x30
    5a80:	89 8b       	std	Y+17, r24	; 0x11
    5a82:	8a a5       	ldd	r24, Y+42	; 0x2a
    5a84:	8a 8b       	std	Y+18, r24	; 0x12
    5a86:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a88:	8b 8b       	std	Y+19, r24	; 0x13
    5a8a:	8c a5       	ldd	r24, Y+44	; 0x2c
    5a8c:	8c 8b       	std	Y+20, r24	; 0x14
    5a8e:	0d 8b       	std	Y+21, r16	; 0x15
    5a90:	7b c2       	rjmp	.+1270   	; 0x5f88 <__moddi3+0xf6e>
    5a92:	e3 96       	adiw	r28, 0x33	; 51
    5a94:	8f af       	std	Y+63, r24	; 0x3f
    5a96:	e3 97       	sbiw	r28, 0x33	; 51
    5a98:	a6 01       	movw	r20, r12
    5a9a:	95 01       	movw	r18, r10
    5a9c:	08 2e       	mov	r0, r24
    5a9e:	04 c0       	rjmp	.+8      	; 0x5aa8 <__moddi3+0xa8e>
    5aa0:	22 0f       	add	r18, r18
    5aa2:	33 1f       	adc	r19, r19
    5aa4:	44 1f       	adc	r20, r20
    5aa6:	55 1f       	adc	r21, r21
    5aa8:	0a 94       	dec	r0
    5aaa:	d2 f7       	brpl	.-12     	; 0x5aa0 <__moddi3+0xa86>
    5aac:	10 e2       	ldi	r17, 0x20	; 32
    5aae:	18 1b       	sub	r17, r24
    5ab0:	e2 96       	adiw	r28, 0x32	; 50
    5ab2:	1f af       	std	Y+63, r17	; 0x3f
    5ab4:	e2 97       	sbiw	r28, 0x32	; 50
    5ab6:	d2 01       	movw	r26, r4
    5ab8:	c1 01       	movw	r24, r2
    5aba:	01 2e       	mov	r0, r17
    5abc:	04 c0       	rjmp	.+8      	; 0x5ac6 <__moddi3+0xaac>
    5abe:	b6 95       	lsr	r27
    5ac0:	a7 95       	ror	r26
    5ac2:	97 95       	ror	r25
    5ac4:	87 95       	ror	r24
    5ac6:	0a 94       	dec	r0
    5ac8:	d2 f7       	brpl	.-12     	; 0x5abe <__moddi3+0xaa4>
    5aca:	5c 01       	movw	r10, r24
    5acc:	6d 01       	movw	r12, r26
    5ace:	a2 2a       	or	r10, r18
    5ad0:	b3 2a       	or	r11, r19
    5ad2:	c4 2a       	or	r12, r20
    5ad4:	d5 2a       	or	r13, r21
    5ad6:	25 96       	adiw	r28, 0x05	; 5
    5ad8:	ac ae       	std	Y+60, r10	; 0x3c
    5ada:	bd ae       	std	Y+61, r11	; 0x3d
    5adc:	ce ae       	std	Y+62, r12	; 0x3e
    5ade:	df ae       	std	Y+63, r13	; 0x3f
    5ae0:	25 97       	sbiw	r28, 0x05	; 5
    5ae2:	72 01       	movw	r14, r4
    5ae4:	61 01       	movw	r12, r2
    5ae6:	e3 96       	adiw	r28, 0x33	; 51
    5ae8:	0f ac       	ldd	r0, Y+63	; 0x3f
    5aea:	e3 97       	sbiw	r28, 0x33	; 51
    5aec:	04 c0       	rjmp	.+8      	; 0x5af6 <__moddi3+0xadc>
    5aee:	cc 0c       	add	r12, r12
    5af0:	dd 1c       	adc	r13, r13
    5af2:	ee 1c       	adc	r14, r14
    5af4:	ff 1c       	adc	r15, r15
    5af6:	0a 94       	dec	r0
    5af8:	d2 f7       	brpl	.-12     	; 0x5aee <__moddi3+0xad4>
    5afa:	21 96       	adiw	r28, 0x01	; 1
    5afc:	cc ae       	std	Y+60, r12	; 0x3c
    5afe:	dd ae       	std	Y+61, r13	; 0x3d
    5b00:	ee ae       	std	Y+62, r14	; 0x3e
    5b02:	ff ae       	std	Y+63, r15	; 0x3f
    5b04:	21 97       	sbiw	r28, 0x01	; 1
    5b06:	64 01       	movw	r12, r8
    5b08:	53 01       	movw	r10, r6
    5b0a:	01 2e       	mov	r0, r17
    5b0c:	04 c0       	rjmp	.+8      	; 0x5b16 <__moddi3+0xafc>
    5b0e:	d6 94       	lsr	r13
    5b10:	c7 94       	ror	r12
    5b12:	b7 94       	ror	r11
    5b14:	a7 94       	ror	r10
    5b16:	0a 94       	dec	r0
    5b18:	d2 f7       	brpl	.-12     	; 0x5b0e <__moddi3+0xaf4>
    5b1a:	a4 01       	movw	r20, r8
    5b1c:	93 01       	movw	r18, r6
    5b1e:	e3 96       	adiw	r28, 0x33	; 51
    5b20:	0f ac       	ldd	r0, Y+63	; 0x3f
    5b22:	e3 97       	sbiw	r28, 0x33	; 51
    5b24:	04 c0       	rjmp	.+8      	; 0x5b2e <__moddi3+0xb14>
    5b26:	22 0f       	add	r18, r18
    5b28:	33 1f       	adc	r19, r19
    5b2a:	44 1f       	adc	r20, r20
    5b2c:	55 1f       	adc	r21, r21
    5b2e:	0a 94       	dec	r0
    5b30:	d2 f7       	brpl	.-12     	; 0x5b26 <__moddi3+0xb0c>
    5b32:	e8 96       	adiw	r28, 0x38	; 56
    5b34:	8c ad       	ldd	r24, Y+60	; 0x3c
    5b36:	9d ad       	ldd	r25, Y+61	; 0x3d
    5b38:	ae ad       	ldd	r26, Y+62	; 0x3e
    5b3a:	bf ad       	ldd	r27, Y+63	; 0x3f
    5b3c:	e8 97       	sbiw	r28, 0x38	; 56
    5b3e:	04 c0       	rjmp	.+8      	; 0x5b48 <__moddi3+0xb2e>
    5b40:	b6 95       	lsr	r27
    5b42:	a7 95       	ror	r26
    5b44:	97 95       	ror	r25
    5b46:	87 95       	ror	r24
    5b48:	1a 95       	dec	r17
    5b4a:	d2 f7       	brpl	.-12     	; 0x5b40 <__moddi3+0xb26>
    5b4c:	7c 01       	movw	r14, r24
    5b4e:	8d 01       	movw	r16, r26
    5b50:	e2 2a       	or	r14, r18
    5b52:	f3 2a       	or	r15, r19
    5b54:	04 2b       	or	r16, r20
    5b56:	15 2b       	or	r17, r21
    5b58:	e9 ae       	std	Y+57, r14	; 0x39
    5b5a:	fa ae       	std	Y+58, r15	; 0x3a
    5b5c:	0b af       	std	Y+59, r16	; 0x3b
    5b5e:	1c af       	std	Y+60, r17	; 0x3c
    5b60:	e8 96       	adiw	r28, 0x38	; 56
    5b62:	0c ad       	ldd	r16, Y+60	; 0x3c
    5b64:	1d ad       	ldd	r17, Y+61	; 0x3d
    5b66:	2e ad       	ldd	r18, Y+62	; 0x3e
    5b68:	3f ad       	ldd	r19, Y+63	; 0x3f
    5b6a:	e8 97       	sbiw	r28, 0x38	; 56
    5b6c:	e3 96       	adiw	r28, 0x33	; 51
    5b6e:	0f ac       	ldd	r0, Y+63	; 0x3f
    5b70:	e3 97       	sbiw	r28, 0x33	; 51
    5b72:	04 c0       	rjmp	.+8      	; 0x5b7c <__moddi3+0xb62>
    5b74:	00 0f       	add	r16, r16
    5b76:	11 1f       	adc	r17, r17
    5b78:	22 1f       	adc	r18, r18
    5b7a:	33 1f       	adc	r19, r19
    5b7c:	0a 94       	dec	r0
    5b7e:	d2 f7       	brpl	.-12     	; 0x5b74 <__moddi3+0xb5a>
    5b80:	0d ab       	std	Y+53, r16	; 0x35
    5b82:	1e ab       	std	Y+54, r17	; 0x36
    5b84:	2f ab       	std	Y+55, r18	; 0x37
    5b86:	38 af       	std	Y+56, r19	; 0x38
    5b88:	25 96       	adiw	r28, 0x05	; 5
    5b8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    5b8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    5b8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    5b90:	5f ad       	ldd	r21, Y+63	; 0x3f
    5b92:	25 97       	sbiw	r28, 0x05	; 5
    5b94:	3a 01       	movw	r6, r20
    5b96:	88 24       	eor	r8, r8
    5b98:	99 24       	eor	r9, r9
    5b9a:	40 70       	andi	r20, 0x00	; 0
    5b9c:	50 70       	andi	r21, 0x00	; 0
    5b9e:	a5 96       	adiw	r28, 0x25	; 37
    5ba0:	2c af       	std	Y+60, r18	; 0x3c
    5ba2:	3d af       	std	Y+61, r19	; 0x3d
    5ba4:	4e af       	std	Y+62, r20	; 0x3e
    5ba6:	5f af       	std	Y+63, r21	; 0x3f
    5ba8:	a5 97       	sbiw	r28, 0x25	; 37
    5baa:	c6 01       	movw	r24, r12
    5bac:	b5 01       	movw	r22, r10
    5bae:	a4 01       	movw	r20, r8
    5bb0:	93 01       	movw	r18, r6
    5bb2:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5bb6:	7b 01       	movw	r14, r22
    5bb8:	8c 01       	movw	r16, r24
    5bba:	c6 01       	movw	r24, r12
    5bbc:	b5 01       	movw	r22, r10
    5bbe:	a4 01       	movw	r20, r8
    5bc0:	93 01       	movw	r18, r6
    5bc2:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5bc6:	c9 01       	movw	r24, r18
    5bc8:	da 01       	movw	r26, r20
    5bca:	1c 01       	movw	r2, r24
    5bcc:	2d 01       	movw	r4, r26
    5bce:	c2 01       	movw	r24, r4
    5bd0:	b1 01       	movw	r22, r2
    5bd2:	a5 96       	adiw	r28, 0x25	; 37
    5bd4:	2c ad       	ldd	r18, Y+60	; 0x3c
    5bd6:	3d ad       	ldd	r19, Y+61	; 0x3d
    5bd8:	4e ad       	ldd	r20, Y+62	; 0x3e
    5bda:	5f ad       	ldd	r21, Y+63	; 0x3f
    5bdc:	a5 97       	sbiw	r28, 0x25	; 37
    5bde:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5be2:	9b 01       	movw	r18, r22
    5be4:	ac 01       	movw	r20, r24
    5be6:	87 01       	movw	r16, r14
    5be8:	ff 24       	eor	r15, r15
    5bea:	ee 24       	eor	r14, r14
    5bec:	a9 ac       	ldd	r10, Y+57	; 0x39
    5bee:	ba ac       	ldd	r11, Y+58	; 0x3a
    5bf0:	cb ac       	ldd	r12, Y+59	; 0x3b
    5bf2:	dc ac       	ldd	r13, Y+60	; 0x3c
    5bf4:	c6 01       	movw	r24, r12
    5bf6:	aa 27       	eor	r26, r26
    5bf8:	bb 27       	eor	r27, r27
    5bfa:	57 01       	movw	r10, r14
    5bfc:	68 01       	movw	r12, r16
    5bfe:	a8 2a       	or	r10, r24
    5c00:	b9 2a       	or	r11, r25
    5c02:	ca 2a       	or	r12, r26
    5c04:	db 2a       	or	r13, r27
    5c06:	a2 16       	cp	r10, r18
    5c08:	b3 06       	cpc	r11, r19
    5c0a:	c4 06       	cpc	r12, r20
    5c0c:	d5 06       	cpc	r13, r21
    5c0e:	10 f5       	brcc	.+68     	; 0x5c54 <__moddi3+0xc3a>
    5c10:	08 94       	sec
    5c12:	21 08       	sbc	r2, r1
    5c14:	31 08       	sbc	r3, r1
    5c16:	41 08       	sbc	r4, r1
    5c18:	51 08       	sbc	r5, r1
    5c1a:	25 96       	adiw	r28, 0x05	; 5
    5c1c:	ec ac       	ldd	r14, Y+60	; 0x3c
    5c1e:	fd ac       	ldd	r15, Y+61	; 0x3d
    5c20:	0e ad       	ldd	r16, Y+62	; 0x3e
    5c22:	1f ad       	ldd	r17, Y+63	; 0x3f
    5c24:	25 97       	sbiw	r28, 0x05	; 5
    5c26:	ae 0c       	add	r10, r14
    5c28:	bf 1c       	adc	r11, r15
    5c2a:	c0 1e       	adc	r12, r16
    5c2c:	d1 1e       	adc	r13, r17
    5c2e:	ae 14       	cp	r10, r14
    5c30:	bf 04       	cpc	r11, r15
    5c32:	c0 06       	cpc	r12, r16
    5c34:	d1 06       	cpc	r13, r17
    5c36:	70 f0       	brcs	.+28     	; 0x5c54 <__moddi3+0xc3a>
    5c38:	a2 16       	cp	r10, r18
    5c3a:	b3 06       	cpc	r11, r19
    5c3c:	c4 06       	cpc	r12, r20
    5c3e:	d5 06       	cpc	r13, r21
    5c40:	48 f4       	brcc	.+18     	; 0x5c54 <__moddi3+0xc3a>
    5c42:	08 94       	sec
    5c44:	21 08       	sbc	r2, r1
    5c46:	31 08       	sbc	r3, r1
    5c48:	41 08       	sbc	r4, r1
    5c4a:	51 08       	sbc	r5, r1
    5c4c:	ae 0c       	add	r10, r14
    5c4e:	bf 1c       	adc	r11, r15
    5c50:	c0 1e       	adc	r12, r16
    5c52:	d1 1e       	adc	r13, r17
    5c54:	a2 1a       	sub	r10, r18
    5c56:	b3 0a       	sbc	r11, r19
    5c58:	c4 0a       	sbc	r12, r20
    5c5a:	d5 0a       	sbc	r13, r21
    5c5c:	c6 01       	movw	r24, r12
    5c5e:	b5 01       	movw	r22, r10
    5c60:	a4 01       	movw	r20, r8
    5c62:	93 01       	movw	r18, r6
    5c64:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5c68:	7b 01       	movw	r14, r22
    5c6a:	8c 01       	movw	r16, r24
    5c6c:	c6 01       	movw	r24, r12
    5c6e:	b5 01       	movw	r22, r10
    5c70:	a4 01       	movw	r20, r8
    5c72:	93 01       	movw	r18, r6
    5c74:	0e 94 0e 39 	call	0x721c	; 0x721c <__udivmodsi4>
    5c78:	c9 01       	movw	r24, r18
    5c7a:	da 01       	movw	r26, r20
    5c7c:	3c 01       	movw	r6, r24
    5c7e:	4d 01       	movw	r8, r26
    5c80:	c4 01       	movw	r24, r8
    5c82:	b3 01       	movw	r22, r6
    5c84:	a5 96       	adiw	r28, 0x25	; 37
    5c86:	2c ad       	ldd	r18, Y+60	; 0x3c
    5c88:	3d ad       	ldd	r19, Y+61	; 0x3d
    5c8a:	4e ad       	ldd	r20, Y+62	; 0x3e
    5c8c:	5f ad       	ldd	r21, Y+63	; 0x3f
    5c8e:	a5 97       	sbiw	r28, 0x25	; 37
    5c90:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5c94:	9b 01       	movw	r18, r22
    5c96:	ac 01       	movw	r20, r24
    5c98:	87 01       	movw	r16, r14
    5c9a:	ff 24       	eor	r15, r15
    5c9c:	ee 24       	eor	r14, r14
    5c9e:	89 ad       	ldd	r24, Y+57	; 0x39
    5ca0:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ca2:	ab ad       	ldd	r26, Y+59	; 0x3b
    5ca4:	bc ad       	ldd	r27, Y+60	; 0x3c
    5ca6:	a0 70       	andi	r26, 0x00	; 0
    5ca8:	b0 70       	andi	r27, 0x00	; 0
    5caa:	57 01       	movw	r10, r14
    5cac:	68 01       	movw	r12, r16
    5cae:	a8 2a       	or	r10, r24
    5cb0:	b9 2a       	or	r11, r25
    5cb2:	ca 2a       	or	r12, r26
    5cb4:	db 2a       	or	r13, r27
    5cb6:	a2 16       	cp	r10, r18
    5cb8:	b3 06       	cpc	r11, r19
    5cba:	c4 06       	cpc	r12, r20
    5cbc:	d5 06       	cpc	r13, r21
    5cbe:	10 f5       	brcc	.+68     	; 0x5d04 <__moddi3+0xcea>
    5cc0:	08 94       	sec
    5cc2:	61 08       	sbc	r6, r1
    5cc4:	71 08       	sbc	r7, r1
    5cc6:	81 08       	sbc	r8, r1
    5cc8:	91 08       	sbc	r9, r1
    5cca:	25 96       	adiw	r28, 0x05	; 5
    5ccc:	6c ad       	ldd	r22, Y+60	; 0x3c
    5cce:	7d ad       	ldd	r23, Y+61	; 0x3d
    5cd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    5cd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cd4:	25 97       	sbiw	r28, 0x05	; 5
    5cd6:	a6 0e       	add	r10, r22
    5cd8:	b7 1e       	adc	r11, r23
    5cda:	c8 1e       	adc	r12, r24
    5cdc:	d9 1e       	adc	r13, r25
    5cde:	a6 16       	cp	r10, r22
    5ce0:	b7 06       	cpc	r11, r23
    5ce2:	c8 06       	cpc	r12, r24
    5ce4:	d9 06       	cpc	r13, r25
    5ce6:	70 f0       	brcs	.+28     	; 0x5d04 <__moddi3+0xcea>
    5ce8:	a2 16       	cp	r10, r18
    5cea:	b3 06       	cpc	r11, r19
    5cec:	c4 06       	cpc	r12, r20
    5cee:	d5 06       	cpc	r13, r21
    5cf0:	48 f4       	brcc	.+18     	; 0x5d04 <__moddi3+0xcea>
    5cf2:	08 94       	sec
    5cf4:	61 08       	sbc	r6, r1
    5cf6:	71 08       	sbc	r7, r1
    5cf8:	81 08       	sbc	r8, r1
    5cfa:	91 08       	sbc	r9, r1
    5cfc:	a6 0e       	add	r10, r22
    5cfe:	b7 1e       	adc	r11, r23
    5d00:	c8 1e       	adc	r12, r24
    5d02:	d9 1e       	adc	r13, r25
    5d04:	d6 01       	movw	r26, r12
    5d06:	c5 01       	movw	r24, r10
    5d08:	82 1b       	sub	r24, r18
    5d0a:	93 0b       	sbc	r25, r19
    5d0c:	a4 0b       	sbc	r26, r20
    5d0e:	b5 0b       	sbc	r27, r21
    5d10:	89 ab       	std	Y+49, r24	; 0x31
    5d12:	9a ab       	std	Y+50, r25	; 0x32
    5d14:	ab ab       	std	Y+51, r26	; 0x33
    5d16:	bc ab       	std	Y+52, r27	; 0x34
    5d18:	d1 01       	movw	r26, r2
    5d1a:	99 27       	eor	r25, r25
    5d1c:	88 27       	eor	r24, r24
    5d1e:	84 01       	movw	r16, r8
    5d20:	73 01       	movw	r14, r6
    5d22:	e8 2a       	or	r14, r24
    5d24:	f9 2a       	or	r15, r25
    5d26:	0a 2b       	or	r16, r26
    5d28:	1b 2b       	or	r17, r27
    5d2a:	8f ef       	ldi	r24, 0xFF	; 255
    5d2c:	a8 2e       	mov	r10, r24
    5d2e:	8f ef       	ldi	r24, 0xFF	; 255
    5d30:	b8 2e       	mov	r11, r24
    5d32:	c1 2c       	mov	r12, r1
    5d34:	d1 2c       	mov	r13, r1
    5d36:	ae 20       	and	r10, r14
    5d38:	bf 20       	and	r11, r15
    5d3a:	c0 22       	and	r12, r16
    5d3c:	d1 22       	and	r13, r17
    5d3e:	78 01       	movw	r14, r16
    5d40:	00 27       	eor	r16, r16
    5d42:	11 27       	eor	r17, r17
    5d44:	21 96       	adiw	r28, 0x01	; 1
    5d46:	6c ac       	ldd	r6, Y+60	; 0x3c
    5d48:	7d ac       	ldd	r7, Y+61	; 0x3d
    5d4a:	8e ac       	ldd	r8, Y+62	; 0x3e
    5d4c:	9f ac       	ldd	r9, Y+63	; 0x3f
    5d4e:	21 97       	sbiw	r28, 0x01	; 1
    5d50:	2f ef       	ldi	r18, 0xFF	; 255
    5d52:	3f ef       	ldi	r19, 0xFF	; 255
    5d54:	40 e0       	ldi	r20, 0x00	; 0
    5d56:	50 e0       	ldi	r21, 0x00	; 0
    5d58:	62 22       	and	r6, r18
    5d5a:	73 22       	and	r7, r19
    5d5c:	84 22       	and	r8, r20
    5d5e:	95 22       	and	r9, r21
    5d60:	21 96       	adiw	r28, 0x01	; 1
    5d62:	6c ad       	ldd	r22, Y+60	; 0x3c
    5d64:	7d ad       	ldd	r23, Y+61	; 0x3d
    5d66:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d68:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d6a:	21 97       	sbiw	r28, 0x01	; 1
    5d6c:	ac 01       	movw	r20, r24
    5d6e:	66 27       	eor	r22, r22
    5d70:	77 27       	eor	r23, r23
    5d72:	ad 96       	adiw	r28, 0x2d	; 45
    5d74:	4c af       	std	Y+60, r20	; 0x3c
    5d76:	5d af       	std	Y+61, r21	; 0x3d
    5d78:	6e af       	std	Y+62, r22	; 0x3e
    5d7a:	7f af       	std	Y+63, r23	; 0x3f
    5d7c:	ad 97       	sbiw	r28, 0x2d	; 45
    5d7e:	c6 01       	movw	r24, r12
    5d80:	b5 01       	movw	r22, r10
    5d82:	a4 01       	movw	r20, r8
    5d84:	93 01       	movw	r18, r6
    5d86:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5d8a:	a9 96       	adiw	r28, 0x29	; 41
    5d8c:	6c af       	std	Y+60, r22	; 0x3c
    5d8e:	7d af       	std	Y+61, r23	; 0x3d
    5d90:	8e af       	std	Y+62, r24	; 0x3e
    5d92:	9f af       	std	Y+63, r25	; 0x3f
    5d94:	a9 97       	sbiw	r28, 0x29	; 41
    5d96:	c6 01       	movw	r24, r12
    5d98:	b5 01       	movw	r22, r10
    5d9a:	ad 96       	adiw	r28, 0x2d	; 45
    5d9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    5d9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    5da0:	4e ad       	ldd	r20, Y+62	; 0x3e
    5da2:	5f ad       	ldd	r21, Y+63	; 0x3f
    5da4:	ad 97       	sbiw	r28, 0x2d	; 45
    5da6:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5daa:	1b 01       	movw	r2, r22
    5dac:	2c 01       	movw	r4, r24
    5dae:	c8 01       	movw	r24, r16
    5db0:	b7 01       	movw	r22, r14
    5db2:	a4 01       	movw	r20, r8
    5db4:	93 01       	movw	r18, r6
    5db6:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5dba:	5b 01       	movw	r10, r22
    5dbc:	6c 01       	movw	r12, r24
    5dbe:	c8 01       	movw	r24, r16
    5dc0:	b7 01       	movw	r22, r14
    5dc2:	ad 96       	adiw	r28, 0x2d	; 45
    5dc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    5dc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    5dc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    5dca:	5f ad       	ldd	r21, Y+63	; 0x3f
    5dcc:	ad 97       	sbiw	r28, 0x2d	; 45
    5dce:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsi3>
    5dd2:	7b 01       	movw	r14, r22
    5dd4:	8c 01       	movw	r16, r24
    5dd6:	a6 01       	movw	r20, r12
    5dd8:	95 01       	movw	r18, r10
    5dda:	22 0d       	add	r18, r2
    5ddc:	33 1d       	adc	r19, r3
    5dde:	44 1d       	adc	r20, r4
    5de0:	55 1d       	adc	r21, r5
    5de2:	a9 96       	adiw	r28, 0x29	; 41
    5de4:	6c ac       	ldd	r6, Y+60	; 0x3c
    5de6:	7d ac       	ldd	r7, Y+61	; 0x3d
    5de8:	8e ac       	ldd	r8, Y+62	; 0x3e
    5dea:	9f ac       	ldd	r9, Y+63	; 0x3f
    5dec:	a9 97       	sbiw	r28, 0x29	; 41
    5dee:	c4 01       	movw	r24, r8
    5df0:	aa 27       	eor	r26, r26
    5df2:	bb 27       	eor	r27, r27
    5df4:	28 0f       	add	r18, r24
    5df6:	39 1f       	adc	r19, r25
    5df8:	4a 1f       	adc	r20, r26
    5dfa:	5b 1f       	adc	r21, r27
    5dfc:	2a 15       	cp	r18, r10
    5dfe:	3b 05       	cpc	r19, r11
    5e00:	4c 05       	cpc	r20, r12
    5e02:	5d 05       	cpc	r21, r13
    5e04:	48 f4       	brcc	.+18     	; 0x5e18 <__moddi3+0xdfe>
    5e06:	81 2c       	mov	r8, r1
    5e08:	91 2c       	mov	r9, r1
    5e0a:	e1 e0       	ldi	r30, 0x01	; 1
    5e0c:	ae 2e       	mov	r10, r30
    5e0e:	b1 2c       	mov	r11, r1
    5e10:	e8 0c       	add	r14, r8
    5e12:	f9 1c       	adc	r15, r9
    5e14:	0a 1d       	adc	r16, r10
    5e16:	1b 1d       	adc	r17, r11
    5e18:	ca 01       	movw	r24, r20
    5e1a:	aa 27       	eor	r26, r26
    5e1c:	bb 27       	eor	r27, r27
    5e1e:	57 01       	movw	r10, r14
    5e20:	68 01       	movw	r12, r16
    5e22:	a8 0e       	add	r10, r24
    5e24:	b9 1e       	adc	r11, r25
    5e26:	ca 1e       	adc	r12, r26
    5e28:	db 1e       	adc	r13, r27
    5e2a:	a9 01       	movw	r20, r18
    5e2c:	33 27       	eor	r19, r19
    5e2e:	22 27       	eor	r18, r18
    5e30:	a9 96       	adiw	r28, 0x29	; 41
    5e32:	8c ad       	ldd	r24, Y+60	; 0x3c
    5e34:	9d ad       	ldd	r25, Y+61	; 0x3d
    5e36:	ae ad       	ldd	r26, Y+62	; 0x3e
    5e38:	bf ad       	ldd	r27, Y+63	; 0x3f
    5e3a:	a9 97       	sbiw	r28, 0x29	; 41
    5e3c:	a0 70       	andi	r26, 0x00	; 0
    5e3e:	b0 70       	andi	r27, 0x00	; 0
    5e40:	28 0f       	add	r18, r24
    5e42:	39 1f       	adc	r19, r25
    5e44:	4a 1f       	adc	r20, r26
    5e46:	5b 1f       	adc	r21, r27
    5e48:	e9 a8       	ldd	r14, Y+49	; 0x31
    5e4a:	fa a8       	ldd	r15, Y+50	; 0x32
    5e4c:	0b a9       	ldd	r16, Y+51	; 0x33
    5e4e:	1c a9       	ldd	r17, Y+52	; 0x34
    5e50:	ea 14       	cp	r14, r10
    5e52:	fb 04       	cpc	r15, r11
    5e54:	0c 05       	cpc	r16, r12
    5e56:	1d 05       	cpc	r17, r13
    5e58:	70 f0       	brcs	.+28     	; 0x5e76 <__moddi3+0xe5c>
    5e5a:	ae 14       	cp	r10, r14
    5e5c:	bf 04       	cpc	r11, r15
    5e5e:	c0 06       	cpc	r12, r16
    5e60:	d1 06       	cpc	r13, r17
    5e62:	89 f5       	brne	.+98     	; 0x5ec6 <__moddi3+0xeac>
    5e64:	6d a9       	ldd	r22, Y+53	; 0x35
    5e66:	7e a9       	ldd	r23, Y+54	; 0x36
    5e68:	8f a9       	ldd	r24, Y+55	; 0x37
    5e6a:	98 ad       	ldd	r25, Y+56	; 0x38
    5e6c:	62 17       	cp	r22, r18
    5e6e:	73 07       	cpc	r23, r19
    5e70:	84 07       	cpc	r24, r20
    5e72:	95 07       	cpc	r25, r21
    5e74:	40 f5       	brcc	.+80     	; 0x5ec6 <__moddi3+0xeac>
    5e76:	da 01       	movw	r26, r20
    5e78:	c9 01       	movw	r24, r18
    5e7a:	21 96       	adiw	r28, 0x01	; 1
    5e7c:	6c ac       	ldd	r6, Y+60	; 0x3c
    5e7e:	7d ac       	ldd	r7, Y+61	; 0x3d
    5e80:	8e ac       	ldd	r8, Y+62	; 0x3e
    5e82:	9f ac       	ldd	r9, Y+63	; 0x3f
    5e84:	21 97       	sbiw	r28, 0x01	; 1
    5e86:	86 19       	sub	r24, r6
    5e88:	97 09       	sbc	r25, r7
    5e8a:	a8 09       	sbc	r26, r8
    5e8c:	b9 09       	sbc	r27, r9
    5e8e:	25 96       	adiw	r28, 0x05	; 5
    5e90:	ec ac       	ldd	r14, Y+60	; 0x3c
    5e92:	fd ac       	ldd	r15, Y+61	; 0x3d
    5e94:	0e ad       	ldd	r16, Y+62	; 0x3e
    5e96:	1f ad       	ldd	r17, Y+63	; 0x3f
    5e98:	25 97       	sbiw	r28, 0x05	; 5
    5e9a:	ae 18       	sub	r10, r14
    5e9c:	bf 08       	sbc	r11, r15
    5e9e:	c0 0a       	sbc	r12, r16
    5ea0:	d1 0a       	sbc	r13, r17
    5ea2:	ee 24       	eor	r14, r14
    5ea4:	ff 24       	eor	r15, r15
    5ea6:	87 01       	movw	r16, r14
    5ea8:	28 17       	cp	r18, r24
    5eaa:	39 07       	cpc	r19, r25
    5eac:	4a 07       	cpc	r20, r26
    5eae:	5b 07       	cpc	r21, r27
    5eb0:	28 f4       	brcc	.+10     	; 0x5ebc <__moddi3+0xea2>
    5eb2:	21 e0       	ldi	r18, 0x01	; 1
    5eb4:	e2 2e       	mov	r14, r18
    5eb6:	f1 2c       	mov	r15, r1
    5eb8:	01 2d       	mov	r16, r1
    5eba:	11 2d       	mov	r17, r1
    5ebc:	ae 18       	sub	r10, r14
    5ebe:	bf 08       	sbc	r11, r15
    5ec0:	c0 0a       	sbc	r12, r16
    5ec2:	d1 0a       	sbc	r13, r17
    5ec4:	02 c0       	rjmp	.+4      	; 0x5eca <__moddi3+0xeb0>
    5ec6:	da 01       	movw	r26, r20
    5ec8:	c9 01       	movw	r24, r18
    5eca:	6d a8       	ldd	r6, Y+53	; 0x35
    5ecc:	7e a8       	ldd	r7, Y+54	; 0x36
    5ece:	8f a8       	ldd	r8, Y+55	; 0x37
    5ed0:	98 ac       	ldd	r9, Y+56	; 0x38
    5ed2:	68 1a       	sub	r6, r24
    5ed4:	79 0a       	sbc	r7, r25
    5ed6:	8a 0a       	sbc	r8, r26
    5ed8:	9b 0a       	sbc	r9, r27
    5eda:	09 a9       	ldd	r16, Y+49	; 0x31
    5edc:	1a a9       	ldd	r17, Y+50	; 0x32
    5ede:	2b a9       	ldd	r18, Y+51	; 0x33
    5ee0:	3c a9       	ldd	r19, Y+52	; 0x34
    5ee2:	0a 19       	sub	r16, r10
    5ee4:	1b 09       	sbc	r17, r11
    5ee6:	2c 09       	sbc	r18, r12
    5ee8:	3d 09       	sbc	r19, r13
    5eea:	58 01       	movw	r10, r16
    5eec:	69 01       	movw	r12, r18
    5eee:	22 24       	eor	r2, r2
    5ef0:	33 24       	eor	r3, r3
    5ef2:	21 01       	movw	r4, r2
    5ef4:	2d a9       	ldd	r18, Y+53	; 0x35
    5ef6:	3e a9       	ldd	r19, Y+54	; 0x36
    5ef8:	4f a9       	ldd	r20, Y+55	; 0x37
    5efa:	58 ad       	ldd	r21, Y+56	; 0x38
    5efc:	26 15       	cp	r18, r6
    5efe:	37 05       	cpc	r19, r7
    5f00:	48 05       	cpc	r20, r8
    5f02:	59 05       	cpc	r21, r9
    5f04:	28 f4       	brcc	.+10     	; 0x5f10 <__moddi3+0xef6>
    5f06:	81 e0       	ldi	r24, 0x01	; 1
    5f08:	28 2e       	mov	r2, r24
    5f0a:	31 2c       	mov	r3, r1
    5f0c:	41 2c       	mov	r4, r1
    5f0e:	51 2c       	mov	r5, r1
    5f10:	86 01       	movw	r16, r12
    5f12:	75 01       	movw	r14, r10
    5f14:	e2 18       	sub	r14, r2
    5f16:	f3 08       	sbc	r15, r3
    5f18:	04 09       	sbc	r16, r4
    5f1a:	15 09       	sbc	r17, r5
    5f1c:	a8 01       	movw	r20, r16
    5f1e:	97 01       	movw	r18, r14
    5f20:	e2 96       	adiw	r28, 0x32	; 50
    5f22:	0f ac       	ldd	r0, Y+63	; 0x3f
    5f24:	e2 97       	sbiw	r28, 0x32	; 50
    5f26:	04 c0       	rjmp	.+8      	; 0x5f30 <__moddi3+0xf16>
    5f28:	22 0f       	add	r18, r18
    5f2a:	33 1f       	adc	r19, r19
    5f2c:	44 1f       	adc	r20, r20
    5f2e:	55 1f       	adc	r21, r21
    5f30:	0a 94       	dec	r0
    5f32:	d2 f7       	brpl	.-12     	; 0x5f28 <__moddi3+0xf0e>
    5f34:	d4 01       	movw	r26, r8
    5f36:	c3 01       	movw	r24, r6
    5f38:	e3 96       	adiw	r28, 0x33	; 51
    5f3a:	0f ac       	ldd	r0, Y+63	; 0x3f
    5f3c:	e3 97       	sbiw	r28, 0x33	; 51
    5f3e:	04 c0       	rjmp	.+8      	; 0x5f48 <__moddi3+0xf2e>
    5f40:	b6 95       	lsr	r27
    5f42:	a7 95       	ror	r26
    5f44:	97 95       	ror	r25
    5f46:	87 95       	ror	r24
    5f48:	0a 94       	dec	r0
    5f4a:	d2 f7       	brpl	.-12     	; 0x5f40 <__moddi3+0xf26>
    5f4c:	28 2b       	or	r18, r24
    5f4e:	39 2b       	or	r19, r25
    5f50:	4a 2b       	or	r20, r26
    5f52:	5b 2b       	or	r21, r27
    5f54:	29 a7       	std	Y+41, r18	; 0x29
    5f56:	3a a7       	std	Y+42, r19	; 0x2a
    5f58:	4b a7       	std	Y+43, r20	; 0x2b
    5f5a:	5c a7       	std	Y+44, r21	; 0x2c
    5f5c:	e3 96       	adiw	r28, 0x33	; 51
    5f5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    5f60:	e3 97       	sbiw	r28, 0x33	; 51
    5f62:	04 c0       	rjmp	.+8      	; 0x5f6c <__moddi3+0xf52>
    5f64:	16 95       	lsr	r17
    5f66:	07 95       	ror	r16
    5f68:	f7 94       	ror	r15
    5f6a:	e7 94       	ror	r14
    5f6c:	0a 94       	dec	r0
    5f6e:	d2 f7       	brpl	.-12     	; 0x5f64 <__moddi3+0xf4a>
    5f70:	ed a6       	std	Y+45, r14	; 0x2d
    5f72:	fe a6       	std	Y+46, r15	; 0x2e
    5f74:	0f a7       	std	Y+47, r16	; 0x2f
    5f76:	18 ab       	std	Y+48, r17	; 0x30
    5f78:	29 8b       	std	Y+17, r18	; 0x11
    5f7a:	8a a5       	ldd	r24, Y+42	; 0x2a
    5f7c:	8a 8b       	std	Y+18, r24	; 0x12
    5f7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f80:	8b 8b       	std	Y+19, r24	; 0x13
    5f82:	8c a5       	ldd	r24, Y+44	; 0x2c
    5f84:	8c 8b       	std	Y+20, r24	; 0x14
    5f86:	ed 8a       	std	Y+21, r14	; 0x15
    5f88:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f8a:	8e 8b       	std	Y+22, r24	; 0x16
    5f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f8e:	8f 8b       	std	Y+23, r24	; 0x17
    5f90:	88 a9       	ldd	r24, Y+48	; 0x30
    5f92:	88 8f       	std	Y+24, r24	; 0x18
    5f94:	e1 96       	adiw	r28, 0x31	; 49
    5f96:	4c ad       	ldd	r20, Y+60	; 0x3c
    5f98:	5d ad       	ldd	r21, Y+61	; 0x3d
    5f9a:	6e ad       	ldd	r22, Y+62	; 0x3e
    5f9c:	7f ad       	ldd	r23, Y+63	; 0x3f
    5f9e:	e1 97       	sbiw	r28, 0x31	; 49
    5fa0:	41 15       	cp	r20, r1
    5fa2:	51 05       	cpc	r21, r1
    5fa4:	61 05       	cpc	r22, r1
    5fa6:	71 05       	cpc	r23, r1
    5fa8:	09 f4       	brne	.+2      	; 0x5fac <__moddi3+0xf92>
    5faa:	67 c0       	rjmp	.+206    	; 0x607a <__moddi3+0x1060>
    5fac:	89 89       	ldd	r24, Y+17	; 0x11
    5fae:	2a 89       	ldd	r18, Y+18	; 0x12
    5fb0:	3b 89       	ldd	r19, Y+19	; 0x13
    5fb2:	4c 89       	ldd	r20, Y+20	; 0x14
    5fb4:	5d 89       	ldd	r21, Y+21	; 0x15
    5fb6:	ae 89       	ldd	r26, Y+22	; 0x16
    5fb8:	bf 89       	ldd	r27, Y+23	; 0x17
    5fba:	18 8d       	ldd	r17, Y+24	; 0x18
    5fbc:	f8 2f       	mov	r31, r24
    5fbe:	f1 95       	neg	r31
    5fc0:	91 e0       	ldi	r25, 0x01	; 1
    5fc2:	1f 16       	cp	r1, r31
    5fc4:	08 f0       	brcs	.+2      	; 0x5fc8 <__moddi3+0xfae>
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	82 2f       	mov	r24, r18
    5fca:	81 95       	neg	r24
    5fcc:	21 e0       	ldi	r18, 0x01	; 1
    5fce:	18 16       	cp	r1, r24
    5fd0:	08 f0       	brcs	.+2      	; 0x5fd4 <__moddi3+0xfba>
    5fd2:	20 e0       	ldi	r18, 0x00	; 0
    5fd4:	e8 2f       	mov	r30, r24
    5fd6:	e9 1b       	sub	r30, r25
    5fd8:	91 e0       	ldi	r25, 0x01	; 1
    5fda:	8e 17       	cp	r24, r30
    5fdc:	08 f0       	brcs	.+2      	; 0x5fe0 <__moddi3+0xfc6>
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	29 2b       	or	r18, r25
    5fe2:	83 2f       	mov	r24, r19
    5fe4:	81 95       	neg	r24
    5fe6:	31 e0       	ldi	r19, 0x01	; 1
    5fe8:	18 16       	cp	r1, r24
    5fea:	08 f0       	brcs	.+2      	; 0x5fee <__moddi3+0xfd4>
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	78 2f       	mov	r23, r24
    5ff0:	72 1b       	sub	r23, r18
    5ff2:	91 e0       	ldi	r25, 0x01	; 1
    5ff4:	87 17       	cp	r24, r23
    5ff6:	08 f0       	brcs	.+2      	; 0x5ffa <__moddi3+0xfe0>
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	39 2b       	or	r19, r25
    5ffc:	84 2f       	mov	r24, r20
    5ffe:	81 95       	neg	r24
    6000:	21 e0       	ldi	r18, 0x01	; 1
    6002:	18 16       	cp	r1, r24
    6004:	08 f0       	brcs	.+2      	; 0x6008 <__moddi3+0xfee>
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	68 2f       	mov	r22, r24
    600a:	63 1b       	sub	r22, r19
    600c:	91 e0       	ldi	r25, 0x01	; 1
    600e:	86 17       	cp	r24, r22
    6010:	08 f0       	brcs	.+2      	; 0x6014 <__moddi3+0xffa>
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	29 2b       	or	r18, r25
    6016:	85 2f       	mov	r24, r21
    6018:	81 95       	neg	r24
    601a:	31 e0       	ldi	r19, 0x01	; 1
    601c:	18 16       	cp	r1, r24
    601e:	08 f0       	brcs	.+2      	; 0x6022 <__moddi3+0x1008>
    6020:	30 e0       	ldi	r19, 0x00	; 0
    6022:	58 2f       	mov	r21, r24
    6024:	52 1b       	sub	r21, r18
    6026:	91 e0       	ldi	r25, 0x01	; 1
    6028:	85 17       	cp	r24, r21
    602a:	08 f0       	brcs	.+2      	; 0x602e <__moddi3+0x1014>
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	39 2b       	or	r19, r25
    6030:	8a 2f       	mov	r24, r26
    6032:	81 95       	neg	r24
    6034:	21 e0       	ldi	r18, 0x01	; 1
    6036:	18 16       	cp	r1, r24
    6038:	08 f0       	brcs	.+2      	; 0x603c <__moddi3+0x1022>
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	48 2f       	mov	r20, r24
    603e:	43 1b       	sub	r20, r19
    6040:	91 e0       	ldi	r25, 0x01	; 1
    6042:	84 17       	cp	r24, r20
    6044:	08 f0       	brcs	.+2      	; 0x6048 <__moddi3+0x102e>
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	29 2b       	or	r18, r25
    604a:	8b 2f       	mov	r24, r27
    604c:	81 95       	neg	r24
    604e:	91 e0       	ldi	r25, 0x01	; 1
    6050:	18 16       	cp	r1, r24
    6052:	08 f0       	brcs	.+2      	; 0x6056 <__moddi3+0x103c>
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	38 2f       	mov	r19, r24
    6058:	32 1b       	sub	r19, r18
    605a:	21 e0       	ldi	r18, 0x01	; 1
    605c:	83 17       	cp	r24, r19
    605e:	08 f0       	brcs	.+2      	; 0x6062 <__moddi3+0x1048>
    6060:	20 e0       	ldi	r18, 0x00	; 0
    6062:	92 2b       	or	r25, r18
    6064:	81 2f       	mov	r24, r17
    6066:	81 95       	neg	r24
    6068:	89 1b       	sub	r24, r25
    606a:	f9 8b       	std	Y+17, r31	; 0x11
    606c:	ea 8b       	std	Y+18, r30	; 0x12
    606e:	7b 8b       	std	Y+19, r23	; 0x13
    6070:	6c 8b       	std	Y+20, r22	; 0x14
    6072:	5d 8b       	std	Y+21, r21	; 0x15
    6074:	4e 8b       	std	Y+22, r20	; 0x16
    6076:	3f 8b       	std	Y+23, r19	; 0x17
    6078:	88 8f       	std	Y+24, r24	; 0x18
    607a:	29 89       	ldd	r18, Y+17	; 0x11
    607c:	3a 89       	ldd	r19, Y+18	; 0x12
    607e:	4b 89       	ldd	r20, Y+19	; 0x13
    6080:	5c 89       	ldd	r21, Y+20	; 0x14
    6082:	6d 89       	ldd	r22, Y+21	; 0x15
    6084:	7e 89       	ldd	r23, Y+22	; 0x16
    6086:	8f 89       	ldd	r24, Y+23	; 0x17
    6088:	98 8d       	ldd	r25, Y+24	; 0x18
    608a:	c9 58       	subi	r28, 0x89	; 137
    608c:	df 4f       	sbci	r29, 0xFF	; 255
    608e:	e2 e1       	ldi	r30, 0x12	; 18
    6090:	0c 94 4c 39 	jmp	0x7298	; 0x7298 <__epilogue_restores__>

00006094 <_fpadd_parts>:
    6094:	a0 e0       	ldi	r26, 0x00	; 0
    6096:	b0 e0       	ldi	r27, 0x00	; 0
    6098:	e0 e5       	ldi	r30, 0x50	; 80
    609a:	f0 e3       	ldi	r31, 0x30	; 48
    609c:	0c 94 30 39 	jmp	0x7260	; 0x7260 <__prologue_saves__>
    60a0:	dc 01       	movw	r26, r24
    60a2:	2b 01       	movw	r4, r22
    60a4:	fa 01       	movw	r30, r20
    60a6:	9c 91       	ld	r25, X
    60a8:	92 30       	cpi	r25, 0x02	; 2
    60aa:	08 f4       	brcc	.+2      	; 0x60ae <_fpadd_parts+0x1a>
    60ac:	39 c1       	rjmp	.+626    	; 0x6320 <_fpadd_parts+0x28c>
    60ae:	eb 01       	movw	r28, r22
    60b0:	88 81       	ld	r24, Y
    60b2:	82 30       	cpi	r24, 0x02	; 2
    60b4:	08 f4       	brcc	.+2      	; 0x60b8 <_fpadd_parts+0x24>
    60b6:	33 c1       	rjmp	.+614    	; 0x631e <_fpadd_parts+0x28a>
    60b8:	94 30       	cpi	r25, 0x04	; 4
    60ba:	69 f4       	brne	.+26     	; 0x60d6 <_fpadd_parts+0x42>
    60bc:	84 30       	cpi	r24, 0x04	; 4
    60be:	09 f0       	breq	.+2      	; 0x60c2 <_fpadd_parts+0x2e>
    60c0:	2f c1       	rjmp	.+606    	; 0x6320 <_fpadd_parts+0x28c>
    60c2:	11 96       	adiw	r26, 0x01	; 1
    60c4:	9c 91       	ld	r25, X
    60c6:	11 97       	sbiw	r26, 0x01	; 1
    60c8:	89 81       	ldd	r24, Y+1	; 0x01
    60ca:	98 17       	cp	r25, r24
    60cc:	09 f4       	brne	.+2      	; 0x60d0 <_fpadd_parts+0x3c>
    60ce:	28 c1       	rjmp	.+592    	; 0x6320 <_fpadd_parts+0x28c>
    60d0:	a1 ec       	ldi	r26, 0xC1	; 193
    60d2:	b3 e0       	ldi	r27, 0x03	; 3
    60d4:	25 c1       	rjmp	.+586    	; 0x6320 <_fpadd_parts+0x28c>
    60d6:	84 30       	cpi	r24, 0x04	; 4
    60d8:	09 f4       	brne	.+2      	; 0x60dc <_fpadd_parts+0x48>
    60da:	21 c1       	rjmp	.+578    	; 0x631e <_fpadd_parts+0x28a>
    60dc:	82 30       	cpi	r24, 0x02	; 2
    60de:	a9 f4       	brne	.+42     	; 0x610a <_fpadd_parts+0x76>
    60e0:	92 30       	cpi	r25, 0x02	; 2
    60e2:	09 f0       	breq	.+2      	; 0x60e6 <_fpadd_parts+0x52>
    60e4:	1d c1       	rjmp	.+570    	; 0x6320 <_fpadd_parts+0x28c>
    60e6:	9a 01       	movw	r18, r20
    60e8:	ad 01       	movw	r20, r26
    60ea:	88 e0       	ldi	r24, 0x08	; 8
    60ec:	ea 01       	movw	r28, r20
    60ee:	09 90       	ld	r0, Y+
    60f0:	ae 01       	movw	r20, r28
    60f2:	e9 01       	movw	r28, r18
    60f4:	09 92       	st	Y+, r0
    60f6:	9e 01       	movw	r18, r28
    60f8:	81 50       	subi	r24, 0x01	; 1
    60fa:	c1 f7       	brne	.-16     	; 0x60ec <_fpadd_parts+0x58>
    60fc:	e2 01       	movw	r28, r4
    60fe:	89 81       	ldd	r24, Y+1	; 0x01
    6100:	11 96       	adiw	r26, 0x01	; 1
    6102:	9c 91       	ld	r25, X
    6104:	89 23       	and	r24, r25
    6106:	81 83       	std	Z+1, r24	; 0x01
    6108:	08 c1       	rjmp	.+528    	; 0x631a <_fpadd_parts+0x286>
    610a:	92 30       	cpi	r25, 0x02	; 2
    610c:	09 f4       	brne	.+2      	; 0x6110 <_fpadd_parts+0x7c>
    610e:	07 c1       	rjmp	.+526    	; 0x631e <_fpadd_parts+0x28a>
    6110:	12 96       	adiw	r26, 0x02	; 2
    6112:	2d 90       	ld	r2, X+
    6114:	3c 90       	ld	r3, X
    6116:	13 97       	sbiw	r26, 0x03	; 3
    6118:	eb 01       	movw	r28, r22
    611a:	8a 81       	ldd	r24, Y+2	; 0x02
    611c:	9b 81       	ldd	r25, Y+3	; 0x03
    611e:	14 96       	adiw	r26, 0x04	; 4
    6120:	ad 90       	ld	r10, X+
    6122:	bd 90       	ld	r11, X+
    6124:	cd 90       	ld	r12, X+
    6126:	dc 90       	ld	r13, X
    6128:	17 97       	sbiw	r26, 0x07	; 7
    612a:	ec 80       	ldd	r14, Y+4	; 0x04
    612c:	fd 80       	ldd	r15, Y+5	; 0x05
    612e:	0e 81       	ldd	r16, Y+6	; 0x06
    6130:	1f 81       	ldd	r17, Y+7	; 0x07
    6132:	91 01       	movw	r18, r2
    6134:	28 1b       	sub	r18, r24
    6136:	39 0b       	sbc	r19, r25
    6138:	b9 01       	movw	r22, r18
    613a:	37 ff       	sbrs	r19, 7
    613c:	04 c0       	rjmp	.+8      	; 0x6146 <_fpadd_parts+0xb2>
    613e:	66 27       	eor	r22, r22
    6140:	77 27       	eor	r23, r23
    6142:	62 1b       	sub	r22, r18
    6144:	73 0b       	sbc	r23, r19
    6146:	60 32       	cpi	r22, 0x20	; 32
    6148:	71 05       	cpc	r23, r1
    614a:	0c f0       	brlt	.+2      	; 0x614e <_fpadd_parts+0xba>
    614c:	61 c0       	rjmp	.+194    	; 0x6210 <_fpadd_parts+0x17c>
    614e:	12 16       	cp	r1, r18
    6150:	13 06       	cpc	r1, r19
    6152:	6c f5       	brge	.+90     	; 0x61ae <_fpadd_parts+0x11a>
    6154:	37 01       	movw	r6, r14
    6156:	48 01       	movw	r8, r16
    6158:	06 2e       	mov	r0, r22
    615a:	04 c0       	rjmp	.+8      	; 0x6164 <_fpadd_parts+0xd0>
    615c:	96 94       	lsr	r9
    615e:	87 94       	ror	r8
    6160:	77 94       	ror	r7
    6162:	67 94       	ror	r6
    6164:	0a 94       	dec	r0
    6166:	d2 f7       	brpl	.-12     	; 0x615c <_fpadd_parts+0xc8>
    6168:	21 e0       	ldi	r18, 0x01	; 1
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	40 e0       	ldi	r20, 0x00	; 0
    616e:	50 e0       	ldi	r21, 0x00	; 0
    6170:	04 c0       	rjmp	.+8      	; 0x617a <_fpadd_parts+0xe6>
    6172:	22 0f       	add	r18, r18
    6174:	33 1f       	adc	r19, r19
    6176:	44 1f       	adc	r20, r20
    6178:	55 1f       	adc	r21, r21
    617a:	6a 95       	dec	r22
    617c:	d2 f7       	brpl	.-12     	; 0x6172 <_fpadd_parts+0xde>
    617e:	21 50       	subi	r18, 0x01	; 1
    6180:	30 40       	sbci	r19, 0x00	; 0
    6182:	40 40       	sbci	r20, 0x00	; 0
    6184:	50 40       	sbci	r21, 0x00	; 0
    6186:	2e 21       	and	r18, r14
    6188:	3f 21       	and	r19, r15
    618a:	40 23       	and	r20, r16
    618c:	51 23       	and	r21, r17
    618e:	21 15       	cp	r18, r1
    6190:	31 05       	cpc	r19, r1
    6192:	41 05       	cpc	r20, r1
    6194:	51 05       	cpc	r21, r1
    6196:	21 f0       	breq	.+8      	; 0x61a0 <_fpadd_parts+0x10c>
    6198:	21 e0       	ldi	r18, 0x01	; 1
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	40 e0       	ldi	r20, 0x00	; 0
    619e:	50 e0       	ldi	r21, 0x00	; 0
    61a0:	79 01       	movw	r14, r18
    61a2:	8a 01       	movw	r16, r20
    61a4:	e6 28       	or	r14, r6
    61a6:	f7 28       	or	r15, r7
    61a8:	08 29       	or	r16, r8
    61aa:	19 29       	or	r17, r9
    61ac:	3c c0       	rjmp	.+120    	; 0x6226 <_fpadd_parts+0x192>
    61ae:	23 2b       	or	r18, r19
    61b0:	d1 f1       	breq	.+116    	; 0x6226 <_fpadd_parts+0x192>
    61b2:	26 0e       	add	r2, r22
    61b4:	37 1e       	adc	r3, r23
    61b6:	35 01       	movw	r6, r10
    61b8:	46 01       	movw	r8, r12
    61ba:	06 2e       	mov	r0, r22
    61bc:	04 c0       	rjmp	.+8      	; 0x61c6 <_fpadd_parts+0x132>
    61be:	96 94       	lsr	r9
    61c0:	87 94       	ror	r8
    61c2:	77 94       	ror	r7
    61c4:	67 94       	ror	r6
    61c6:	0a 94       	dec	r0
    61c8:	d2 f7       	brpl	.-12     	; 0x61be <_fpadd_parts+0x12a>
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	40 e0       	ldi	r20, 0x00	; 0
    61d0:	50 e0       	ldi	r21, 0x00	; 0
    61d2:	04 c0       	rjmp	.+8      	; 0x61dc <_fpadd_parts+0x148>
    61d4:	22 0f       	add	r18, r18
    61d6:	33 1f       	adc	r19, r19
    61d8:	44 1f       	adc	r20, r20
    61da:	55 1f       	adc	r21, r21
    61dc:	6a 95       	dec	r22
    61de:	d2 f7       	brpl	.-12     	; 0x61d4 <_fpadd_parts+0x140>
    61e0:	21 50       	subi	r18, 0x01	; 1
    61e2:	30 40       	sbci	r19, 0x00	; 0
    61e4:	40 40       	sbci	r20, 0x00	; 0
    61e6:	50 40       	sbci	r21, 0x00	; 0
    61e8:	2a 21       	and	r18, r10
    61ea:	3b 21       	and	r19, r11
    61ec:	4c 21       	and	r20, r12
    61ee:	5d 21       	and	r21, r13
    61f0:	21 15       	cp	r18, r1
    61f2:	31 05       	cpc	r19, r1
    61f4:	41 05       	cpc	r20, r1
    61f6:	51 05       	cpc	r21, r1
    61f8:	21 f0       	breq	.+8      	; 0x6202 <_fpadd_parts+0x16e>
    61fa:	21 e0       	ldi	r18, 0x01	; 1
    61fc:	30 e0       	ldi	r19, 0x00	; 0
    61fe:	40 e0       	ldi	r20, 0x00	; 0
    6200:	50 e0       	ldi	r21, 0x00	; 0
    6202:	59 01       	movw	r10, r18
    6204:	6a 01       	movw	r12, r20
    6206:	a6 28       	or	r10, r6
    6208:	b7 28       	or	r11, r7
    620a:	c8 28       	or	r12, r8
    620c:	d9 28       	or	r13, r9
    620e:	0b c0       	rjmp	.+22     	; 0x6226 <_fpadd_parts+0x192>
    6210:	82 15       	cp	r24, r2
    6212:	93 05       	cpc	r25, r3
    6214:	2c f0       	brlt	.+10     	; 0x6220 <_fpadd_parts+0x18c>
    6216:	1c 01       	movw	r2, r24
    6218:	aa 24       	eor	r10, r10
    621a:	bb 24       	eor	r11, r11
    621c:	65 01       	movw	r12, r10
    621e:	03 c0       	rjmp	.+6      	; 0x6226 <_fpadd_parts+0x192>
    6220:	ee 24       	eor	r14, r14
    6222:	ff 24       	eor	r15, r15
    6224:	87 01       	movw	r16, r14
    6226:	11 96       	adiw	r26, 0x01	; 1
    6228:	9c 91       	ld	r25, X
    622a:	d2 01       	movw	r26, r4
    622c:	11 96       	adiw	r26, 0x01	; 1
    622e:	8c 91       	ld	r24, X
    6230:	98 17       	cp	r25, r24
    6232:	09 f4       	brne	.+2      	; 0x6236 <_fpadd_parts+0x1a2>
    6234:	45 c0       	rjmp	.+138    	; 0x62c0 <_fpadd_parts+0x22c>
    6236:	99 23       	and	r25, r25
    6238:	39 f0       	breq	.+14     	; 0x6248 <_fpadd_parts+0x1b4>
    623a:	a8 01       	movw	r20, r16
    623c:	97 01       	movw	r18, r14
    623e:	2a 19       	sub	r18, r10
    6240:	3b 09       	sbc	r19, r11
    6242:	4c 09       	sbc	r20, r12
    6244:	5d 09       	sbc	r21, r13
    6246:	06 c0       	rjmp	.+12     	; 0x6254 <_fpadd_parts+0x1c0>
    6248:	a6 01       	movw	r20, r12
    624a:	95 01       	movw	r18, r10
    624c:	2e 19       	sub	r18, r14
    624e:	3f 09       	sbc	r19, r15
    6250:	40 0b       	sbc	r20, r16
    6252:	51 0b       	sbc	r21, r17
    6254:	57 fd       	sbrc	r21, 7
    6256:	08 c0       	rjmp	.+16     	; 0x6268 <_fpadd_parts+0x1d4>
    6258:	11 82       	std	Z+1, r1	; 0x01
    625a:	33 82       	std	Z+3, r3	; 0x03
    625c:	22 82       	std	Z+2, r2	; 0x02
    625e:	24 83       	std	Z+4, r18	; 0x04
    6260:	35 83       	std	Z+5, r19	; 0x05
    6262:	46 83       	std	Z+6, r20	; 0x06
    6264:	57 83       	std	Z+7, r21	; 0x07
    6266:	1d c0       	rjmp	.+58     	; 0x62a2 <_fpadd_parts+0x20e>
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	81 83       	std	Z+1, r24	; 0x01
    626c:	33 82       	std	Z+3, r3	; 0x03
    626e:	22 82       	std	Z+2, r2	; 0x02
    6270:	88 27       	eor	r24, r24
    6272:	99 27       	eor	r25, r25
    6274:	dc 01       	movw	r26, r24
    6276:	82 1b       	sub	r24, r18
    6278:	93 0b       	sbc	r25, r19
    627a:	a4 0b       	sbc	r26, r20
    627c:	b5 0b       	sbc	r27, r21
    627e:	84 83       	std	Z+4, r24	; 0x04
    6280:	95 83       	std	Z+5, r25	; 0x05
    6282:	a6 83       	std	Z+6, r26	; 0x06
    6284:	b7 83       	std	Z+7, r27	; 0x07
    6286:	0d c0       	rjmp	.+26     	; 0x62a2 <_fpadd_parts+0x20e>
    6288:	22 0f       	add	r18, r18
    628a:	33 1f       	adc	r19, r19
    628c:	44 1f       	adc	r20, r20
    628e:	55 1f       	adc	r21, r21
    6290:	24 83       	std	Z+4, r18	; 0x04
    6292:	35 83       	std	Z+5, r19	; 0x05
    6294:	46 83       	std	Z+6, r20	; 0x06
    6296:	57 83       	std	Z+7, r21	; 0x07
    6298:	82 81       	ldd	r24, Z+2	; 0x02
    629a:	93 81       	ldd	r25, Z+3	; 0x03
    629c:	01 97       	sbiw	r24, 0x01	; 1
    629e:	93 83       	std	Z+3, r25	; 0x03
    62a0:	82 83       	std	Z+2, r24	; 0x02
    62a2:	24 81       	ldd	r18, Z+4	; 0x04
    62a4:	35 81       	ldd	r19, Z+5	; 0x05
    62a6:	46 81       	ldd	r20, Z+6	; 0x06
    62a8:	57 81       	ldd	r21, Z+7	; 0x07
    62aa:	da 01       	movw	r26, r20
    62ac:	c9 01       	movw	r24, r18
    62ae:	01 97       	sbiw	r24, 0x01	; 1
    62b0:	a1 09       	sbc	r26, r1
    62b2:	b1 09       	sbc	r27, r1
    62b4:	8f 5f       	subi	r24, 0xFF	; 255
    62b6:	9f 4f       	sbci	r25, 0xFF	; 255
    62b8:	af 4f       	sbci	r26, 0xFF	; 255
    62ba:	bf 43       	sbci	r27, 0x3F	; 63
    62bc:	28 f3       	brcs	.-54     	; 0x6288 <_fpadd_parts+0x1f4>
    62be:	0b c0       	rjmp	.+22     	; 0x62d6 <_fpadd_parts+0x242>
    62c0:	91 83       	std	Z+1, r25	; 0x01
    62c2:	33 82       	std	Z+3, r3	; 0x03
    62c4:	22 82       	std	Z+2, r2	; 0x02
    62c6:	ea 0c       	add	r14, r10
    62c8:	fb 1c       	adc	r15, r11
    62ca:	0c 1d       	adc	r16, r12
    62cc:	1d 1d       	adc	r17, r13
    62ce:	e4 82       	std	Z+4, r14	; 0x04
    62d0:	f5 82       	std	Z+5, r15	; 0x05
    62d2:	06 83       	std	Z+6, r16	; 0x06
    62d4:	17 83       	std	Z+7, r17	; 0x07
    62d6:	83 e0       	ldi	r24, 0x03	; 3
    62d8:	80 83       	st	Z, r24
    62da:	24 81       	ldd	r18, Z+4	; 0x04
    62dc:	35 81       	ldd	r19, Z+5	; 0x05
    62de:	46 81       	ldd	r20, Z+6	; 0x06
    62e0:	57 81       	ldd	r21, Z+7	; 0x07
    62e2:	57 ff       	sbrs	r21, 7
    62e4:	1a c0       	rjmp	.+52     	; 0x631a <_fpadd_parts+0x286>
    62e6:	c9 01       	movw	r24, r18
    62e8:	aa 27       	eor	r26, r26
    62ea:	97 fd       	sbrc	r25, 7
    62ec:	a0 95       	com	r26
    62ee:	ba 2f       	mov	r27, r26
    62f0:	81 70       	andi	r24, 0x01	; 1
    62f2:	90 70       	andi	r25, 0x00	; 0
    62f4:	a0 70       	andi	r26, 0x00	; 0
    62f6:	b0 70       	andi	r27, 0x00	; 0
    62f8:	56 95       	lsr	r21
    62fa:	47 95       	ror	r20
    62fc:	37 95       	ror	r19
    62fe:	27 95       	ror	r18
    6300:	82 2b       	or	r24, r18
    6302:	93 2b       	or	r25, r19
    6304:	a4 2b       	or	r26, r20
    6306:	b5 2b       	or	r27, r21
    6308:	84 83       	std	Z+4, r24	; 0x04
    630a:	95 83       	std	Z+5, r25	; 0x05
    630c:	a6 83       	std	Z+6, r26	; 0x06
    630e:	b7 83       	std	Z+7, r27	; 0x07
    6310:	82 81       	ldd	r24, Z+2	; 0x02
    6312:	93 81       	ldd	r25, Z+3	; 0x03
    6314:	01 96       	adiw	r24, 0x01	; 1
    6316:	93 83       	std	Z+3, r25	; 0x03
    6318:	82 83       	std	Z+2, r24	; 0x02
    631a:	df 01       	movw	r26, r30
    631c:	01 c0       	rjmp	.+2      	; 0x6320 <_fpadd_parts+0x28c>
    631e:	d2 01       	movw	r26, r4
    6320:	cd 01       	movw	r24, r26
    6322:	cd b7       	in	r28, 0x3d	; 61
    6324:	de b7       	in	r29, 0x3e	; 62
    6326:	e2 e1       	ldi	r30, 0x12	; 18
    6328:	0c 94 4c 39 	jmp	0x7298	; 0x7298 <__epilogue_restores__>

0000632c <__subsf3>:
    632c:	a0 e2       	ldi	r26, 0x20	; 32
    632e:	b0 e0       	ldi	r27, 0x00	; 0
    6330:	ec e9       	ldi	r30, 0x9C	; 156
    6332:	f1 e3       	ldi	r31, 0x31	; 49
    6334:	0c 94 3c 39 	jmp	0x7278	; 0x7278 <__prologue_saves__+0x18>
    6338:	69 83       	std	Y+1, r22	; 0x01
    633a:	7a 83       	std	Y+2, r23	; 0x02
    633c:	8b 83       	std	Y+3, r24	; 0x03
    633e:	9c 83       	std	Y+4, r25	; 0x04
    6340:	2d 83       	std	Y+5, r18	; 0x05
    6342:	3e 83       	std	Y+6, r19	; 0x06
    6344:	4f 83       	std	Y+7, r20	; 0x07
    6346:	58 87       	std	Y+8, r21	; 0x08
    6348:	e9 e0       	ldi	r30, 0x09	; 9
    634a:	ee 2e       	mov	r14, r30
    634c:	f1 2c       	mov	r15, r1
    634e:	ec 0e       	add	r14, r28
    6350:	fd 1e       	adc	r15, r29
    6352:	ce 01       	movw	r24, r28
    6354:	01 96       	adiw	r24, 0x01	; 1
    6356:	b7 01       	movw	r22, r14
    6358:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    635c:	8e 01       	movw	r16, r28
    635e:	0f 5e       	subi	r16, 0xEF	; 239
    6360:	1f 4f       	sbci	r17, 0xFF	; 255
    6362:	ce 01       	movw	r24, r28
    6364:	05 96       	adiw	r24, 0x05	; 5
    6366:	b8 01       	movw	r22, r16
    6368:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    636c:	8a 89       	ldd	r24, Y+18	; 0x12
    636e:	91 e0       	ldi	r25, 0x01	; 1
    6370:	89 27       	eor	r24, r25
    6372:	8a 8b       	std	Y+18, r24	; 0x12
    6374:	c7 01       	movw	r24, r14
    6376:	b8 01       	movw	r22, r16
    6378:	ae 01       	movw	r20, r28
    637a:	47 5e       	subi	r20, 0xE7	; 231
    637c:	5f 4f       	sbci	r21, 0xFF	; 255
    637e:	0e 94 4a 30 	call	0x6094	; 0x6094 <_fpadd_parts>
    6382:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__pack_f>
    6386:	a0 96       	adiw	r28, 0x20	; 32
    6388:	e6 e0       	ldi	r30, 0x06	; 6
    638a:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <__epilogue_restores__+0x18>

0000638e <__addsf3>:
    638e:	a0 e2       	ldi	r26, 0x20	; 32
    6390:	b0 e0       	ldi	r27, 0x00	; 0
    6392:	ed ec       	ldi	r30, 0xCD	; 205
    6394:	f1 e3       	ldi	r31, 0x31	; 49
    6396:	0c 94 3c 39 	jmp	0x7278	; 0x7278 <__prologue_saves__+0x18>
    639a:	69 83       	std	Y+1, r22	; 0x01
    639c:	7a 83       	std	Y+2, r23	; 0x02
    639e:	8b 83       	std	Y+3, r24	; 0x03
    63a0:	9c 83       	std	Y+4, r25	; 0x04
    63a2:	2d 83       	std	Y+5, r18	; 0x05
    63a4:	3e 83       	std	Y+6, r19	; 0x06
    63a6:	4f 83       	std	Y+7, r20	; 0x07
    63a8:	58 87       	std	Y+8, r21	; 0x08
    63aa:	f9 e0       	ldi	r31, 0x09	; 9
    63ac:	ef 2e       	mov	r14, r31
    63ae:	f1 2c       	mov	r15, r1
    63b0:	ec 0e       	add	r14, r28
    63b2:	fd 1e       	adc	r15, r29
    63b4:	ce 01       	movw	r24, r28
    63b6:	01 96       	adiw	r24, 0x01	; 1
    63b8:	b7 01       	movw	r22, r14
    63ba:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    63be:	8e 01       	movw	r16, r28
    63c0:	0f 5e       	subi	r16, 0xEF	; 239
    63c2:	1f 4f       	sbci	r17, 0xFF	; 255
    63c4:	ce 01       	movw	r24, r28
    63c6:	05 96       	adiw	r24, 0x05	; 5
    63c8:	b8 01       	movw	r22, r16
    63ca:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    63ce:	c7 01       	movw	r24, r14
    63d0:	b8 01       	movw	r22, r16
    63d2:	ae 01       	movw	r20, r28
    63d4:	47 5e       	subi	r20, 0xE7	; 231
    63d6:	5f 4f       	sbci	r21, 0xFF	; 255
    63d8:	0e 94 4a 30 	call	0x6094	; 0x6094 <_fpadd_parts>
    63dc:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__pack_f>
    63e0:	a0 96       	adiw	r28, 0x20	; 32
    63e2:	e6 e0       	ldi	r30, 0x06	; 6
    63e4:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <__epilogue_restores__+0x18>

000063e8 <__mulsf3>:
    63e8:	a0 e2       	ldi	r26, 0x20	; 32
    63ea:	b0 e0       	ldi	r27, 0x00	; 0
    63ec:	ea ef       	ldi	r30, 0xFA	; 250
    63ee:	f1 e3       	ldi	r31, 0x31	; 49
    63f0:	0c 94 30 39 	jmp	0x7260	; 0x7260 <__prologue_saves__>
    63f4:	69 83       	std	Y+1, r22	; 0x01
    63f6:	7a 83       	std	Y+2, r23	; 0x02
    63f8:	8b 83       	std	Y+3, r24	; 0x03
    63fa:	9c 83       	std	Y+4, r25	; 0x04
    63fc:	2d 83       	std	Y+5, r18	; 0x05
    63fe:	3e 83       	std	Y+6, r19	; 0x06
    6400:	4f 83       	std	Y+7, r20	; 0x07
    6402:	58 87       	std	Y+8, r21	; 0x08
    6404:	ce 01       	movw	r24, r28
    6406:	01 96       	adiw	r24, 0x01	; 1
    6408:	be 01       	movw	r22, r28
    640a:	67 5f       	subi	r22, 0xF7	; 247
    640c:	7f 4f       	sbci	r23, 0xFF	; 255
    640e:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6412:	ce 01       	movw	r24, r28
    6414:	05 96       	adiw	r24, 0x05	; 5
    6416:	be 01       	movw	r22, r28
    6418:	6f 5e       	subi	r22, 0xEF	; 239
    641a:	7f 4f       	sbci	r23, 0xFF	; 255
    641c:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6420:	99 85       	ldd	r25, Y+9	; 0x09
    6422:	92 30       	cpi	r25, 0x02	; 2
    6424:	88 f0       	brcs	.+34     	; 0x6448 <__mulsf3+0x60>
    6426:	89 89       	ldd	r24, Y+17	; 0x11
    6428:	82 30       	cpi	r24, 0x02	; 2
    642a:	c8 f0       	brcs	.+50     	; 0x645e <__mulsf3+0x76>
    642c:	94 30       	cpi	r25, 0x04	; 4
    642e:	19 f4       	brne	.+6      	; 0x6436 <__mulsf3+0x4e>
    6430:	82 30       	cpi	r24, 0x02	; 2
    6432:	51 f4       	brne	.+20     	; 0x6448 <__mulsf3+0x60>
    6434:	04 c0       	rjmp	.+8      	; 0x643e <__mulsf3+0x56>
    6436:	84 30       	cpi	r24, 0x04	; 4
    6438:	29 f4       	brne	.+10     	; 0x6444 <__mulsf3+0x5c>
    643a:	92 30       	cpi	r25, 0x02	; 2
    643c:	81 f4       	brne	.+32     	; 0x645e <__mulsf3+0x76>
    643e:	81 ec       	ldi	r24, 0xC1	; 193
    6440:	93 e0       	ldi	r25, 0x03	; 3
    6442:	c6 c0       	rjmp	.+396    	; 0x65d0 <__mulsf3+0x1e8>
    6444:	92 30       	cpi	r25, 0x02	; 2
    6446:	49 f4       	brne	.+18     	; 0x645a <__mulsf3+0x72>
    6448:	20 e0       	ldi	r18, 0x00	; 0
    644a:	9a 85       	ldd	r25, Y+10	; 0x0a
    644c:	8a 89       	ldd	r24, Y+18	; 0x12
    644e:	98 13       	cpse	r25, r24
    6450:	21 e0       	ldi	r18, 0x01	; 1
    6452:	2a 87       	std	Y+10, r18	; 0x0a
    6454:	ce 01       	movw	r24, r28
    6456:	09 96       	adiw	r24, 0x09	; 9
    6458:	bb c0       	rjmp	.+374    	; 0x65d0 <__mulsf3+0x1e8>
    645a:	82 30       	cpi	r24, 0x02	; 2
    645c:	49 f4       	brne	.+18     	; 0x6470 <__mulsf3+0x88>
    645e:	20 e0       	ldi	r18, 0x00	; 0
    6460:	9a 85       	ldd	r25, Y+10	; 0x0a
    6462:	8a 89       	ldd	r24, Y+18	; 0x12
    6464:	98 13       	cpse	r25, r24
    6466:	21 e0       	ldi	r18, 0x01	; 1
    6468:	2a 8b       	std	Y+18, r18	; 0x12
    646a:	ce 01       	movw	r24, r28
    646c:	41 96       	adiw	r24, 0x11	; 17
    646e:	b0 c0       	rjmp	.+352    	; 0x65d0 <__mulsf3+0x1e8>
    6470:	2d 84       	ldd	r2, Y+13	; 0x0d
    6472:	3e 84       	ldd	r3, Y+14	; 0x0e
    6474:	4f 84       	ldd	r4, Y+15	; 0x0f
    6476:	58 88       	ldd	r5, Y+16	; 0x10
    6478:	6d 88       	ldd	r6, Y+21	; 0x15
    647a:	7e 88       	ldd	r7, Y+22	; 0x16
    647c:	8f 88       	ldd	r8, Y+23	; 0x17
    647e:	98 8c       	ldd	r9, Y+24	; 0x18
    6480:	ee 24       	eor	r14, r14
    6482:	ff 24       	eor	r15, r15
    6484:	87 01       	movw	r16, r14
    6486:	aa 24       	eor	r10, r10
    6488:	bb 24       	eor	r11, r11
    648a:	65 01       	movw	r12, r10
    648c:	40 e0       	ldi	r20, 0x00	; 0
    648e:	50 e0       	ldi	r21, 0x00	; 0
    6490:	60 e0       	ldi	r22, 0x00	; 0
    6492:	70 e0       	ldi	r23, 0x00	; 0
    6494:	e0 e0       	ldi	r30, 0x00	; 0
    6496:	f0 e0       	ldi	r31, 0x00	; 0
    6498:	c1 01       	movw	r24, r2
    649a:	81 70       	andi	r24, 0x01	; 1
    649c:	90 70       	andi	r25, 0x00	; 0
    649e:	89 2b       	or	r24, r25
    64a0:	e9 f0       	breq	.+58     	; 0x64dc <__mulsf3+0xf4>
    64a2:	e6 0c       	add	r14, r6
    64a4:	f7 1c       	adc	r15, r7
    64a6:	08 1d       	adc	r16, r8
    64a8:	19 1d       	adc	r17, r9
    64aa:	9a 01       	movw	r18, r20
    64ac:	ab 01       	movw	r20, r22
    64ae:	2a 0d       	add	r18, r10
    64b0:	3b 1d       	adc	r19, r11
    64b2:	4c 1d       	adc	r20, r12
    64b4:	5d 1d       	adc	r21, r13
    64b6:	80 e0       	ldi	r24, 0x00	; 0
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	a0 e0       	ldi	r26, 0x00	; 0
    64bc:	b0 e0       	ldi	r27, 0x00	; 0
    64be:	e6 14       	cp	r14, r6
    64c0:	f7 04       	cpc	r15, r7
    64c2:	08 05       	cpc	r16, r8
    64c4:	19 05       	cpc	r17, r9
    64c6:	20 f4       	brcc	.+8      	; 0x64d0 <__mulsf3+0xe8>
    64c8:	81 e0       	ldi	r24, 0x01	; 1
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	a0 e0       	ldi	r26, 0x00	; 0
    64ce:	b0 e0       	ldi	r27, 0x00	; 0
    64d0:	ba 01       	movw	r22, r20
    64d2:	a9 01       	movw	r20, r18
    64d4:	48 0f       	add	r20, r24
    64d6:	59 1f       	adc	r21, r25
    64d8:	6a 1f       	adc	r22, r26
    64da:	7b 1f       	adc	r23, r27
    64dc:	aa 0c       	add	r10, r10
    64de:	bb 1c       	adc	r11, r11
    64e0:	cc 1c       	adc	r12, r12
    64e2:	dd 1c       	adc	r13, r13
    64e4:	97 fe       	sbrs	r9, 7
    64e6:	08 c0       	rjmp	.+16     	; 0x64f8 <__mulsf3+0x110>
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	a0 e0       	ldi	r26, 0x00	; 0
    64ee:	b0 e0       	ldi	r27, 0x00	; 0
    64f0:	a8 2a       	or	r10, r24
    64f2:	b9 2a       	or	r11, r25
    64f4:	ca 2a       	or	r12, r26
    64f6:	db 2a       	or	r13, r27
    64f8:	31 96       	adiw	r30, 0x01	; 1
    64fa:	e0 32       	cpi	r30, 0x20	; 32
    64fc:	f1 05       	cpc	r31, r1
    64fe:	49 f0       	breq	.+18     	; 0x6512 <__mulsf3+0x12a>
    6500:	66 0c       	add	r6, r6
    6502:	77 1c       	adc	r7, r7
    6504:	88 1c       	adc	r8, r8
    6506:	99 1c       	adc	r9, r9
    6508:	56 94       	lsr	r5
    650a:	47 94       	ror	r4
    650c:	37 94       	ror	r3
    650e:	27 94       	ror	r2
    6510:	c3 cf       	rjmp	.-122    	; 0x6498 <__mulsf3+0xb0>
    6512:	fa 85       	ldd	r31, Y+10	; 0x0a
    6514:	ea 89       	ldd	r30, Y+18	; 0x12
    6516:	2b 89       	ldd	r18, Y+19	; 0x13
    6518:	3c 89       	ldd	r19, Y+20	; 0x14
    651a:	8b 85       	ldd	r24, Y+11	; 0x0b
    651c:	9c 85       	ldd	r25, Y+12	; 0x0c
    651e:	28 0f       	add	r18, r24
    6520:	39 1f       	adc	r19, r25
    6522:	2e 5f       	subi	r18, 0xFE	; 254
    6524:	3f 4f       	sbci	r19, 0xFF	; 255
    6526:	17 c0       	rjmp	.+46     	; 0x6556 <__mulsf3+0x16e>
    6528:	ca 01       	movw	r24, r20
    652a:	81 70       	andi	r24, 0x01	; 1
    652c:	90 70       	andi	r25, 0x00	; 0
    652e:	89 2b       	or	r24, r25
    6530:	61 f0       	breq	.+24     	; 0x654a <__mulsf3+0x162>
    6532:	16 95       	lsr	r17
    6534:	07 95       	ror	r16
    6536:	f7 94       	ror	r15
    6538:	e7 94       	ror	r14
    653a:	80 e0       	ldi	r24, 0x00	; 0
    653c:	90 e0       	ldi	r25, 0x00	; 0
    653e:	a0 e0       	ldi	r26, 0x00	; 0
    6540:	b0 e8       	ldi	r27, 0x80	; 128
    6542:	e8 2a       	or	r14, r24
    6544:	f9 2a       	or	r15, r25
    6546:	0a 2b       	or	r16, r26
    6548:	1b 2b       	or	r17, r27
    654a:	76 95       	lsr	r23
    654c:	67 95       	ror	r22
    654e:	57 95       	ror	r21
    6550:	47 95       	ror	r20
    6552:	2f 5f       	subi	r18, 0xFF	; 255
    6554:	3f 4f       	sbci	r19, 0xFF	; 255
    6556:	77 fd       	sbrc	r23, 7
    6558:	e7 cf       	rjmp	.-50     	; 0x6528 <__mulsf3+0x140>
    655a:	0c c0       	rjmp	.+24     	; 0x6574 <__mulsf3+0x18c>
    655c:	44 0f       	add	r20, r20
    655e:	55 1f       	adc	r21, r21
    6560:	66 1f       	adc	r22, r22
    6562:	77 1f       	adc	r23, r23
    6564:	17 fd       	sbrc	r17, 7
    6566:	41 60       	ori	r20, 0x01	; 1
    6568:	ee 0c       	add	r14, r14
    656a:	ff 1c       	adc	r15, r15
    656c:	00 1f       	adc	r16, r16
    656e:	11 1f       	adc	r17, r17
    6570:	21 50       	subi	r18, 0x01	; 1
    6572:	30 40       	sbci	r19, 0x00	; 0
    6574:	40 30       	cpi	r20, 0x00	; 0
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	59 07       	cpc	r21, r25
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	69 07       	cpc	r22, r25
    657e:	90 e4       	ldi	r25, 0x40	; 64
    6580:	79 07       	cpc	r23, r25
    6582:	60 f3       	brcs	.-40     	; 0x655c <__mulsf3+0x174>
    6584:	2b 8f       	std	Y+27, r18	; 0x1b
    6586:	3c 8f       	std	Y+28, r19	; 0x1c
    6588:	db 01       	movw	r26, r22
    658a:	ca 01       	movw	r24, r20
    658c:	8f 77       	andi	r24, 0x7F	; 127
    658e:	90 70       	andi	r25, 0x00	; 0
    6590:	a0 70       	andi	r26, 0x00	; 0
    6592:	b0 70       	andi	r27, 0x00	; 0
    6594:	80 34       	cpi	r24, 0x40	; 64
    6596:	91 05       	cpc	r25, r1
    6598:	a1 05       	cpc	r26, r1
    659a:	b1 05       	cpc	r27, r1
    659c:	61 f4       	brne	.+24     	; 0x65b6 <__mulsf3+0x1ce>
    659e:	47 fd       	sbrc	r20, 7
    65a0:	0a c0       	rjmp	.+20     	; 0x65b6 <__mulsf3+0x1ce>
    65a2:	e1 14       	cp	r14, r1
    65a4:	f1 04       	cpc	r15, r1
    65a6:	01 05       	cpc	r16, r1
    65a8:	11 05       	cpc	r17, r1
    65aa:	29 f0       	breq	.+10     	; 0x65b6 <__mulsf3+0x1ce>
    65ac:	40 5c       	subi	r20, 0xC0	; 192
    65ae:	5f 4f       	sbci	r21, 0xFF	; 255
    65b0:	6f 4f       	sbci	r22, 0xFF	; 255
    65b2:	7f 4f       	sbci	r23, 0xFF	; 255
    65b4:	40 78       	andi	r20, 0x80	; 128
    65b6:	1a 8e       	std	Y+26, r1	; 0x1a
    65b8:	fe 17       	cp	r31, r30
    65ba:	11 f0       	breq	.+4      	; 0x65c0 <__mulsf3+0x1d8>
    65bc:	81 e0       	ldi	r24, 0x01	; 1
    65be:	8a 8f       	std	Y+26, r24	; 0x1a
    65c0:	4d 8f       	std	Y+29, r20	; 0x1d
    65c2:	5e 8f       	std	Y+30, r21	; 0x1e
    65c4:	6f 8f       	std	Y+31, r22	; 0x1f
    65c6:	78 a3       	std	Y+32, r23	; 0x20
    65c8:	83 e0       	ldi	r24, 0x03	; 3
    65ca:	89 8f       	std	Y+25, r24	; 0x19
    65cc:	ce 01       	movw	r24, r28
    65ce:	49 96       	adiw	r24, 0x19	; 25
    65d0:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__pack_f>
    65d4:	a0 96       	adiw	r28, 0x20	; 32
    65d6:	e2 e1       	ldi	r30, 0x12	; 18
    65d8:	0c 94 4c 39 	jmp	0x7298	; 0x7298 <__epilogue_restores__>

000065dc <__divsf3>:
    65dc:	a8 e1       	ldi	r26, 0x18	; 24
    65de:	b0 e0       	ldi	r27, 0x00	; 0
    65e0:	e4 ef       	ldi	r30, 0xF4	; 244
    65e2:	f2 e3       	ldi	r31, 0x32	; 50
    65e4:	0c 94 38 39 	jmp	0x7270	; 0x7270 <__prologue_saves__+0x10>
    65e8:	69 83       	std	Y+1, r22	; 0x01
    65ea:	7a 83       	std	Y+2, r23	; 0x02
    65ec:	8b 83       	std	Y+3, r24	; 0x03
    65ee:	9c 83       	std	Y+4, r25	; 0x04
    65f0:	2d 83       	std	Y+5, r18	; 0x05
    65f2:	3e 83       	std	Y+6, r19	; 0x06
    65f4:	4f 83       	std	Y+7, r20	; 0x07
    65f6:	58 87       	std	Y+8, r21	; 0x08
    65f8:	b9 e0       	ldi	r27, 0x09	; 9
    65fa:	eb 2e       	mov	r14, r27
    65fc:	f1 2c       	mov	r15, r1
    65fe:	ec 0e       	add	r14, r28
    6600:	fd 1e       	adc	r15, r29
    6602:	ce 01       	movw	r24, r28
    6604:	01 96       	adiw	r24, 0x01	; 1
    6606:	b7 01       	movw	r22, r14
    6608:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    660c:	8e 01       	movw	r16, r28
    660e:	0f 5e       	subi	r16, 0xEF	; 239
    6610:	1f 4f       	sbci	r17, 0xFF	; 255
    6612:	ce 01       	movw	r24, r28
    6614:	05 96       	adiw	r24, 0x05	; 5
    6616:	b8 01       	movw	r22, r16
    6618:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    661c:	29 85       	ldd	r18, Y+9	; 0x09
    661e:	22 30       	cpi	r18, 0x02	; 2
    6620:	08 f4       	brcc	.+2      	; 0x6624 <__divsf3+0x48>
    6622:	7e c0       	rjmp	.+252    	; 0x6720 <__divsf3+0x144>
    6624:	39 89       	ldd	r19, Y+17	; 0x11
    6626:	32 30       	cpi	r19, 0x02	; 2
    6628:	10 f4       	brcc	.+4      	; 0x662e <__divsf3+0x52>
    662a:	b8 01       	movw	r22, r16
    662c:	7c c0       	rjmp	.+248    	; 0x6726 <__divsf3+0x14a>
    662e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6630:	9a 89       	ldd	r25, Y+18	; 0x12
    6632:	89 27       	eor	r24, r25
    6634:	8a 87       	std	Y+10, r24	; 0x0a
    6636:	24 30       	cpi	r18, 0x04	; 4
    6638:	11 f0       	breq	.+4      	; 0x663e <__divsf3+0x62>
    663a:	22 30       	cpi	r18, 0x02	; 2
    663c:	31 f4       	brne	.+12     	; 0x664a <__divsf3+0x6e>
    663e:	23 17       	cp	r18, r19
    6640:	09 f0       	breq	.+2      	; 0x6644 <__divsf3+0x68>
    6642:	6e c0       	rjmp	.+220    	; 0x6720 <__divsf3+0x144>
    6644:	61 ec       	ldi	r22, 0xC1	; 193
    6646:	73 e0       	ldi	r23, 0x03	; 3
    6648:	6e c0       	rjmp	.+220    	; 0x6726 <__divsf3+0x14a>
    664a:	34 30       	cpi	r19, 0x04	; 4
    664c:	39 f4       	brne	.+14     	; 0x665c <__divsf3+0x80>
    664e:	1d 86       	std	Y+13, r1	; 0x0d
    6650:	1e 86       	std	Y+14, r1	; 0x0e
    6652:	1f 86       	std	Y+15, r1	; 0x0f
    6654:	18 8a       	std	Y+16, r1	; 0x10
    6656:	1c 86       	std	Y+12, r1	; 0x0c
    6658:	1b 86       	std	Y+11, r1	; 0x0b
    665a:	04 c0       	rjmp	.+8      	; 0x6664 <__divsf3+0x88>
    665c:	32 30       	cpi	r19, 0x02	; 2
    665e:	21 f4       	brne	.+8      	; 0x6668 <__divsf3+0x8c>
    6660:	84 e0       	ldi	r24, 0x04	; 4
    6662:	89 87       	std	Y+9, r24	; 0x09
    6664:	b7 01       	movw	r22, r14
    6666:	5f c0       	rjmp	.+190    	; 0x6726 <__divsf3+0x14a>
    6668:	2b 85       	ldd	r18, Y+11	; 0x0b
    666a:	3c 85       	ldd	r19, Y+12	; 0x0c
    666c:	8b 89       	ldd	r24, Y+19	; 0x13
    666e:	9c 89       	ldd	r25, Y+20	; 0x14
    6670:	28 1b       	sub	r18, r24
    6672:	39 0b       	sbc	r19, r25
    6674:	3c 87       	std	Y+12, r19	; 0x0c
    6676:	2b 87       	std	Y+11, r18	; 0x0b
    6678:	ed 84       	ldd	r14, Y+13	; 0x0d
    667a:	fe 84       	ldd	r15, Y+14	; 0x0e
    667c:	0f 85       	ldd	r16, Y+15	; 0x0f
    667e:	18 89       	ldd	r17, Y+16	; 0x10
    6680:	ad 88       	ldd	r10, Y+21	; 0x15
    6682:	be 88       	ldd	r11, Y+22	; 0x16
    6684:	cf 88       	ldd	r12, Y+23	; 0x17
    6686:	d8 8c       	ldd	r13, Y+24	; 0x18
    6688:	ea 14       	cp	r14, r10
    668a:	fb 04       	cpc	r15, r11
    668c:	0c 05       	cpc	r16, r12
    668e:	1d 05       	cpc	r17, r13
    6690:	40 f4       	brcc	.+16     	; 0x66a2 <__divsf3+0xc6>
    6692:	ee 0c       	add	r14, r14
    6694:	ff 1c       	adc	r15, r15
    6696:	00 1f       	adc	r16, r16
    6698:	11 1f       	adc	r17, r17
    669a:	21 50       	subi	r18, 0x01	; 1
    669c:	30 40       	sbci	r19, 0x00	; 0
    669e:	3c 87       	std	Y+12, r19	; 0x0c
    66a0:	2b 87       	std	Y+11, r18	; 0x0b
    66a2:	20 e0       	ldi	r18, 0x00	; 0
    66a4:	30 e0       	ldi	r19, 0x00	; 0
    66a6:	40 e0       	ldi	r20, 0x00	; 0
    66a8:	50 e0       	ldi	r21, 0x00	; 0
    66aa:	80 e0       	ldi	r24, 0x00	; 0
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	a0 e0       	ldi	r26, 0x00	; 0
    66b0:	b0 e4       	ldi	r27, 0x40	; 64
    66b2:	60 e0       	ldi	r22, 0x00	; 0
    66b4:	70 e0       	ldi	r23, 0x00	; 0
    66b6:	ea 14       	cp	r14, r10
    66b8:	fb 04       	cpc	r15, r11
    66ba:	0c 05       	cpc	r16, r12
    66bc:	1d 05       	cpc	r17, r13
    66be:	40 f0       	brcs	.+16     	; 0x66d0 <__divsf3+0xf4>
    66c0:	28 2b       	or	r18, r24
    66c2:	39 2b       	or	r19, r25
    66c4:	4a 2b       	or	r20, r26
    66c6:	5b 2b       	or	r21, r27
    66c8:	ea 18       	sub	r14, r10
    66ca:	fb 08       	sbc	r15, r11
    66cc:	0c 09       	sbc	r16, r12
    66ce:	1d 09       	sbc	r17, r13
    66d0:	b6 95       	lsr	r27
    66d2:	a7 95       	ror	r26
    66d4:	97 95       	ror	r25
    66d6:	87 95       	ror	r24
    66d8:	ee 0c       	add	r14, r14
    66da:	ff 1c       	adc	r15, r15
    66dc:	00 1f       	adc	r16, r16
    66de:	11 1f       	adc	r17, r17
    66e0:	6f 5f       	subi	r22, 0xFF	; 255
    66e2:	7f 4f       	sbci	r23, 0xFF	; 255
    66e4:	6f 31       	cpi	r22, 0x1F	; 31
    66e6:	71 05       	cpc	r23, r1
    66e8:	31 f7       	brne	.-52     	; 0x66b6 <__divsf3+0xda>
    66ea:	da 01       	movw	r26, r20
    66ec:	c9 01       	movw	r24, r18
    66ee:	8f 77       	andi	r24, 0x7F	; 127
    66f0:	90 70       	andi	r25, 0x00	; 0
    66f2:	a0 70       	andi	r26, 0x00	; 0
    66f4:	b0 70       	andi	r27, 0x00	; 0
    66f6:	80 34       	cpi	r24, 0x40	; 64
    66f8:	91 05       	cpc	r25, r1
    66fa:	a1 05       	cpc	r26, r1
    66fc:	b1 05       	cpc	r27, r1
    66fe:	61 f4       	brne	.+24     	; 0x6718 <__divsf3+0x13c>
    6700:	27 fd       	sbrc	r18, 7
    6702:	0a c0       	rjmp	.+20     	; 0x6718 <__divsf3+0x13c>
    6704:	e1 14       	cp	r14, r1
    6706:	f1 04       	cpc	r15, r1
    6708:	01 05       	cpc	r16, r1
    670a:	11 05       	cpc	r17, r1
    670c:	29 f0       	breq	.+10     	; 0x6718 <__divsf3+0x13c>
    670e:	20 5c       	subi	r18, 0xC0	; 192
    6710:	3f 4f       	sbci	r19, 0xFF	; 255
    6712:	4f 4f       	sbci	r20, 0xFF	; 255
    6714:	5f 4f       	sbci	r21, 0xFF	; 255
    6716:	20 78       	andi	r18, 0x80	; 128
    6718:	2d 87       	std	Y+13, r18	; 0x0d
    671a:	3e 87       	std	Y+14, r19	; 0x0e
    671c:	4f 87       	std	Y+15, r20	; 0x0f
    671e:	58 8b       	std	Y+16, r21	; 0x10
    6720:	be 01       	movw	r22, r28
    6722:	67 5f       	subi	r22, 0xF7	; 247
    6724:	7f 4f       	sbci	r23, 0xFF	; 255
    6726:	cb 01       	movw	r24, r22
    6728:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__pack_f>
    672c:	68 96       	adiw	r28, 0x18	; 24
    672e:	ea e0       	ldi	r30, 0x0A	; 10
    6730:	0c 94 54 39 	jmp	0x72a8	; 0x72a8 <__epilogue_restores__+0x10>

00006734 <__gtsf2>:
    6734:	a8 e1       	ldi	r26, 0x18	; 24
    6736:	b0 e0       	ldi	r27, 0x00	; 0
    6738:	e0 ea       	ldi	r30, 0xA0	; 160
    673a:	f3 e3       	ldi	r31, 0x33	; 51
    673c:	0c 94 3c 39 	jmp	0x7278	; 0x7278 <__prologue_saves__+0x18>
    6740:	69 83       	std	Y+1, r22	; 0x01
    6742:	7a 83       	std	Y+2, r23	; 0x02
    6744:	8b 83       	std	Y+3, r24	; 0x03
    6746:	9c 83       	std	Y+4, r25	; 0x04
    6748:	2d 83       	std	Y+5, r18	; 0x05
    674a:	3e 83       	std	Y+6, r19	; 0x06
    674c:	4f 83       	std	Y+7, r20	; 0x07
    674e:	58 87       	std	Y+8, r21	; 0x08
    6750:	89 e0       	ldi	r24, 0x09	; 9
    6752:	e8 2e       	mov	r14, r24
    6754:	f1 2c       	mov	r15, r1
    6756:	ec 0e       	add	r14, r28
    6758:	fd 1e       	adc	r15, r29
    675a:	ce 01       	movw	r24, r28
    675c:	01 96       	adiw	r24, 0x01	; 1
    675e:	b7 01       	movw	r22, r14
    6760:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6764:	8e 01       	movw	r16, r28
    6766:	0f 5e       	subi	r16, 0xEF	; 239
    6768:	1f 4f       	sbci	r17, 0xFF	; 255
    676a:	ce 01       	movw	r24, r28
    676c:	05 96       	adiw	r24, 0x05	; 5
    676e:	b8 01       	movw	r22, r16
    6770:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6774:	89 85       	ldd	r24, Y+9	; 0x09
    6776:	82 30       	cpi	r24, 0x02	; 2
    6778:	40 f0       	brcs	.+16     	; 0x678a <__gtsf2+0x56>
    677a:	89 89       	ldd	r24, Y+17	; 0x11
    677c:	82 30       	cpi	r24, 0x02	; 2
    677e:	28 f0       	brcs	.+10     	; 0x678a <__gtsf2+0x56>
    6780:	c7 01       	movw	r24, r14
    6782:	b8 01       	movw	r22, r16
    6784:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <__fpcmp_parts_f>
    6788:	01 c0       	rjmp	.+2      	; 0x678c <__gtsf2+0x58>
    678a:	8f ef       	ldi	r24, 0xFF	; 255
    678c:	68 96       	adiw	r28, 0x18	; 24
    678e:	e6 e0       	ldi	r30, 0x06	; 6
    6790:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <__epilogue_restores__+0x18>

00006794 <__gesf2>:
    6794:	a8 e1       	ldi	r26, 0x18	; 24
    6796:	b0 e0       	ldi	r27, 0x00	; 0
    6798:	e0 ed       	ldi	r30, 0xD0	; 208
    679a:	f3 e3       	ldi	r31, 0x33	; 51
    679c:	0c 94 3c 39 	jmp	0x7278	; 0x7278 <__prologue_saves__+0x18>
    67a0:	69 83       	std	Y+1, r22	; 0x01
    67a2:	7a 83       	std	Y+2, r23	; 0x02
    67a4:	8b 83       	std	Y+3, r24	; 0x03
    67a6:	9c 83       	std	Y+4, r25	; 0x04
    67a8:	2d 83       	std	Y+5, r18	; 0x05
    67aa:	3e 83       	std	Y+6, r19	; 0x06
    67ac:	4f 83       	std	Y+7, r20	; 0x07
    67ae:	58 87       	std	Y+8, r21	; 0x08
    67b0:	89 e0       	ldi	r24, 0x09	; 9
    67b2:	e8 2e       	mov	r14, r24
    67b4:	f1 2c       	mov	r15, r1
    67b6:	ec 0e       	add	r14, r28
    67b8:	fd 1e       	adc	r15, r29
    67ba:	ce 01       	movw	r24, r28
    67bc:	01 96       	adiw	r24, 0x01	; 1
    67be:	b7 01       	movw	r22, r14
    67c0:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    67c4:	8e 01       	movw	r16, r28
    67c6:	0f 5e       	subi	r16, 0xEF	; 239
    67c8:	1f 4f       	sbci	r17, 0xFF	; 255
    67ca:	ce 01       	movw	r24, r28
    67cc:	05 96       	adiw	r24, 0x05	; 5
    67ce:	b8 01       	movw	r22, r16
    67d0:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    67d4:	89 85       	ldd	r24, Y+9	; 0x09
    67d6:	82 30       	cpi	r24, 0x02	; 2
    67d8:	40 f0       	brcs	.+16     	; 0x67ea <__gesf2+0x56>
    67da:	89 89       	ldd	r24, Y+17	; 0x11
    67dc:	82 30       	cpi	r24, 0x02	; 2
    67de:	28 f0       	brcs	.+10     	; 0x67ea <__gesf2+0x56>
    67e0:	c7 01       	movw	r24, r14
    67e2:	b8 01       	movw	r22, r16
    67e4:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <__fpcmp_parts_f>
    67e8:	01 c0       	rjmp	.+2      	; 0x67ec <__gesf2+0x58>
    67ea:	8f ef       	ldi	r24, 0xFF	; 255
    67ec:	68 96       	adiw	r28, 0x18	; 24
    67ee:	e6 e0       	ldi	r30, 0x06	; 6
    67f0:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <__epilogue_restores__+0x18>

000067f4 <__ltsf2>:
    67f4:	a8 e1       	ldi	r26, 0x18	; 24
    67f6:	b0 e0       	ldi	r27, 0x00	; 0
    67f8:	e0 e0       	ldi	r30, 0x00	; 0
    67fa:	f4 e3       	ldi	r31, 0x34	; 52
    67fc:	0c 94 3c 39 	jmp	0x7278	; 0x7278 <__prologue_saves__+0x18>
    6800:	69 83       	std	Y+1, r22	; 0x01
    6802:	7a 83       	std	Y+2, r23	; 0x02
    6804:	8b 83       	std	Y+3, r24	; 0x03
    6806:	9c 83       	std	Y+4, r25	; 0x04
    6808:	2d 83       	std	Y+5, r18	; 0x05
    680a:	3e 83       	std	Y+6, r19	; 0x06
    680c:	4f 83       	std	Y+7, r20	; 0x07
    680e:	58 87       	std	Y+8, r21	; 0x08
    6810:	89 e0       	ldi	r24, 0x09	; 9
    6812:	e8 2e       	mov	r14, r24
    6814:	f1 2c       	mov	r15, r1
    6816:	ec 0e       	add	r14, r28
    6818:	fd 1e       	adc	r15, r29
    681a:	ce 01       	movw	r24, r28
    681c:	01 96       	adiw	r24, 0x01	; 1
    681e:	b7 01       	movw	r22, r14
    6820:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6824:	8e 01       	movw	r16, r28
    6826:	0f 5e       	subi	r16, 0xEF	; 239
    6828:	1f 4f       	sbci	r17, 0xFF	; 255
    682a:	ce 01       	movw	r24, r28
    682c:	05 96       	adiw	r24, 0x05	; 5
    682e:	b8 01       	movw	r22, r16
    6830:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6834:	89 85       	ldd	r24, Y+9	; 0x09
    6836:	82 30       	cpi	r24, 0x02	; 2
    6838:	40 f0       	brcs	.+16     	; 0x684a <__ltsf2+0x56>
    683a:	89 89       	ldd	r24, Y+17	; 0x11
    683c:	82 30       	cpi	r24, 0x02	; 2
    683e:	28 f0       	brcs	.+10     	; 0x684a <__ltsf2+0x56>
    6840:	c7 01       	movw	r24, r14
    6842:	b8 01       	movw	r22, r16
    6844:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <__fpcmp_parts_f>
    6848:	01 c0       	rjmp	.+2      	; 0x684c <__ltsf2+0x58>
    684a:	81 e0       	ldi	r24, 0x01	; 1
    684c:	68 96       	adiw	r28, 0x18	; 24
    684e:	e6 e0       	ldi	r30, 0x06	; 6
    6850:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <__epilogue_restores__+0x18>

00006854 <__floatsisf>:
    6854:	a8 e0       	ldi	r26, 0x08	; 8
    6856:	b0 e0       	ldi	r27, 0x00	; 0
    6858:	e0 e3       	ldi	r30, 0x30	; 48
    685a:	f4 e3       	ldi	r31, 0x34	; 52
    685c:	0c 94 39 39 	jmp	0x7272	; 0x7272 <__prologue_saves__+0x12>
    6860:	9b 01       	movw	r18, r22
    6862:	ac 01       	movw	r20, r24
    6864:	83 e0       	ldi	r24, 0x03	; 3
    6866:	89 83       	std	Y+1, r24	; 0x01
    6868:	da 01       	movw	r26, r20
    686a:	c9 01       	movw	r24, r18
    686c:	88 27       	eor	r24, r24
    686e:	b7 fd       	sbrc	r27, 7
    6870:	83 95       	inc	r24
    6872:	99 27       	eor	r25, r25
    6874:	aa 27       	eor	r26, r26
    6876:	bb 27       	eor	r27, r27
    6878:	b8 2e       	mov	r11, r24
    687a:	21 15       	cp	r18, r1
    687c:	31 05       	cpc	r19, r1
    687e:	41 05       	cpc	r20, r1
    6880:	51 05       	cpc	r21, r1
    6882:	19 f4       	brne	.+6      	; 0x688a <__floatsisf+0x36>
    6884:	82 e0       	ldi	r24, 0x02	; 2
    6886:	89 83       	std	Y+1, r24	; 0x01
    6888:	3a c0       	rjmp	.+116    	; 0x68fe <__floatsisf+0xaa>
    688a:	88 23       	and	r24, r24
    688c:	a9 f0       	breq	.+42     	; 0x68b8 <__floatsisf+0x64>
    688e:	20 30       	cpi	r18, 0x00	; 0
    6890:	80 e0       	ldi	r24, 0x00	; 0
    6892:	38 07       	cpc	r19, r24
    6894:	80 e0       	ldi	r24, 0x00	; 0
    6896:	48 07       	cpc	r20, r24
    6898:	80 e8       	ldi	r24, 0x80	; 128
    689a:	58 07       	cpc	r21, r24
    689c:	29 f4       	brne	.+10     	; 0x68a8 <__floatsisf+0x54>
    689e:	60 e0       	ldi	r22, 0x00	; 0
    68a0:	70 e0       	ldi	r23, 0x00	; 0
    68a2:	80 e0       	ldi	r24, 0x00	; 0
    68a4:	9f ec       	ldi	r25, 0xCF	; 207
    68a6:	30 c0       	rjmp	.+96     	; 0x6908 <__floatsisf+0xb4>
    68a8:	ee 24       	eor	r14, r14
    68aa:	ff 24       	eor	r15, r15
    68ac:	87 01       	movw	r16, r14
    68ae:	e2 1a       	sub	r14, r18
    68b0:	f3 0a       	sbc	r15, r19
    68b2:	04 0b       	sbc	r16, r20
    68b4:	15 0b       	sbc	r17, r21
    68b6:	02 c0       	rjmp	.+4      	; 0x68bc <__floatsisf+0x68>
    68b8:	79 01       	movw	r14, r18
    68ba:	8a 01       	movw	r16, r20
    68bc:	8e e1       	ldi	r24, 0x1E	; 30
    68be:	c8 2e       	mov	r12, r24
    68c0:	d1 2c       	mov	r13, r1
    68c2:	dc 82       	std	Y+4, r13	; 0x04
    68c4:	cb 82       	std	Y+3, r12	; 0x03
    68c6:	ed 82       	std	Y+5, r14	; 0x05
    68c8:	fe 82       	std	Y+6, r15	; 0x06
    68ca:	0f 83       	std	Y+7, r16	; 0x07
    68cc:	18 87       	std	Y+8, r17	; 0x08
    68ce:	c8 01       	movw	r24, r16
    68d0:	b7 01       	movw	r22, r14
    68d2:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__clzsi2>
    68d6:	01 97       	sbiw	r24, 0x01	; 1
    68d8:	18 16       	cp	r1, r24
    68da:	19 06       	cpc	r1, r25
    68dc:	84 f4       	brge	.+32     	; 0x68fe <__floatsisf+0xaa>
    68de:	08 2e       	mov	r0, r24
    68e0:	04 c0       	rjmp	.+8      	; 0x68ea <__floatsisf+0x96>
    68e2:	ee 0c       	add	r14, r14
    68e4:	ff 1c       	adc	r15, r15
    68e6:	00 1f       	adc	r16, r16
    68e8:	11 1f       	adc	r17, r17
    68ea:	0a 94       	dec	r0
    68ec:	d2 f7       	brpl	.-12     	; 0x68e2 <__floatsisf+0x8e>
    68ee:	ed 82       	std	Y+5, r14	; 0x05
    68f0:	fe 82       	std	Y+6, r15	; 0x06
    68f2:	0f 83       	std	Y+7, r16	; 0x07
    68f4:	18 87       	std	Y+8, r17	; 0x08
    68f6:	c8 1a       	sub	r12, r24
    68f8:	d9 0a       	sbc	r13, r25
    68fa:	dc 82       	std	Y+4, r13	; 0x04
    68fc:	cb 82       	std	Y+3, r12	; 0x03
    68fe:	ba 82       	std	Y+2, r11	; 0x02
    6900:	ce 01       	movw	r24, r28
    6902:	01 96       	adiw	r24, 0x01	; 1
    6904:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__pack_f>
    6908:	28 96       	adiw	r28, 0x08	; 8
    690a:	e9 e0       	ldi	r30, 0x09	; 9
    690c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__epilogue_restores__+0x12>

00006910 <__fixsfsi>:
    6910:	ac e0       	ldi	r26, 0x0C	; 12
    6912:	b0 e0       	ldi	r27, 0x00	; 0
    6914:	ee e8       	ldi	r30, 0x8E	; 142
    6916:	f4 e3       	ldi	r31, 0x34	; 52
    6918:	0c 94 40 39 	jmp	0x7280	; 0x7280 <__prologue_saves__+0x20>
    691c:	69 83       	std	Y+1, r22	; 0x01
    691e:	7a 83       	std	Y+2, r23	; 0x02
    6920:	8b 83       	std	Y+3, r24	; 0x03
    6922:	9c 83       	std	Y+4, r25	; 0x04
    6924:	ce 01       	movw	r24, r28
    6926:	01 96       	adiw	r24, 0x01	; 1
    6928:	be 01       	movw	r22, r28
    692a:	6b 5f       	subi	r22, 0xFB	; 251
    692c:	7f 4f       	sbci	r23, 0xFF	; 255
    692e:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <__unpack_f>
    6932:	8d 81       	ldd	r24, Y+5	; 0x05
    6934:	82 30       	cpi	r24, 0x02	; 2
    6936:	61 f1       	breq	.+88     	; 0x6990 <__fixsfsi+0x80>
    6938:	82 30       	cpi	r24, 0x02	; 2
    693a:	50 f1       	brcs	.+84     	; 0x6990 <__fixsfsi+0x80>
    693c:	84 30       	cpi	r24, 0x04	; 4
    693e:	21 f4       	brne	.+8      	; 0x6948 <__fixsfsi+0x38>
    6940:	8e 81       	ldd	r24, Y+6	; 0x06
    6942:	88 23       	and	r24, r24
    6944:	51 f1       	breq	.+84     	; 0x699a <__fixsfsi+0x8a>
    6946:	2e c0       	rjmp	.+92     	; 0x69a4 <__fixsfsi+0x94>
    6948:	2f 81       	ldd	r18, Y+7	; 0x07
    694a:	38 85       	ldd	r19, Y+8	; 0x08
    694c:	37 fd       	sbrc	r19, 7
    694e:	20 c0       	rjmp	.+64     	; 0x6990 <__fixsfsi+0x80>
    6950:	6e 81       	ldd	r22, Y+6	; 0x06
    6952:	2f 31       	cpi	r18, 0x1F	; 31
    6954:	31 05       	cpc	r19, r1
    6956:	1c f0       	brlt	.+6      	; 0x695e <__fixsfsi+0x4e>
    6958:	66 23       	and	r22, r22
    695a:	f9 f0       	breq	.+62     	; 0x699a <__fixsfsi+0x8a>
    695c:	23 c0       	rjmp	.+70     	; 0x69a4 <__fixsfsi+0x94>
    695e:	8e e1       	ldi	r24, 0x1E	; 30
    6960:	90 e0       	ldi	r25, 0x00	; 0
    6962:	82 1b       	sub	r24, r18
    6964:	93 0b       	sbc	r25, r19
    6966:	29 85       	ldd	r18, Y+9	; 0x09
    6968:	3a 85       	ldd	r19, Y+10	; 0x0a
    696a:	4b 85       	ldd	r20, Y+11	; 0x0b
    696c:	5c 85       	ldd	r21, Y+12	; 0x0c
    696e:	04 c0       	rjmp	.+8      	; 0x6978 <__fixsfsi+0x68>
    6970:	56 95       	lsr	r21
    6972:	47 95       	ror	r20
    6974:	37 95       	ror	r19
    6976:	27 95       	ror	r18
    6978:	8a 95       	dec	r24
    697a:	d2 f7       	brpl	.-12     	; 0x6970 <__fixsfsi+0x60>
    697c:	66 23       	and	r22, r22
    697e:	b1 f0       	breq	.+44     	; 0x69ac <__fixsfsi+0x9c>
    6980:	50 95       	com	r21
    6982:	40 95       	com	r20
    6984:	30 95       	com	r19
    6986:	21 95       	neg	r18
    6988:	3f 4f       	sbci	r19, 0xFF	; 255
    698a:	4f 4f       	sbci	r20, 0xFF	; 255
    698c:	5f 4f       	sbci	r21, 0xFF	; 255
    698e:	0e c0       	rjmp	.+28     	; 0x69ac <__fixsfsi+0x9c>
    6990:	20 e0       	ldi	r18, 0x00	; 0
    6992:	30 e0       	ldi	r19, 0x00	; 0
    6994:	40 e0       	ldi	r20, 0x00	; 0
    6996:	50 e0       	ldi	r21, 0x00	; 0
    6998:	09 c0       	rjmp	.+18     	; 0x69ac <__fixsfsi+0x9c>
    699a:	2f ef       	ldi	r18, 0xFF	; 255
    699c:	3f ef       	ldi	r19, 0xFF	; 255
    699e:	4f ef       	ldi	r20, 0xFF	; 255
    69a0:	5f e7       	ldi	r21, 0x7F	; 127
    69a2:	04 c0       	rjmp	.+8      	; 0x69ac <__fixsfsi+0x9c>
    69a4:	20 e0       	ldi	r18, 0x00	; 0
    69a6:	30 e0       	ldi	r19, 0x00	; 0
    69a8:	40 e0       	ldi	r20, 0x00	; 0
    69aa:	50 e8       	ldi	r21, 0x80	; 128
    69ac:	b9 01       	movw	r22, r18
    69ae:	ca 01       	movw	r24, r20
    69b0:	2c 96       	adiw	r28, 0x0c	; 12
    69b2:	e2 e0       	ldi	r30, 0x02	; 2
    69b4:	0c 94 5c 39 	jmp	0x72b8	; 0x72b8 <__epilogue_restores__+0x20>

000069b8 <__floatunsisf>:
    69b8:	a8 e0       	ldi	r26, 0x08	; 8
    69ba:	b0 e0       	ldi	r27, 0x00	; 0
    69bc:	e2 ee       	ldi	r30, 0xE2	; 226
    69be:	f4 e3       	ldi	r31, 0x34	; 52
    69c0:	0c 94 38 39 	jmp	0x7270	; 0x7270 <__prologue_saves__+0x10>
    69c4:	7b 01       	movw	r14, r22
    69c6:	8c 01       	movw	r16, r24
    69c8:	61 15       	cp	r22, r1
    69ca:	71 05       	cpc	r23, r1
    69cc:	81 05       	cpc	r24, r1
    69ce:	91 05       	cpc	r25, r1
    69d0:	19 f4       	brne	.+6      	; 0x69d8 <__floatunsisf+0x20>
    69d2:	82 e0       	ldi	r24, 0x02	; 2
    69d4:	89 83       	std	Y+1, r24	; 0x01
    69d6:	60 c0       	rjmp	.+192    	; 0x6a98 <__floatunsisf+0xe0>
    69d8:	83 e0       	ldi	r24, 0x03	; 3
    69da:	89 83       	std	Y+1, r24	; 0x01
    69dc:	8e e1       	ldi	r24, 0x1E	; 30
    69de:	c8 2e       	mov	r12, r24
    69e0:	d1 2c       	mov	r13, r1
    69e2:	dc 82       	std	Y+4, r13	; 0x04
    69e4:	cb 82       	std	Y+3, r12	; 0x03
    69e6:	ed 82       	std	Y+5, r14	; 0x05
    69e8:	fe 82       	std	Y+6, r15	; 0x06
    69ea:	0f 83       	std	Y+7, r16	; 0x07
    69ec:	18 87       	std	Y+8, r17	; 0x08
    69ee:	c8 01       	movw	r24, r16
    69f0:	b7 01       	movw	r22, r14
    69f2:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__clzsi2>
    69f6:	fc 01       	movw	r30, r24
    69f8:	31 97       	sbiw	r30, 0x01	; 1
    69fa:	f7 ff       	sbrs	r31, 7
    69fc:	3b c0       	rjmp	.+118    	; 0x6a74 <__floatunsisf+0xbc>
    69fe:	22 27       	eor	r18, r18
    6a00:	33 27       	eor	r19, r19
    6a02:	2e 1b       	sub	r18, r30
    6a04:	3f 0b       	sbc	r19, r31
    6a06:	57 01       	movw	r10, r14
    6a08:	68 01       	movw	r12, r16
    6a0a:	02 2e       	mov	r0, r18
    6a0c:	04 c0       	rjmp	.+8      	; 0x6a16 <__floatunsisf+0x5e>
    6a0e:	d6 94       	lsr	r13
    6a10:	c7 94       	ror	r12
    6a12:	b7 94       	ror	r11
    6a14:	a7 94       	ror	r10
    6a16:	0a 94       	dec	r0
    6a18:	d2 f7       	brpl	.-12     	; 0x6a0e <__floatunsisf+0x56>
    6a1a:	40 e0       	ldi	r20, 0x00	; 0
    6a1c:	50 e0       	ldi	r21, 0x00	; 0
    6a1e:	60 e0       	ldi	r22, 0x00	; 0
    6a20:	70 e0       	ldi	r23, 0x00	; 0
    6a22:	81 e0       	ldi	r24, 0x01	; 1
    6a24:	90 e0       	ldi	r25, 0x00	; 0
    6a26:	a0 e0       	ldi	r26, 0x00	; 0
    6a28:	b0 e0       	ldi	r27, 0x00	; 0
    6a2a:	04 c0       	rjmp	.+8      	; 0x6a34 <__floatunsisf+0x7c>
    6a2c:	88 0f       	add	r24, r24
    6a2e:	99 1f       	adc	r25, r25
    6a30:	aa 1f       	adc	r26, r26
    6a32:	bb 1f       	adc	r27, r27
    6a34:	2a 95       	dec	r18
    6a36:	d2 f7       	brpl	.-12     	; 0x6a2c <__floatunsisf+0x74>
    6a38:	01 97       	sbiw	r24, 0x01	; 1
    6a3a:	a1 09       	sbc	r26, r1
    6a3c:	b1 09       	sbc	r27, r1
    6a3e:	8e 21       	and	r24, r14
    6a40:	9f 21       	and	r25, r15
    6a42:	a0 23       	and	r26, r16
    6a44:	b1 23       	and	r27, r17
    6a46:	00 97       	sbiw	r24, 0x00	; 0
    6a48:	a1 05       	cpc	r26, r1
    6a4a:	b1 05       	cpc	r27, r1
    6a4c:	21 f0       	breq	.+8      	; 0x6a56 <__floatunsisf+0x9e>
    6a4e:	41 e0       	ldi	r20, 0x01	; 1
    6a50:	50 e0       	ldi	r21, 0x00	; 0
    6a52:	60 e0       	ldi	r22, 0x00	; 0
    6a54:	70 e0       	ldi	r23, 0x00	; 0
    6a56:	4a 29       	or	r20, r10
    6a58:	5b 29       	or	r21, r11
    6a5a:	6c 29       	or	r22, r12
    6a5c:	7d 29       	or	r23, r13
    6a5e:	4d 83       	std	Y+5, r20	; 0x05
    6a60:	5e 83       	std	Y+6, r21	; 0x06
    6a62:	6f 83       	std	Y+7, r22	; 0x07
    6a64:	78 87       	std	Y+8, r23	; 0x08
    6a66:	8e e1       	ldi	r24, 0x1E	; 30
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	8e 1b       	sub	r24, r30
    6a6c:	9f 0b       	sbc	r25, r31
    6a6e:	9c 83       	std	Y+4, r25	; 0x04
    6a70:	8b 83       	std	Y+3, r24	; 0x03
    6a72:	12 c0       	rjmp	.+36     	; 0x6a98 <__floatunsisf+0xe0>
    6a74:	30 97       	sbiw	r30, 0x00	; 0
    6a76:	81 f0       	breq	.+32     	; 0x6a98 <__floatunsisf+0xe0>
    6a78:	0e 2e       	mov	r0, r30
    6a7a:	04 c0       	rjmp	.+8      	; 0x6a84 <__floatunsisf+0xcc>
    6a7c:	ee 0c       	add	r14, r14
    6a7e:	ff 1c       	adc	r15, r15
    6a80:	00 1f       	adc	r16, r16
    6a82:	11 1f       	adc	r17, r17
    6a84:	0a 94       	dec	r0
    6a86:	d2 f7       	brpl	.-12     	; 0x6a7c <__floatunsisf+0xc4>
    6a88:	ed 82       	std	Y+5, r14	; 0x05
    6a8a:	fe 82       	std	Y+6, r15	; 0x06
    6a8c:	0f 83       	std	Y+7, r16	; 0x07
    6a8e:	18 87       	std	Y+8, r17	; 0x08
    6a90:	ce 1a       	sub	r12, r30
    6a92:	df 0a       	sbc	r13, r31
    6a94:	dc 82       	std	Y+4, r13	; 0x04
    6a96:	cb 82       	std	Y+3, r12	; 0x03
    6a98:	1a 82       	std	Y+2, r1	; 0x02
    6a9a:	ce 01       	movw	r24, r28
    6a9c:	01 96       	adiw	r24, 0x01	; 1
    6a9e:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__pack_f>
    6aa2:	28 96       	adiw	r28, 0x08	; 8
    6aa4:	ea e0       	ldi	r30, 0x0A	; 10
    6aa6:	0c 94 54 39 	jmp	0x72a8	; 0x72a8 <__epilogue_restores__+0x10>

00006aaa <__clzsi2>:
    6aaa:	ef 92       	push	r14
    6aac:	ff 92       	push	r15
    6aae:	0f 93       	push	r16
    6ab0:	1f 93       	push	r17
    6ab2:	7b 01       	movw	r14, r22
    6ab4:	8c 01       	movw	r16, r24
    6ab6:	80 e0       	ldi	r24, 0x00	; 0
    6ab8:	e8 16       	cp	r14, r24
    6aba:	80 e0       	ldi	r24, 0x00	; 0
    6abc:	f8 06       	cpc	r15, r24
    6abe:	81 e0       	ldi	r24, 0x01	; 1
    6ac0:	08 07       	cpc	r16, r24
    6ac2:	80 e0       	ldi	r24, 0x00	; 0
    6ac4:	18 07       	cpc	r17, r24
    6ac6:	88 f4       	brcc	.+34     	; 0x6aea <__clzsi2+0x40>
    6ac8:	8f ef       	ldi	r24, 0xFF	; 255
    6aca:	e8 16       	cp	r14, r24
    6acc:	f1 04       	cpc	r15, r1
    6ace:	01 05       	cpc	r16, r1
    6ad0:	11 05       	cpc	r17, r1
    6ad2:	31 f0       	breq	.+12     	; 0x6ae0 <__clzsi2+0x36>
    6ad4:	28 f0       	brcs	.+10     	; 0x6ae0 <__clzsi2+0x36>
    6ad6:	88 e0       	ldi	r24, 0x08	; 8
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	a0 e0       	ldi	r26, 0x00	; 0
    6adc:	b0 e0       	ldi	r27, 0x00	; 0
    6ade:	17 c0       	rjmp	.+46     	; 0x6b0e <__clzsi2+0x64>
    6ae0:	80 e0       	ldi	r24, 0x00	; 0
    6ae2:	90 e0       	ldi	r25, 0x00	; 0
    6ae4:	a0 e0       	ldi	r26, 0x00	; 0
    6ae6:	b0 e0       	ldi	r27, 0x00	; 0
    6ae8:	12 c0       	rjmp	.+36     	; 0x6b0e <__clzsi2+0x64>
    6aea:	80 e0       	ldi	r24, 0x00	; 0
    6aec:	e8 16       	cp	r14, r24
    6aee:	80 e0       	ldi	r24, 0x00	; 0
    6af0:	f8 06       	cpc	r15, r24
    6af2:	80 e0       	ldi	r24, 0x00	; 0
    6af4:	08 07       	cpc	r16, r24
    6af6:	81 e0       	ldi	r24, 0x01	; 1
    6af8:	18 07       	cpc	r17, r24
    6afa:	28 f0       	brcs	.+10     	; 0x6b06 <__clzsi2+0x5c>
    6afc:	88 e1       	ldi	r24, 0x18	; 24
    6afe:	90 e0       	ldi	r25, 0x00	; 0
    6b00:	a0 e0       	ldi	r26, 0x00	; 0
    6b02:	b0 e0       	ldi	r27, 0x00	; 0
    6b04:	04 c0       	rjmp	.+8      	; 0x6b0e <__clzsi2+0x64>
    6b06:	80 e1       	ldi	r24, 0x10	; 16
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	a0 e0       	ldi	r26, 0x00	; 0
    6b0c:	b0 e0       	ldi	r27, 0x00	; 0
    6b0e:	20 e2       	ldi	r18, 0x20	; 32
    6b10:	30 e0       	ldi	r19, 0x00	; 0
    6b12:	40 e0       	ldi	r20, 0x00	; 0
    6b14:	50 e0       	ldi	r21, 0x00	; 0
    6b16:	28 1b       	sub	r18, r24
    6b18:	39 0b       	sbc	r19, r25
    6b1a:	4a 0b       	sbc	r20, r26
    6b1c:	5b 0b       	sbc	r21, r27
    6b1e:	04 c0       	rjmp	.+8      	; 0x6b28 <__clzsi2+0x7e>
    6b20:	16 95       	lsr	r17
    6b22:	07 95       	ror	r16
    6b24:	f7 94       	ror	r15
    6b26:	e7 94       	ror	r14
    6b28:	8a 95       	dec	r24
    6b2a:	d2 f7       	brpl	.-12     	; 0x6b20 <__clzsi2+0x76>
    6b2c:	f7 01       	movw	r30, r14
    6b2e:	e7 53       	subi	r30, 0x37	; 55
    6b30:	fc 4f       	sbci	r31, 0xFC	; 252
    6b32:	80 81       	ld	r24, Z
    6b34:	28 1b       	sub	r18, r24
    6b36:	31 09       	sbc	r19, r1
    6b38:	41 09       	sbc	r20, r1
    6b3a:	51 09       	sbc	r21, r1
    6b3c:	c9 01       	movw	r24, r18
    6b3e:	1f 91       	pop	r17
    6b40:	0f 91       	pop	r16
    6b42:	ff 90       	pop	r15
    6b44:	ef 90       	pop	r14
    6b46:	08 95       	ret

00006b48 <__pack_f>:
    6b48:	df 92       	push	r13
    6b4a:	ef 92       	push	r14
    6b4c:	ff 92       	push	r15
    6b4e:	0f 93       	push	r16
    6b50:	1f 93       	push	r17
    6b52:	fc 01       	movw	r30, r24
    6b54:	e4 80       	ldd	r14, Z+4	; 0x04
    6b56:	f5 80       	ldd	r15, Z+5	; 0x05
    6b58:	06 81       	ldd	r16, Z+6	; 0x06
    6b5a:	17 81       	ldd	r17, Z+7	; 0x07
    6b5c:	d1 80       	ldd	r13, Z+1	; 0x01
    6b5e:	80 81       	ld	r24, Z
    6b60:	82 30       	cpi	r24, 0x02	; 2
    6b62:	48 f4       	brcc	.+18     	; 0x6b76 <__pack_f+0x2e>
    6b64:	80 e0       	ldi	r24, 0x00	; 0
    6b66:	90 e0       	ldi	r25, 0x00	; 0
    6b68:	a0 e1       	ldi	r26, 0x10	; 16
    6b6a:	b0 e0       	ldi	r27, 0x00	; 0
    6b6c:	e8 2a       	or	r14, r24
    6b6e:	f9 2a       	or	r15, r25
    6b70:	0a 2b       	or	r16, r26
    6b72:	1b 2b       	or	r17, r27
    6b74:	a5 c0       	rjmp	.+330    	; 0x6cc0 <__pack_f+0x178>
    6b76:	84 30       	cpi	r24, 0x04	; 4
    6b78:	09 f4       	brne	.+2      	; 0x6b7c <__pack_f+0x34>
    6b7a:	9f c0       	rjmp	.+318    	; 0x6cba <__pack_f+0x172>
    6b7c:	82 30       	cpi	r24, 0x02	; 2
    6b7e:	21 f4       	brne	.+8      	; 0x6b88 <__pack_f+0x40>
    6b80:	ee 24       	eor	r14, r14
    6b82:	ff 24       	eor	r15, r15
    6b84:	87 01       	movw	r16, r14
    6b86:	05 c0       	rjmp	.+10     	; 0x6b92 <__pack_f+0x4a>
    6b88:	e1 14       	cp	r14, r1
    6b8a:	f1 04       	cpc	r15, r1
    6b8c:	01 05       	cpc	r16, r1
    6b8e:	11 05       	cpc	r17, r1
    6b90:	19 f4       	brne	.+6      	; 0x6b98 <__pack_f+0x50>
    6b92:	e0 e0       	ldi	r30, 0x00	; 0
    6b94:	f0 e0       	ldi	r31, 0x00	; 0
    6b96:	96 c0       	rjmp	.+300    	; 0x6cc4 <__pack_f+0x17c>
    6b98:	62 81       	ldd	r22, Z+2	; 0x02
    6b9a:	73 81       	ldd	r23, Z+3	; 0x03
    6b9c:	9f ef       	ldi	r25, 0xFF	; 255
    6b9e:	62 38       	cpi	r22, 0x82	; 130
    6ba0:	79 07       	cpc	r23, r25
    6ba2:	0c f0       	brlt	.+2      	; 0x6ba6 <__pack_f+0x5e>
    6ba4:	5b c0       	rjmp	.+182    	; 0x6c5c <__pack_f+0x114>
    6ba6:	22 e8       	ldi	r18, 0x82	; 130
    6ba8:	3f ef       	ldi	r19, 0xFF	; 255
    6baa:	26 1b       	sub	r18, r22
    6bac:	37 0b       	sbc	r19, r23
    6bae:	2a 31       	cpi	r18, 0x1A	; 26
    6bb0:	31 05       	cpc	r19, r1
    6bb2:	2c f0       	brlt	.+10     	; 0x6bbe <__pack_f+0x76>
    6bb4:	20 e0       	ldi	r18, 0x00	; 0
    6bb6:	30 e0       	ldi	r19, 0x00	; 0
    6bb8:	40 e0       	ldi	r20, 0x00	; 0
    6bba:	50 e0       	ldi	r21, 0x00	; 0
    6bbc:	2a c0       	rjmp	.+84     	; 0x6c12 <__pack_f+0xca>
    6bbe:	b8 01       	movw	r22, r16
    6bc0:	a7 01       	movw	r20, r14
    6bc2:	02 2e       	mov	r0, r18
    6bc4:	04 c0       	rjmp	.+8      	; 0x6bce <__pack_f+0x86>
    6bc6:	76 95       	lsr	r23
    6bc8:	67 95       	ror	r22
    6bca:	57 95       	ror	r21
    6bcc:	47 95       	ror	r20
    6bce:	0a 94       	dec	r0
    6bd0:	d2 f7       	brpl	.-12     	; 0x6bc6 <__pack_f+0x7e>
    6bd2:	81 e0       	ldi	r24, 0x01	; 1
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	a0 e0       	ldi	r26, 0x00	; 0
    6bd8:	b0 e0       	ldi	r27, 0x00	; 0
    6bda:	04 c0       	rjmp	.+8      	; 0x6be4 <__pack_f+0x9c>
    6bdc:	88 0f       	add	r24, r24
    6bde:	99 1f       	adc	r25, r25
    6be0:	aa 1f       	adc	r26, r26
    6be2:	bb 1f       	adc	r27, r27
    6be4:	2a 95       	dec	r18
    6be6:	d2 f7       	brpl	.-12     	; 0x6bdc <__pack_f+0x94>
    6be8:	01 97       	sbiw	r24, 0x01	; 1
    6bea:	a1 09       	sbc	r26, r1
    6bec:	b1 09       	sbc	r27, r1
    6bee:	8e 21       	and	r24, r14
    6bf0:	9f 21       	and	r25, r15
    6bf2:	a0 23       	and	r26, r16
    6bf4:	b1 23       	and	r27, r17
    6bf6:	00 97       	sbiw	r24, 0x00	; 0
    6bf8:	a1 05       	cpc	r26, r1
    6bfa:	b1 05       	cpc	r27, r1
    6bfc:	21 f0       	breq	.+8      	; 0x6c06 <__pack_f+0xbe>
    6bfe:	81 e0       	ldi	r24, 0x01	; 1
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	a0 e0       	ldi	r26, 0x00	; 0
    6c04:	b0 e0       	ldi	r27, 0x00	; 0
    6c06:	9a 01       	movw	r18, r20
    6c08:	ab 01       	movw	r20, r22
    6c0a:	28 2b       	or	r18, r24
    6c0c:	39 2b       	or	r19, r25
    6c0e:	4a 2b       	or	r20, r26
    6c10:	5b 2b       	or	r21, r27
    6c12:	da 01       	movw	r26, r20
    6c14:	c9 01       	movw	r24, r18
    6c16:	8f 77       	andi	r24, 0x7F	; 127
    6c18:	90 70       	andi	r25, 0x00	; 0
    6c1a:	a0 70       	andi	r26, 0x00	; 0
    6c1c:	b0 70       	andi	r27, 0x00	; 0
    6c1e:	80 34       	cpi	r24, 0x40	; 64
    6c20:	91 05       	cpc	r25, r1
    6c22:	a1 05       	cpc	r26, r1
    6c24:	b1 05       	cpc	r27, r1
    6c26:	39 f4       	brne	.+14     	; 0x6c36 <__pack_f+0xee>
    6c28:	27 ff       	sbrs	r18, 7
    6c2a:	09 c0       	rjmp	.+18     	; 0x6c3e <__pack_f+0xf6>
    6c2c:	20 5c       	subi	r18, 0xC0	; 192
    6c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c30:	4f 4f       	sbci	r20, 0xFF	; 255
    6c32:	5f 4f       	sbci	r21, 0xFF	; 255
    6c34:	04 c0       	rjmp	.+8      	; 0x6c3e <__pack_f+0xf6>
    6c36:	21 5c       	subi	r18, 0xC1	; 193
    6c38:	3f 4f       	sbci	r19, 0xFF	; 255
    6c3a:	4f 4f       	sbci	r20, 0xFF	; 255
    6c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    6c3e:	e0 e0       	ldi	r30, 0x00	; 0
    6c40:	f0 e0       	ldi	r31, 0x00	; 0
    6c42:	20 30       	cpi	r18, 0x00	; 0
    6c44:	a0 e0       	ldi	r26, 0x00	; 0
    6c46:	3a 07       	cpc	r19, r26
    6c48:	a0 e0       	ldi	r26, 0x00	; 0
    6c4a:	4a 07       	cpc	r20, r26
    6c4c:	a0 e4       	ldi	r26, 0x40	; 64
    6c4e:	5a 07       	cpc	r21, r26
    6c50:	10 f0       	brcs	.+4      	; 0x6c56 <__pack_f+0x10e>
    6c52:	e1 e0       	ldi	r30, 0x01	; 1
    6c54:	f0 e0       	ldi	r31, 0x00	; 0
    6c56:	79 01       	movw	r14, r18
    6c58:	8a 01       	movw	r16, r20
    6c5a:	27 c0       	rjmp	.+78     	; 0x6caa <__pack_f+0x162>
    6c5c:	60 38       	cpi	r22, 0x80	; 128
    6c5e:	71 05       	cpc	r23, r1
    6c60:	64 f5       	brge	.+88     	; 0x6cba <__pack_f+0x172>
    6c62:	fb 01       	movw	r30, r22
    6c64:	e1 58       	subi	r30, 0x81	; 129
    6c66:	ff 4f       	sbci	r31, 0xFF	; 255
    6c68:	d8 01       	movw	r26, r16
    6c6a:	c7 01       	movw	r24, r14
    6c6c:	8f 77       	andi	r24, 0x7F	; 127
    6c6e:	90 70       	andi	r25, 0x00	; 0
    6c70:	a0 70       	andi	r26, 0x00	; 0
    6c72:	b0 70       	andi	r27, 0x00	; 0
    6c74:	80 34       	cpi	r24, 0x40	; 64
    6c76:	91 05       	cpc	r25, r1
    6c78:	a1 05       	cpc	r26, r1
    6c7a:	b1 05       	cpc	r27, r1
    6c7c:	39 f4       	brne	.+14     	; 0x6c8c <__pack_f+0x144>
    6c7e:	e7 fe       	sbrs	r14, 7
    6c80:	0d c0       	rjmp	.+26     	; 0x6c9c <__pack_f+0x154>
    6c82:	80 e4       	ldi	r24, 0x40	; 64
    6c84:	90 e0       	ldi	r25, 0x00	; 0
    6c86:	a0 e0       	ldi	r26, 0x00	; 0
    6c88:	b0 e0       	ldi	r27, 0x00	; 0
    6c8a:	04 c0       	rjmp	.+8      	; 0x6c94 <__pack_f+0x14c>
    6c8c:	8f e3       	ldi	r24, 0x3F	; 63
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	a0 e0       	ldi	r26, 0x00	; 0
    6c92:	b0 e0       	ldi	r27, 0x00	; 0
    6c94:	e8 0e       	add	r14, r24
    6c96:	f9 1e       	adc	r15, r25
    6c98:	0a 1f       	adc	r16, r26
    6c9a:	1b 1f       	adc	r17, r27
    6c9c:	17 ff       	sbrs	r17, 7
    6c9e:	05 c0       	rjmp	.+10     	; 0x6caa <__pack_f+0x162>
    6ca0:	16 95       	lsr	r17
    6ca2:	07 95       	ror	r16
    6ca4:	f7 94       	ror	r15
    6ca6:	e7 94       	ror	r14
    6ca8:	31 96       	adiw	r30, 0x01	; 1
    6caa:	87 e0       	ldi	r24, 0x07	; 7
    6cac:	16 95       	lsr	r17
    6cae:	07 95       	ror	r16
    6cb0:	f7 94       	ror	r15
    6cb2:	e7 94       	ror	r14
    6cb4:	8a 95       	dec	r24
    6cb6:	d1 f7       	brne	.-12     	; 0x6cac <__pack_f+0x164>
    6cb8:	05 c0       	rjmp	.+10     	; 0x6cc4 <__pack_f+0x17c>
    6cba:	ee 24       	eor	r14, r14
    6cbc:	ff 24       	eor	r15, r15
    6cbe:	87 01       	movw	r16, r14
    6cc0:	ef ef       	ldi	r30, 0xFF	; 255
    6cc2:	f0 e0       	ldi	r31, 0x00	; 0
    6cc4:	6e 2f       	mov	r22, r30
    6cc6:	67 95       	ror	r22
    6cc8:	66 27       	eor	r22, r22
    6cca:	67 95       	ror	r22
    6ccc:	90 2f       	mov	r25, r16
    6cce:	9f 77       	andi	r25, 0x7F	; 127
    6cd0:	d7 94       	ror	r13
    6cd2:	dd 24       	eor	r13, r13
    6cd4:	d7 94       	ror	r13
    6cd6:	8e 2f       	mov	r24, r30
    6cd8:	86 95       	lsr	r24
    6cda:	49 2f       	mov	r20, r25
    6cdc:	46 2b       	or	r20, r22
    6cde:	58 2f       	mov	r21, r24
    6ce0:	5d 29       	or	r21, r13
    6ce2:	b7 01       	movw	r22, r14
    6ce4:	ca 01       	movw	r24, r20
    6ce6:	1f 91       	pop	r17
    6ce8:	0f 91       	pop	r16
    6cea:	ff 90       	pop	r15
    6cec:	ef 90       	pop	r14
    6cee:	df 90       	pop	r13
    6cf0:	08 95       	ret

00006cf2 <__unpack_f>:
    6cf2:	fc 01       	movw	r30, r24
    6cf4:	db 01       	movw	r26, r22
    6cf6:	40 81       	ld	r20, Z
    6cf8:	51 81       	ldd	r21, Z+1	; 0x01
    6cfa:	22 81       	ldd	r18, Z+2	; 0x02
    6cfc:	62 2f       	mov	r22, r18
    6cfe:	6f 77       	andi	r22, 0x7F	; 127
    6d00:	70 e0       	ldi	r23, 0x00	; 0
    6d02:	22 1f       	adc	r18, r18
    6d04:	22 27       	eor	r18, r18
    6d06:	22 1f       	adc	r18, r18
    6d08:	93 81       	ldd	r25, Z+3	; 0x03
    6d0a:	89 2f       	mov	r24, r25
    6d0c:	88 0f       	add	r24, r24
    6d0e:	82 2b       	or	r24, r18
    6d10:	28 2f       	mov	r18, r24
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	99 1f       	adc	r25, r25
    6d16:	99 27       	eor	r25, r25
    6d18:	99 1f       	adc	r25, r25
    6d1a:	11 96       	adiw	r26, 0x01	; 1
    6d1c:	9c 93       	st	X, r25
    6d1e:	11 97       	sbiw	r26, 0x01	; 1
    6d20:	21 15       	cp	r18, r1
    6d22:	31 05       	cpc	r19, r1
    6d24:	a9 f5       	brne	.+106    	; 0x6d90 <__unpack_f+0x9e>
    6d26:	41 15       	cp	r20, r1
    6d28:	51 05       	cpc	r21, r1
    6d2a:	61 05       	cpc	r22, r1
    6d2c:	71 05       	cpc	r23, r1
    6d2e:	11 f4       	brne	.+4      	; 0x6d34 <__unpack_f+0x42>
    6d30:	82 e0       	ldi	r24, 0x02	; 2
    6d32:	37 c0       	rjmp	.+110    	; 0x6da2 <__unpack_f+0xb0>
    6d34:	82 e8       	ldi	r24, 0x82	; 130
    6d36:	9f ef       	ldi	r25, 0xFF	; 255
    6d38:	13 96       	adiw	r26, 0x03	; 3
    6d3a:	9c 93       	st	X, r25
    6d3c:	8e 93       	st	-X, r24
    6d3e:	12 97       	sbiw	r26, 0x02	; 2
    6d40:	9a 01       	movw	r18, r20
    6d42:	ab 01       	movw	r20, r22
    6d44:	67 e0       	ldi	r22, 0x07	; 7
    6d46:	22 0f       	add	r18, r18
    6d48:	33 1f       	adc	r19, r19
    6d4a:	44 1f       	adc	r20, r20
    6d4c:	55 1f       	adc	r21, r21
    6d4e:	6a 95       	dec	r22
    6d50:	d1 f7       	brne	.-12     	; 0x6d46 <__unpack_f+0x54>
    6d52:	83 e0       	ldi	r24, 0x03	; 3
    6d54:	8c 93       	st	X, r24
    6d56:	0d c0       	rjmp	.+26     	; 0x6d72 <__unpack_f+0x80>
    6d58:	22 0f       	add	r18, r18
    6d5a:	33 1f       	adc	r19, r19
    6d5c:	44 1f       	adc	r20, r20
    6d5e:	55 1f       	adc	r21, r21
    6d60:	12 96       	adiw	r26, 0x02	; 2
    6d62:	8d 91       	ld	r24, X+
    6d64:	9c 91       	ld	r25, X
    6d66:	13 97       	sbiw	r26, 0x03	; 3
    6d68:	01 97       	sbiw	r24, 0x01	; 1
    6d6a:	13 96       	adiw	r26, 0x03	; 3
    6d6c:	9c 93       	st	X, r25
    6d6e:	8e 93       	st	-X, r24
    6d70:	12 97       	sbiw	r26, 0x02	; 2
    6d72:	20 30       	cpi	r18, 0x00	; 0
    6d74:	80 e0       	ldi	r24, 0x00	; 0
    6d76:	38 07       	cpc	r19, r24
    6d78:	80 e0       	ldi	r24, 0x00	; 0
    6d7a:	48 07       	cpc	r20, r24
    6d7c:	80 e4       	ldi	r24, 0x40	; 64
    6d7e:	58 07       	cpc	r21, r24
    6d80:	58 f3       	brcs	.-42     	; 0x6d58 <__unpack_f+0x66>
    6d82:	14 96       	adiw	r26, 0x04	; 4
    6d84:	2d 93       	st	X+, r18
    6d86:	3d 93       	st	X+, r19
    6d88:	4d 93       	st	X+, r20
    6d8a:	5c 93       	st	X, r21
    6d8c:	17 97       	sbiw	r26, 0x07	; 7
    6d8e:	08 95       	ret
    6d90:	2f 3f       	cpi	r18, 0xFF	; 255
    6d92:	31 05       	cpc	r19, r1
    6d94:	79 f4       	brne	.+30     	; 0x6db4 <__unpack_f+0xc2>
    6d96:	41 15       	cp	r20, r1
    6d98:	51 05       	cpc	r21, r1
    6d9a:	61 05       	cpc	r22, r1
    6d9c:	71 05       	cpc	r23, r1
    6d9e:	19 f4       	brne	.+6      	; 0x6da6 <__unpack_f+0xb4>
    6da0:	84 e0       	ldi	r24, 0x04	; 4
    6da2:	8c 93       	st	X, r24
    6da4:	08 95       	ret
    6da6:	64 ff       	sbrs	r22, 4
    6da8:	03 c0       	rjmp	.+6      	; 0x6db0 <__unpack_f+0xbe>
    6daa:	81 e0       	ldi	r24, 0x01	; 1
    6dac:	8c 93       	st	X, r24
    6dae:	12 c0       	rjmp	.+36     	; 0x6dd4 <__unpack_f+0xe2>
    6db0:	1c 92       	st	X, r1
    6db2:	10 c0       	rjmp	.+32     	; 0x6dd4 <__unpack_f+0xe2>
    6db4:	2f 57       	subi	r18, 0x7F	; 127
    6db6:	30 40       	sbci	r19, 0x00	; 0
    6db8:	13 96       	adiw	r26, 0x03	; 3
    6dba:	3c 93       	st	X, r19
    6dbc:	2e 93       	st	-X, r18
    6dbe:	12 97       	sbiw	r26, 0x02	; 2
    6dc0:	83 e0       	ldi	r24, 0x03	; 3
    6dc2:	8c 93       	st	X, r24
    6dc4:	87 e0       	ldi	r24, 0x07	; 7
    6dc6:	44 0f       	add	r20, r20
    6dc8:	55 1f       	adc	r21, r21
    6dca:	66 1f       	adc	r22, r22
    6dcc:	77 1f       	adc	r23, r23
    6dce:	8a 95       	dec	r24
    6dd0:	d1 f7       	brne	.-12     	; 0x6dc6 <__unpack_f+0xd4>
    6dd2:	70 64       	ori	r23, 0x40	; 64
    6dd4:	14 96       	adiw	r26, 0x04	; 4
    6dd6:	4d 93       	st	X+, r20
    6dd8:	5d 93       	st	X+, r21
    6dda:	6d 93       	st	X+, r22
    6ddc:	7c 93       	st	X, r23
    6dde:	17 97       	sbiw	r26, 0x07	; 7
    6de0:	08 95       	ret

00006de2 <__fpcmp_parts_f>:
    6de2:	1f 93       	push	r17
    6de4:	dc 01       	movw	r26, r24
    6de6:	fb 01       	movw	r30, r22
    6de8:	9c 91       	ld	r25, X
    6dea:	92 30       	cpi	r25, 0x02	; 2
    6dec:	08 f4       	brcc	.+2      	; 0x6df0 <__fpcmp_parts_f+0xe>
    6dee:	47 c0       	rjmp	.+142    	; 0x6e7e <__fpcmp_parts_f+0x9c>
    6df0:	80 81       	ld	r24, Z
    6df2:	82 30       	cpi	r24, 0x02	; 2
    6df4:	08 f4       	brcc	.+2      	; 0x6df8 <__fpcmp_parts_f+0x16>
    6df6:	43 c0       	rjmp	.+134    	; 0x6e7e <__fpcmp_parts_f+0x9c>
    6df8:	94 30       	cpi	r25, 0x04	; 4
    6dfa:	51 f4       	brne	.+20     	; 0x6e10 <__fpcmp_parts_f+0x2e>
    6dfc:	11 96       	adiw	r26, 0x01	; 1
    6dfe:	1c 91       	ld	r17, X
    6e00:	84 30       	cpi	r24, 0x04	; 4
    6e02:	99 f5       	brne	.+102    	; 0x6e6a <__fpcmp_parts_f+0x88>
    6e04:	81 81       	ldd	r24, Z+1	; 0x01
    6e06:	68 2f       	mov	r22, r24
    6e08:	70 e0       	ldi	r23, 0x00	; 0
    6e0a:	61 1b       	sub	r22, r17
    6e0c:	71 09       	sbc	r23, r1
    6e0e:	3f c0       	rjmp	.+126    	; 0x6e8e <__fpcmp_parts_f+0xac>
    6e10:	84 30       	cpi	r24, 0x04	; 4
    6e12:	21 f0       	breq	.+8      	; 0x6e1c <__fpcmp_parts_f+0x3a>
    6e14:	92 30       	cpi	r25, 0x02	; 2
    6e16:	31 f4       	brne	.+12     	; 0x6e24 <__fpcmp_parts_f+0x42>
    6e18:	82 30       	cpi	r24, 0x02	; 2
    6e1a:	b9 f1       	breq	.+110    	; 0x6e8a <__fpcmp_parts_f+0xa8>
    6e1c:	81 81       	ldd	r24, Z+1	; 0x01
    6e1e:	88 23       	and	r24, r24
    6e20:	89 f1       	breq	.+98     	; 0x6e84 <__fpcmp_parts_f+0xa2>
    6e22:	2d c0       	rjmp	.+90     	; 0x6e7e <__fpcmp_parts_f+0x9c>
    6e24:	11 96       	adiw	r26, 0x01	; 1
    6e26:	1c 91       	ld	r17, X
    6e28:	11 97       	sbiw	r26, 0x01	; 1
    6e2a:	82 30       	cpi	r24, 0x02	; 2
    6e2c:	f1 f0       	breq	.+60     	; 0x6e6a <__fpcmp_parts_f+0x88>
    6e2e:	81 81       	ldd	r24, Z+1	; 0x01
    6e30:	18 17       	cp	r17, r24
    6e32:	d9 f4       	brne	.+54     	; 0x6e6a <__fpcmp_parts_f+0x88>
    6e34:	12 96       	adiw	r26, 0x02	; 2
    6e36:	2d 91       	ld	r18, X+
    6e38:	3c 91       	ld	r19, X
    6e3a:	13 97       	sbiw	r26, 0x03	; 3
    6e3c:	82 81       	ldd	r24, Z+2	; 0x02
    6e3e:	93 81       	ldd	r25, Z+3	; 0x03
    6e40:	82 17       	cp	r24, r18
    6e42:	93 07       	cpc	r25, r19
    6e44:	94 f0       	brlt	.+36     	; 0x6e6a <__fpcmp_parts_f+0x88>
    6e46:	28 17       	cp	r18, r24
    6e48:	39 07       	cpc	r19, r25
    6e4a:	bc f0       	brlt	.+46     	; 0x6e7a <__fpcmp_parts_f+0x98>
    6e4c:	14 96       	adiw	r26, 0x04	; 4
    6e4e:	8d 91       	ld	r24, X+
    6e50:	9d 91       	ld	r25, X+
    6e52:	0d 90       	ld	r0, X+
    6e54:	bc 91       	ld	r27, X
    6e56:	a0 2d       	mov	r26, r0
    6e58:	24 81       	ldd	r18, Z+4	; 0x04
    6e5a:	35 81       	ldd	r19, Z+5	; 0x05
    6e5c:	46 81       	ldd	r20, Z+6	; 0x06
    6e5e:	57 81       	ldd	r21, Z+7	; 0x07
    6e60:	28 17       	cp	r18, r24
    6e62:	39 07       	cpc	r19, r25
    6e64:	4a 07       	cpc	r20, r26
    6e66:	5b 07       	cpc	r21, r27
    6e68:	18 f4       	brcc	.+6      	; 0x6e70 <__fpcmp_parts_f+0x8e>
    6e6a:	11 23       	and	r17, r17
    6e6c:	41 f0       	breq	.+16     	; 0x6e7e <__fpcmp_parts_f+0x9c>
    6e6e:	0a c0       	rjmp	.+20     	; 0x6e84 <__fpcmp_parts_f+0xa2>
    6e70:	82 17       	cp	r24, r18
    6e72:	93 07       	cpc	r25, r19
    6e74:	a4 07       	cpc	r26, r20
    6e76:	b5 07       	cpc	r27, r21
    6e78:	40 f4       	brcc	.+16     	; 0x6e8a <__fpcmp_parts_f+0xa8>
    6e7a:	11 23       	and	r17, r17
    6e7c:	19 f0       	breq	.+6      	; 0x6e84 <__fpcmp_parts_f+0xa2>
    6e7e:	61 e0       	ldi	r22, 0x01	; 1
    6e80:	70 e0       	ldi	r23, 0x00	; 0
    6e82:	05 c0       	rjmp	.+10     	; 0x6e8e <__fpcmp_parts_f+0xac>
    6e84:	6f ef       	ldi	r22, 0xFF	; 255
    6e86:	7f ef       	ldi	r23, 0xFF	; 255
    6e88:	02 c0       	rjmp	.+4      	; 0x6e8e <__fpcmp_parts_f+0xac>
    6e8a:	60 e0       	ldi	r22, 0x00	; 0
    6e8c:	70 e0       	ldi	r23, 0x00	; 0
    6e8e:	cb 01       	movw	r24, r22
    6e90:	1f 91       	pop	r17
    6e92:	08 95       	ret

00006e94 <malloc>:
    6e94:	cf 93       	push	r28
    6e96:	df 93       	push	r29
    6e98:	bc 01       	movw	r22, r24
    6e9a:	82 30       	cpi	r24, 0x02	; 2
    6e9c:	91 05       	cpc	r25, r1
    6e9e:	10 f4       	brcc	.+4      	; 0x6ea4 <malloc+0x10>
    6ea0:	62 e0       	ldi	r22, 0x02	; 2
    6ea2:	70 e0       	ldi	r23, 0x00	; 0
    6ea4:	a0 91 9b 05 	lds	r26, 0x059B
    6ea8:	b0 91 9c 05 	lds	r27, 0x059C
    6eac:	ed 01       	movw	r28, r26
    6eae:	e0 e0       	ldi	r30, 0x00	; 0
    6eb0:	f0 e0       	ldi	r31, 0x00	; 0
    6eb2:	40 e0       	ldi	r20, 0x00	; 0
    6eb4:	50 e0       	ldi	r21, 0x00	; 0
    6eb6:	21 c0       	rjmp	.+66     	; 0x6efa <malloc+0x66>
    6eb8:	88 81       	ld	r24, Y
    6eba:	99 81       	ldd	r25, Y+1	; 0x01
    6ebc:	86 17       	cp	r24, r22
    6ebe:	97 07       	cpc	r25, r23
    6ec0:	69 f4       	brne	.+26     	; 0x6edc <malloc+0x48>
    6ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ec6:	30 97       	sbiw	r30, 0x00	; 0
    6ec8:	19 f0       	breq	.+6      	; 0x6ed0 <malloc+0x3c>
    6eca:	93 83       	std	Z+3, r25	; 0x03
    6ecc:	82 83       	std	Z+2, r24	; 0x02
    6ece:	04 c0       	rjmp	.+8      	; 0x6ed8 <malloc+0x44>
    6ed0:	90 93 9c 05 	sts	0x059C, r25
    6ed4:	80 93 9b 05 	sts	0x059B, r24
    6ed8:	fe 01       	movw	r30, r28
    6eda:	34 c0       	rjmp	.+104    	; 0x6f44 <malloc+0xb0>
    6edc:	68 17       	cp	r22, r24
    6ede:	79 07       	cpc	r23, r25
    6ee0:	38 f4       	brcc	.+14     	; 0x6ef0 <malloc+0x5c>
    6ee2:	41 15       	cp	r20, r1
    6ee4:	51 05       	cpc	r21, r1
    6ee6:	19 f0       	breq	.+6      	; 0x6eee <malloc+0x5a>
    6ee8:	84 17       	cp	r24, r20
    6eea:	95 07       	cpc	r25, r21
    6eec:	08 f4       	brcc	.+2      	; 0x6ef0 <malloc+0x5c>
    6eee:	ac 01       	movw	r20, r24
    6ef0:	fe 01       	movw	r30, r28
    6ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ef6:	9c 01       	movw	r18, r24
    6ef8:	e9 01       	movw	r28, r18
    6efa:	20 97       	sbiw	r28, 0x00	; 0
    6efc:	e9 f6       	brne	.-70     	; 0x6eb8 <malloc+0x24>
    6efe:	41 15       	cp	r20, r1
    6f00:	51 05       	cpc	r21, r1
    6f02:	a9 f1       	breq	.+106    	; 0x6f6e <malloc+0xda>
    6f04:	ca 01       	movw	r24, r20
    6f06:	86 1b       	sub	r24, r22
    6f08:	97 0b       	sbc	r25, r23
    6f0a:	04 97       	sbiw	r24, 0x04	; 4
    6f0c:	08 f4       	brcc	.+2      	; 0x6f10 <malloc+0x7c>
    6f0e:	ba 01       	movw	r22, r20
    6f10:	e0 e0       	ldi	r30, 0x00	; 0
    6f12:	f0 e0       	ldi	r31, 0x00	; 0
    6f14:	2a c0       	rjmp	.+84     	; 0x6f6a <malloc+0xd6>
    6f16:	8d 91       	ld	r24, X+
    6f18:	9c 91       	ld	r25, X
    6f1a:	11 97       	sbiw	r26, 0x01	; 1
    6f1c:	84 17       	cp	r24, r20
    6f1e:	95 07       	cpc	r25, r21
    6f20:	f9 f4       	brne	.+62     	; 0x6f60 <malloc+0xcc>
    6f22:	64 17       	cp	r22, r20
    6f24:	75 07       	cpc	r23, r21
    6f26:	81 f4       	brne	.+32     	; 0x6f48 <malloc+0xb4>
    6f28:	12 96       	adiw	r26, 0x02	; 2
    6f2a:	8d 91       	ld	r24, X+
    6f2c:	9c 91       	ld	r25, X
    6f2e:	13 97       	sbiw	r26, 0x03	; 3
    6f30:	30 97       	sbiw	r30, 0x00	; 0
    6f32:	19 f0       	breq	.+6      	; 0x6f3a <malloc+0xa6>
    6f34:	93 83       	std	Z+3, r25	; 0x03
    6f36:	82 83       	std	Z+2, r24	; 0x02
    6f38:	04 c0       	rjmp	.+8      	; 0x6f42 <malloc+0xae>
    6f3a:	90 93 9c 05 	sts	0x059C, r25
    6f3e:	80 93 9b 05 	sts	0x059B, r24
    6f42:	fd 01       	movw	r30, r26
    6f44:	32 96       	adiw	r30, 0x02	; 2
    6f46:	4f c0       	rjmp	.+158    	; 0x6fe6 <malloc+0x152>
    6f48:	ca 01       	movw	r24, r20
    6f4a:	86 1b       	sub	r24, r22
    6f4c:	97 0b       	sbc	r25, r23
    6f4e:	fd 01       	movw	r30, r26
    6f50:	e8 0f       	add	r30, r24
    6f52:	f9 1f       	adc	r31, r25
    6f54:	61 93       	st	Z+, r22
    6f56:	71 93       	st	Z+, r23
    6f58:	02 97       	sbiw	r24, 0x02	; 2
    6f5a:	8d 93       	st	X+, r24
    6f5c:	9c 93       	st	X, r25
    6f5e:	43 c0       	rjmp	.+134    	; 0x6fe6 <malloc+0x152>
    6f60:	fd 01       	movw	r30, r26
    6f62:	82 81       	ldd	r24, Z+2	; 0x02
    6f64:	93 81       	ldd	r25, Z+3	; 0x03
    6f66:	9c 01       	movw	r18, r24
    6f68:	d9 01       	movw	r26, r18
    6f6a:	10 97       	sbiw	r26, 0x00	; 0
    6f6c:	a1 f6       	brne	.-88     	; 0x6f16 <malloc+0x82>
    6f6e:	80 91 99 05 	lds	r24, 0x0599
    6f72:	90 91 9a 05 	lds	r25, 0x059A
    6f76:	89 2b       	or	r24, r25
    6f78:	41 f4       	brne	.+16     	; 0x6f8a <malloc+0xf6>
    6f7a:	80 91 cb 04 	lds	r24, 0x04CB
    6f7e:	90 91 cc 04 	lds	r25, 0x04CC
    6f82:	90 93 9a 05 	sts	0x059A, r25
    6f86:	80 93 99 05 	sts	0x0599, r24
    6f8a:	40 91 cd 04 	lds	r20, 0x04CD
    6f8e:	50 91 ce 04 	lds	r21, 0x04CE
    6f92:	41 15       	cp	r20, r1
    6f94:	51 05       	cpc	r21, r1
    6f96:	41 f4       	brne	.+16     	; 0x6fa8 <malloc+0x114>
    6f98:	4d b7       	in	r20, 0x3d	; 61
    6f9a:	5e b7       	in	r21, 0x3e	; 62
    6f9c:	80 91 c9 04 	lds	r24, 0x04C9
    6fa0:	90 91 ca 04 	lds	r25, 0x04CA
    6fa4:	48 1b       	sub	r20, r24
    6fa6:	59 0b       	sbc	r21, r25
    6fa8:	20 91 99 05 	lds	r18, 0x0599
    6fac:	30 91 9a 05 	lds	r19, 0x059A
    6fb0:	24 17       	cp	r18, r20
    6fb2:	35 07       	cpc	r19, r21
    6fb4:	b0 f4       	brcc	.+44     	; 0x6fe2 <malloc+0x14e>
    6fb6:	ca 01       	movw	r24, r20
    6fb8:	82 1b       	sub	r24, r18
    6fba:	93 0b       	sbc	r25, r19
    6fbc:	86 17       	cp	r24, r22
    6fbe:	97 07       	cpc	r25, r23
    6fc0:	80 f0       	brcs	.+32     	; 0x6fe2 <malloc+0x14e>
    6fc2:	ab 01       	movw	r20, r22
    6fc4:	4e 5f       	subi	r20, 0xFE	; 254
    6fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc8:	84 17       	cp	r24, r20
    6fca:	95 07       	cpc	r25, r21
    6fcc:	50 f0       	brcs	.+20     	; 0x6fe2 <malloc+0x14e>
    6fce:	42 0f       	add	r20, r18
    6fd0:	53 1f       	adc	r21, r19
    6fd2:	50 93 9a 05 	sts	0x059A, r21
    6fd6:	40 93 99 05 	sts	0x0599, r20
    6fda:	f9 01       	movw	r30, r18
    6fdc:	61 93       	st	Z+, r22
    6fde:	71 93       	st	Z+, r23
    6fe0:	02 c0       	rjmp	.+4      	; 0x6fe6 <malloc+0x152>
    6fe2:	e0 e0       	ldi	r30, 0x00	; 0
    6fe4:	f0 e0       	ldi	r31, 0x00	; 0
    6fe6:	cf 01       	movw	r24, r30
    6fe8:	df 91       	pop	r29
    6fea:	cf 91       	pop	r28
    6fec:	08 95       	ret

00006fee <free>:
    6fee:	cf 93       	push	r28
    6ff0:	df 93       	push	r29
    6ff2:	00 97       	sbiw	r24, 0x00	; 0
    6ff4:	09 f4       	brne	.+2      	; 0x6ff8 <free+0xa>
    6ff6:	50 c0       	rjmp	.+160    	; 0x7098 <free+0xaa>
    6ff8:	ec 01       	movw	r28, r24
    6ffa:	22 97       	sbiw	r28, 0x02	; 2
    6ffc:	1b 82       	std	Y+3, r1	; 0x03
    6ffe:	1a 82       	std	Y+2, r1	; 0x02
    7000:	a0 91 9b 05 	lds	r26, 0x059B
    7004:	b0 91 9c 05 	lds	r27, 0x059C
    7008:	10 97       	sbiw	r26, 0x00	; 0
    700a:	09 f1       	breq	.+66     	; 0x704e <free+0x60>
    700c:	40 e0       	ldi	r20, 0x00	; 0
    700e:	50 e0       	ldi	r21, 0x00	; 0
    7010:	ac 17       	cp	r26, r28
    7012:	bd 07       	cpc	r27, r29
    7014:	08 f1       	brcs	.+66     	; 0x7058 <free+0x6a>
    7016:	bb 83       	std	Y+3, r27	; 0x03
    7018:	aa 83       	std	Y+2, r26	; 0x02
    701a:	fe 01       	movw	r30, r28
    701c:	21 91       	ld	r18, Z+
    701e:	31 91       	ld	r19, Z+
    7020:	e2 0f       	add	r30, r18
    7022:	f3 1f       	adc	r31, r19
    7024:	ae 17       	cp	r26, r30
    7026:	bf 07       	cpc	r27, r31
    7028:	79 f4       	brne	.+30     	; 0x7048 <free+0x5a>
    702a:	8d 91       	ld	r24, X+
    702c:	9c 91       	ld	r25, X
    702e:	11 97       	sbiw	r26, 0x01	; 1
    7030:	28 0f       	add	r18, r24
    7032:	39 1f       	adc	r19, r25
    7034:	2e 5f       	subi	r18, 0xFE	; 254
    7036:	3f 4f       	sbci	r19, 0xFF	; 255
    7038:	39 83       	std	Y+1, r19	; 0x01
    703a:	28 83       	st	Y, r18
    703c:	12 96       	adiw	r26, 0x02	; 2
    703e:	8d 91       	ld	r24, X+
    7040:	9c 91       	ld	r25, X
    7042:	13 97       	sbiw	r26, 0x03	; 3
    7044:	9b 83       	std	Y+3, r25	; 0x03
    7046:	8a 83       	std	Y+2, r24	; 0x02
    7048:	41 15       	cp	r20, r1
    704a:	51 05       	cpc	r21, r1
    704c:	71 f4       	brne	.+28     	; 0x706a <free+0x7c>
    704e:	d0 93 9c 05 	sts	0x059C, r29
    7052:	c0 93 9b 05 	sts	0x059B, r28
    7056:	20 c0       	rjmp	.+64     	; 0x7098 <free+0xaa>
    7058:	12 96       	adiw	r26, 0x02	; 2
    705a:	8d 91       	ld	r24, X+
    705c:	9c 91       	ld	r25, X
    705e:	13 97       	sbiw	r26, 0x03	; 3
    7060:	ad 01       	movw	r20, r26
    7062:	00 97       	sbiw	r24, 0x00	; 0
    7064:	11 f0       	breq	.+4      	; 0x706a <free+0x7c>
    7066:	dc 01       	movw	r26, r24
    7068:	d3 cf       	rjmp	.-90     	; 0x7010 <free+0x22>
    706a:	fa 01       	movw	r30, r20
    706c:	d3 83       	std	Z+3, r29	; 0x03
    706e:	c2 83       	std	Z+2, r28	; 0x02
    7070:	21 91       	ld	r18, Z+
    7072:	31 91       	ld	r19, Z+
    7074:	e2 0f       	add	r30, r18
    7076:	f3 1f       	adc	r31, r19
    7078:	ce 17       	cp	r28, r30
    707a:	df 07       	cpc	r29, r31
    707c:	69 f4       	brne	.+26     	; 0x7098 <free+0xaa>
    707e:	88 81       	ld	r24, Y
    7080:	99 81       	ldd	r25, Y+1	; 0x01
    7082:	28 0f       	add	r18, r24
    7084:	39 1f       	adc	r19, r25
    7086:	2e 5f       	subi	r18, 0xFE	; 254
    7088:	3f 4f       	sbci	r19, 0xFF	; 255
    708a:	fa 01       	movw	r30, r20
    708c:	31 83       	std	Z+1, r19	; 0x01
    708e:	20 83       	st	Z, r18
    7090:	8a 81       	ldd	r24, Y+2	; 0x02
    7092:	9b 81       	ldd	r25, Y+3	; 0x03
    7094:	93 83       	std	Z+3, r25	; 0x03
    7096:	82 83       	std	Z+2, r24	; 0x02
    7098:	df 91       	pop	r29
    709a:	cf 91       	pop	r28
    709c:	08 95       	ret

0000709e <atoi>:
    709e:	fc 01       	movw	r30, r24
    70a0:	88 27       	eor	r24, r24
    70a2:	99 27       	eor	r25, r25
    70a4:	e8 94       	clt
    70a6:	21 91       	ld	r18, Z+
    70a8:	20 32       	cpi	r18, 0x20	; 32
    70aa:	e9 f3       	breq	.-6      	; 0x70a6 <atoi+0x8>
    70ac:	29 30       	cpi	r18, 0x09	; 9
    70ae:	10 f0       	brcs	.+4      	; 0x70b4 <atoi+0x16>
    70b0:	2e 30       	cpi	r18, 0x0E	; 14
    70b2:	c8 f3       	brcs	.-14     	; 0x70a6 <atoi+0x8>
    70b4:	2b 32       	cpi	r18, 0x2B	; 43
    70b6:	41 f0       	breq	.+16     	; 0x70c8 <atoi+0x2a>
    70b8:	2d 32       	cpi	r18, 0x2D	; 45
    70ba:	39 f4       	brne	.+14     	; 0x70ca <atoi+0x2c>
    70bc:	68 94       	set
    70be:	04 c0       	rjmp	.+8      	; 0x70c8 <atoi+0x2a>
    70c0:	0e 94 b0 38 	call	0x7160	; 0x7160 <__mulhi_const_10>
    70c4:	82 0f       	add	r24, r18
    70c6:	91 1d       	adc	r25, r1
    70c8:	21 91       	ld	r18, Z+
    70ca:	20 53       	subi	r18, 0x30	; 48
    70cc:	2a 30       	cpi	r18, 0x0A	; 10
    70ce:	c0 f3       	brcs	.-16     	; 0x70c0 <atoi+0x22>
    70d0:	1e f4       	brtc	.+6      	; 0x70d8 <atoi+0x3a>
    70d2:	90 95       	com	r25
    70d4:	81 95       	neg	r24
    70d6:	9f 4f       	sbci	r25, 0xFF	; 255
    70d8:	08 95       	ret

000070da <memcpy>:
    70da:	fb 01       	movw	r30, r22
    70dc:	dc 01       	movw	r26, r24
    70de:	02 c0       	rjmp	.+4      	; 0x70e4 <memcpy+0xa>
    70e0:	01 90       	ld	r0, Z+
    70e2:	0d 92       	st	X+, r0
    70e4:	41 50       	subi	r20, 0x01	; 1
    70e6:	50 40       	sbci	r21, 0x00	; 0
    70e8:	d8 f7       	brcc	.-10     	; 0x70e0 <memcpy+0x6>
    70ea:	08 95       	ret

000070ec <strcmp>:
    70ec:	fb 01       	movw	r30, r22
    70ee:	dc 01       	movw	r26, r24
    70f0:	8d 91       	ld	r24, X+
    70f2:	01 90       	ld	r0, Z+
    70f4:	80 19       	sub	r24, r0
    70f6:	01 10       	cpse	r0, r1
    70f8:	d9 f3       	breq	.-10     	; 0x70f0 <strcmp+0x4>
    70fa:	99 0b       	sbc	r25, r25
    70fc:	08 95       	ret

000070fe <strcpy>:
    70fe:	fb 01       	movw	r30, r22
    7100:	dc 01       	movw	r26, r24
    7102:	01 90       	ld	r0, Z+
    7104:	0d 92       	st	X+, r0
    7106:	00 20       	and	r0, r0
    7108:	e1 f7       	brne	.-8      	; 0x7102 <strcpy+0x4>
    710a:	08 95       	ret

0000710c <strlen>:
    710c:	fc 01       	movw	r30, r24
    710e:	01 90       	ld	r0, Z+
    7110:	00 20       	and	r0, r0
    7112:	e9 f7       	brne	.-6      	; 0x710e <strlen+0x2>
    7114:	80 95       	com	r24
    7116:	90 95       	com	r25
    7118:	8e 0f       	add	r24, r30
    711a:	9f 1f       	adc	r25, r31
    711c:	08 95       	ret

0000711e <itoa>:
    711e:	fb 01       	movw	r30, r22
    7120:	9f 01       	movw	r18, r30
    7122:	e8 94       	clt
    7124:	42 30       	cpi	r20, 0x02	; 2
    7126:	c4 f0       	brlt	.+48     	; 0x7158 <itoa+0x3a>
    7128:	45 32       	cpi	r20, 0x25	; 37
    712a:	b4 f4       	brge	.+44     	; 0x7158 <itoa+0x3a>
    712c:	4a 30       	cpi	r20, 0x0A	; 10
    712e:	29 f4       	brne	.+10     	; 0x713a <itoa+0x1c>
    7130:	97 fb       	bst	r25, 7
    7132:	1e f4       	brtc	.+6      	; 0x713a <itoa+0x1c>
    7134:	90 95       	com	r25
    7136:	81 95       	neg	r24
    7138:	9f 4f       	sbci	r25, 0xFF	; 255
    713a:	64 2f       	mov	r22, r20
    713c:	77 27       	eor	r23, r23
    713e:	0e 94 c8 38 	call	0x7190	; 0x7190 <__udivmodhi4>
    7142:	80 5d       	subi	r24, 0xD0	; 208
    7144:	8a 33       	cpi	r24, 0x3A	; 58
    7146:	0c f0       	brlt	.+2      	; 0x714a <itoa+0x2c>
    7148:	89 5d       	subi	r24, 0xD9	; 217
    714a:	81 93       	st	Z+, r24
    714c:	cb 01       	movw	r24, r22
    714e:	00 97       	sbiw	r24, 0x00	; 0
    7150:	a1 f7       	brne	.-24     	; 0x713a <itoa+0x1c>
    7152:	16 f4       	brtc	.+4      	; 0x7158 <itoa+0x3a>
    7154:	5d e2       	ldi	r21, 0x2D	; 45
    7156:	51 93       	st	Z+, r21
    7158:	10 82       	st	Z, r1
    715a:	c9 01       	movw	r24, r18
    715c:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <strrev>

00007160 <__mulhi_const_10>:
    7160:	7a e0       	ldi	r23, 0x0A	; 10
    7162:	97 9f       	mul	r25, r23
    7164:	90 2d       	mov	r25, r0
    7166:	87 9f       	mul	r24, r23
    7168:	80 2d       	mov	r24, r0
    716a:	91 0d       	add	r25, r1
    716c:	11 24       	eor	r1, r1
    716e:	08 95       	ret

00007170 <strrev>:
    7170:	dc 01       	movw	r26, r24
    7172:	fc 01       	movw	r30, r24
    7174:	67 2f       	mov	r22, r23
    7176:	71 91       	ld	r23, Z+
    7178:	77 23       	and	r23, r23
    717a:	e1 f7       	brne	.-8      	; 0x7174 <strrev+0x4>
    717c:	32 97       	sbiw	r30, 0x02	; 2
    717e:	04 c0       	rjmp	.+8      	; 0x7188 <strrev+0x18>
    7180:	7c 91       	ld	r23, X
    7182:	6d 93       	st	X+, r22
    7184:	70 83       	st	Z, r23
    7186:	62 91       	ld	r22, -Z
    7188:	ae 17       	cp	r26, r30
    718a:	bf 07       	cpc	r27, r31
    718c:	c8 f3       	brcs	.-14     	; 0x7180 <strrev+0x10>
    718e:	08 95       	ret

00007190 <__udivmodhi4>:
    7190:	aa 1b       	sub	r26, r26
    7192:	bb 1b       	sub	r27, r27
    7194:	51 e1       	ldi	r21, 0x11	; 17
    7196:	07 c0       	rjmp	.+14     	; 0x71a6 <__udivmodhi4_ep>

00007198 <__udivmodhi4_loop>:
    7198:	aa 1f       	adc	r26, r26
    719a:	bb 1f       	adc	r27, r27
    719c:	a6 17       	cp	r26, r22
    719e:	b7 07       	cpc	r27, r23
    71a0:	10 f0       	brcs	.+4      	; 0x71a6 <__udivmodhi4_ep>
    71a2:	a6 1b       	sub	r26, r22
    71a4:	b7 0b       	sbc	r27, r23

000071a6 <__udivmodhi4_ep>:
    71a6:	88 1f       	adc	r24, r24
    71a8:	99 1f       	adc	r25, r25
    71aa:	5a 95       	dec	r21
    71ac:	a9 f7       	brne	.-22     	; 0x7198 <__udivmodhi4_loop>
    71ae:	80 95       	com	r24
    71b0:	90 95       	com	r25
    71b2:	bc 01       	movw	r22, r24
    71b4:	cd 01       	movw	r24, r26
    71b6:	08 95       	ret

000071b8 <__divmodhi4>:
    71b8:	97 fb       	bst	r25, 7
    71ba:	09 2e       	mov	r0, r25
    71bc:	07 26       	eor	r0, r23
    71be:	0a d0       	rcall	.+20     	; 0x71d4 <__divmodhi4_neg1>
    71c0:	77 fd       	sbrc	r23, 7
    71c2:	04 d0       	rcall	.+8      	; 0x71cc <__divmodhi4_neg2>
    71c4:	e5 df       	rcall	.-54     	; 0x7190 <__udivmodhi4>
    71c6:	06 d0       	rcall	.+12     	; 0x71d4 <__divmodhi4_neg1>
    71c8:	00 20       	and	r0, r0
    71ca:	1a f4       	brpl	.+6      	; 0x71d2 <__divmodhi4_exit>

000071cc <__divmodhi4_neg2>:
    71cc:	70 95       	com	r23
    71ce:	61 95       	neg	r22
    71d0:	7f 4f       	sbci	r23, 0xFF	; 255

000071d2 <__divmodhi4_exit>:
    71d2:	08 95       	ret

000071d4 <__divmodhi4_neg1>:
    71d4:	f6 f7       	brtc	.-4      	; 0x71d2 <__divmodhi4_exit>
    71d6:	90 95       	com	r25
    71d8:	81 95       	neg	r24
    71da:	9f 4f       	sbci	r25, 0xFF	; 255
    71dc:	08 95       	ret

000071de <__mulsi3>:
    71de:	62 9f       	mul	r22, r18
    71e0:	d0 01       	movw	r26, r0
    71e2:	73 9f       	mul	r23, r19
    71e4:	f0 01       	movw	r30, r0
    71e6:	82 9f       	mul	r24, r18
    71e8:	e0 0d       	add	r30, r0
    71ea:	f1 1d       	adc	r31, r1
    71ec:	64 9f       	mul	r22, r20
    71ee:	e0 0d       	add	r30, r0
    71f0:	f1 1d       	adc	r31, r1
    71f2:	92 9f       	mul	r25, r18
    71f4:	f0 0d       	add	r31, r0
    71f6:	83 9f       	mul	r24, r19
    71f8:	f0 0d       	add	r31, r0
    71fa:	74 9f       	mul	r23, r20
    71fc:	f0 0d       	add	r31, r0
    71fe:	65 9f       	mul	r22, r21
    7200:	f0 0d       	add	r31, r0
    7202:	99 27       	eor	r25, r25
    7204:	72 9f       	mul	r23, r18
    7206:	b0 0d       	add	r27, r0
    7208:	e1 1d       	adc	r30, r1
    720a:	f9 1f       	adc	r31, r25
    720c:	63 9f       	mul	r22, r19
    720e:	b0 0d       	add	r27, r0
    7210:	e1 1d       	adc	r30, r1
    7212:	f9 1f       	adc	r31, r25
    7214:	bd 01       	movw	r22, r26
    7216:	cf 01       	movw	r24, r30
    7218:	11 24       	eor	r1, r1
    721a:	08 95       	ret

0000721c <__udivmodsi4>:
    721c:	a1 e2       	ldi	r26, 0x21	; 33
    721e:	1a 2e       	mov	r1, r26
    7220:	aa 1b       	sub	r26, r26
    7222:	bb 1b       	sub	r27, r27
    7224:	fd 01       	movw	r30, r26
    7226:	0d c0       	rjmp	.+26     	; 0x7242 <__udivmodsi4_ep>

00007228 <__udivmodsi4_loop>:
    7228:	aa 1f       	adc	r26, r26
    722a:	bb 1f       	adc	r27, r27
    722c:	ee 1f       	adc	r30, r30
    722e:	ff 1f       	adc	r31, r31
    7230:	a2 17       	cp	r26, r18
    7232:	b3 07       	cpc	r27, r19
    7234:	e4 07       	cpc	r30, r20
    7236:	f5 07       	cpc	r31, r21
    7238:	20 f0       	brcs	.+8      	; 0x7242 <__udivmodsi4_ep>
    723a:	a2 1b       	sub	r26, r18
    723c:	b3 0b       	sbc	r27, r19
    723e:	e4 0b       	sbc	r30, r20
    7240:	f5 0b       	sbc	r31, r21

00007242 <__udivmodsi4_ep>:
    7242:	66 1f       	adc	r22, r22
    7244:	77 1f       	adc	r23, r23
    7246:	88 1f       	adc	r24, r24
    7248:	99 1f       	adc	r25, r25
    724a:	1a 94       	dec	r1
    724c:	69 f7       	brne	.-38     	; 0x7228 <__udivmodsi4_loop>
    724e:	60 95       	com	r22
    7250:	70 95       	com	r23
    7252:	80 95       	com	r24
    7254:	90 95       	com	r25
    7256:	9b 01       	movw	r18, r22
    7258:	ac 01       	movw	r20, r24
    725a:	bd 01       	movw	r22, r26
    725c:	cf 01       	movw	r24, r30
    725e:	08 95       	ret

00007260 <__prologue_saves__>:
    7260:	2f 92       	push	r2
    7262:	3f 92       	push	r3
    7264:	4f 92       	push	r4
    7266:	5f 92       	push	r5
    7268:	6f 92       	push	r6
    726a:	7f 92       	push	r7
    726c:	8f 92       	push	r8
    726e:	9f 92       	push	r9
    7270:	af 92       	push	r10
    7272:	bf 92       	push	r11
    7274:	cf 92       	push	r12
    7276:	df 92       	push	r13
    7278:	ef 92       	push	r14
    727a:	ff 92       	push	r15
    727c:	0f 93       	push	r16
    727e:	1f 93       	push	r17
    7280:	cf 93       	push	r28
    7282:	df 93       	push	r29
    7284:	cd b7       	in	r28, 0x3d	; 61
    7286:	de b7       	in	r29, 0x3e	; 62
    7288:	ca 1b       	sub	r28, r26
    728a:	db 0b       	sbc	r29, r27
    728c:	0f b6       	in	r0, 0x3f	; 63
    728e:	f8 94       	cli
    7290:	de bf       	out	0x3e, r29	; 62
    7292:	0f be       	out	0x3f, r0	; 63
    7294:	cd bf       	out	0x3d, r28	; 61
    7296:	19 94       	eijmp

00007298 <__epilogue_restores__>:
    7298:	2a 88       	ldd	r2, Y+18	; 0x12
    729a:	39 88       	ldd	r3, Y+17	; 0x11
    729c:	48 88       	ldd	r4, Y+16	; 0x10
    729e:	5f 84       	ldd	r5, Y+15	; 0x0f
    72a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    72a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    72a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    72a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    72a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    72aa:	b9 84       	ldd	r11, Y+9	; 0x09
    72ac:	c8 84       	ldd	r12, Y+8	; 0x08
    72ae:	df 80       	ldd	r13, Y+7	; 0x07
    72b0:	ee 80       	ldd	r14, Y+6	; 0x06
    72b2:	fd 80       	ldd	r15, Y+5	; 0x05
    72b4:	0c 81       	ldd	r16, Y+4	; 0x04
    72b6:	1b 81       	ldd	r17, Y+3	; 0x03
    72b8:	aa 81       	ldd	r26, Y+2	; 0x02
    72ba:	b9 81       	ldd	r27, Y+1	; 0x01
    72bc:	ce 0f       	add	r28, r30
    72be:	d1 1d       	adc	r29, r1
    72c0:	0f b6       	in	r0, 0x3f	; 63
    72c2:	f8 94       	cli
    72c4:	de bf       	out	0x3e, r29	; 62
    72c6:	0f be       	out	0x3f, r0	; 63
    72c8:	cd bf       	out	0x3d, r28	; 61
    72ca:	ed 01       	movw	r28, r26
    72cc:	08 95       	ret

000072ce <_exit>:
    72ce:	f8 94       	cli

000072d0 <__stop_program>:
    72d0:	ff cf       	rjmp	.-2      	; 0x72d0 <__stop_program>
